### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceBus.NamespaceManager
  commentId: T:Microsoft.ServiceBus.NamespaceManager
  id: NamespaceManager
  parent: Microsoft.ServiceBus
  children:
  - Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.String},Microsoft.ServiceBus.NamespaceManagerSettings)
  - Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.String},Microsoft.ServiceBus.TokenProvider)
  - Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.Uri})
  - Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.Uri},Microsoft.ServiceBus.NamespaceManagerSettings)
  - Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.Uri},Microsoft.ServiceBus.TokenProvider)
  - Microsoft.ServiceBus.NamespaceManager.#ctor(System.String)
  - Microsoft.ServiceBus.NamespaceManager.#ctor(System.String,Microsoft.ServiceBus.NamespaceManagerSettings)
  - Microsoft.ServiceBus.NamespaceManager.#ctor(System.String,Microsoft.ServiceBus.TokenProvider)
  - Microsoft.ServiceBus.NamespaceManager.#ctor(System.Uri)
  - Microsoft.ServiceBus.NamespaceManager.#ctor(System.Uri,Microsoft.ServiceBus.NamespaceManagerSettings)
  - Microsoft.ServiceBus.NamespaceManager.#ctor(System.Uri,Microsoft.ServiceBus.TokenProvider)
  - Microsoft.ServiceBus.NamespaceManager.Address
  - Microsoft.ServiceBus.NamespaceManager.Create
  - Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupAsync(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExistsAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExistsAsync(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.CreateEventHub(Microsoft.ServiceBus.Messaging.EventHubDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateEventHub(System.String)
  - Microsoft.ServiceBus.NamespaceManager.CreateEventHubAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateEventHubAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExists(Microsoft.ServiceBus.Messaging.EventHubDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExists(System.String)
  - Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExistsAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExistsAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.CreateFromConnectionString(System.String)
  - Microsoft.ServiceBus.NamespaceManager.CreateHybridConnection(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateHybridConnectionAsync(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateQueue(Microsoft.ServiceBus.Messaging.QueueDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateQueue(System.String)
  - Microsoft.ServiceBus.NamespaceManager.CreateQueueAsync(Microsoft.ServiceBus.Messaging.QueueDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateQueueAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.CreateRelay(Microsoft.ServiceBus.Messaging.RelayDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateRelay(System.String,Microsoft.ServiceBus.RelayType)
  - Microsoft.ServiceBus.NamespaceManager.CreateRelayAsync(Microsoft.ServiceBus.Messaging.RelayDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateRelayAsync(System.String,Microsoft.ServiceBus.RelayType)
  - Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.Filter)
  - Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.RuleDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String,Microsoft.ServiceBus.Messaging.Filter)
  - Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String,Microsoft.ServiceBus.Messaging.RuleDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.Filter)
  - Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.RuleDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(System.String,System.String,Microsoft.ServiceBus.Messaging.Filter)
  - Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(System.String,System.String,Microsoft.ServiceBus.Messaging.RuleDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateTopic(Microsoft.ServiceBus.Messaging.TopicDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateTopic(System.String)
  - Microsoft.ServiceBus.NamespaceManager.CreateTopicAsync(Microsoft.ServiceBus.Messaging.TopicDescription)
  - Microsoft.ServiceBus.NamespaceManager.CreateTopicAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroup(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroupAsync(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.DeleteEventHub(System.String)
  - Microsoft.ServiceBus.NamespaceManager.DeleteEventHubAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.DeleteHybridConnection(System.String)
  - Microsoft.ServiceBus.NamespaceManager.DeleteHybridConnectionAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.DeleteQueue(System.String)
  - Microsoft.ServiceBus.NamespaceManager.DeleteQueueAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.DeleteRelay(System.String)
  - Microsoft.ServiceBus.NamespaceManager.DeleteRelayAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.DeleteSubscription(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.DeleteSubscriptionAsync(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.DeleteTopic(System.String)
  - Microsoft.ServiceBus.NamespaceManager.DeleteTopicAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.EventHubExists(System.String)
  - Microsoft.ServiceBus.NamespaceManager.EventHubExistsAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetConsumerGroup(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupAsync(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetConsumerGroups(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupsAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetEventHub(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetEventHubAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition(System.String,System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetEventHubPartitionAsync(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetEventHubPartitionAsync(System.String,System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetEventHubs
  - Microsoft.ServiceBus.NamespaceManager.GetEventHubsAsync
  - Microsoft.ServiceBus.NamespaceManager.GetHybridConnection(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetHybridConnectionAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetHybridConnections
  - Microsoft.ServiceBus.NamespaceManager.GetHybridConnectionsAsync
  - Microsoft.ServiceBus.NamespaceManager.GetQueue(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetQueueAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetQueues
  - Microsoft.ServiceBus.NamespaceManager.GetQueues(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetQueuesAsync
  - Microsoft.ServiceBus.NamespaceManager.GetQueuesAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetRelay(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetRelayAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetRelays
  - Microsoft.ServiceBus.NamespaceManager.GetRelaysAsync
  - Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishers(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishersAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetRules(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetRules(System.String,System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetRulesAsync(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetRulesAsync(System.String,System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetSubscription(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetSubscriptionAsync(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetSubscriptions(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetSubscriptions(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetSubscriptionsAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetSubscriptionsAsync(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetTopic(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetTopicAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetTopics
  - Microsoft.ServiceBus.NamespaceManager.GetTopics(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetTopicsAsync
  - Microsoft.ServiceBus.NamespaceManager.GetTopicsAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.GetVersionInfo
  - Microsoft.ServiceBus.NamespaceManager.GetVersionInfoAsync
  - Microsoft.ServiceBus.NamespaceManager.HybridConnectionExists(System.String)
  - Microsoft.ServiceBus.NamespaceManager.HybridConnectionExistsAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.ProtocolVersion
  - Microsoft.ServiceBus.NamespaceManager.QueueExists(System.String)
  - Microsoft.ServiceBus.NamespaceManager.QueueExistsAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.RelayExists(System.String)
  - Microsoft.ServiceBus.NamespaceManager.RelayExistsAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.RenameQueue(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.RenameQueueAsync(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.RenameTopic(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.RenameTopicAsync(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.RestorePublisher(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.RestorePublisherAsync(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.RevokePublisher(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.RevokePublisherAsync(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.Settings
  - Microsoft.ServiceBus.NamespaceManager.SubscriptionExists(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.SubscriptionExistsAsync(System.String,System.String)
  - Microsoft.ServiceBus.NamespaceManager.TopicExists(System.String)
  - Microsoft.ServiceBus.NamespaceManager.TopicExistsAsync(System.String)
  - Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroup(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  - Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroupAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  - Microsoft.ServiceBus.NamespaceManager.UpdateEventHub(Microsoft.ServiceBus.Messaging.EventHubDescription)
  - Microsoft.ServiceBus.NamespaceManager.UpdateEventHubAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)
  - Microsoft.ServiceBus.NamespaceManager.UpdateHybridConnection(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  - Microsoft.ServiceBus.NamespaceManager.UpdateHybridConnectionAsync(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  - Microsoft.ServiceBus.NamespaceManager.UpdateQueue(Microsoft.ServiceBus.Messaging.QueueDescription)
  - Microsoft.ServiceBus.NamespaceManager.UpdateQueueAsync(Microsoft.ServiceBus.Messaging.QueueDescription)
  - Microsoft.ServiceBus.NamespaceManager.UpdateRelay(Microsoft.ServiceBus.Messaging.RelayDescription)
  - Microsoft.ServiceBus.NamespaceManager.UpdateRelayAsync(Microsoft.ServiceBus.Messaging.RelayDescription)
  - Microsoft.ServiceBus.NamespaceManager.UpdateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  - Microsoft.ServiceBus.NamespaceManager.UpdateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  - Microsoft.ServiceBus.NamespaceManager.UpdateTopic(Microsoft.ServiceBus.Messaging.TopicDescription)
  - Microsoft.ServiceBus.NamespaceManager.UpdateTopicAsync(Microsoft.ServiceBus.Messaging.TopicDescription)
  langs:
  - csharp
  - vb
  name: NamespaceManager
  nameWithType: NamespaceManager
  fullName: Microsoft.ServiceBus.NamespaceManager
  type: Class
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: NamespaceManager
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 19
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Represents an anchor class used in managing entities, such as queues, topics, subscriptions, and rules, in your \nservice namespace. You must provide service namespace address and access credentials in order to manage your service namespace."
  example: []
  syntax:
    content: public sealed class NamespaceManager
    content.vb: Public NotInheritable Class NamespaceManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.ServiceBus.NamespaceManager.ProtocolVersion
  commentId: F:Microsoft.ServiceBus.NamespaceManager.ProtocolVersion
  id: ProtocolVersion
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: ProtocolVersion
  nameWithType: NamespaceManager.ProtocolVersion
  fullName: Microsoft.ServiceBus.NamespaceManager.ProtocolVersion
  type: Field
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: ProtocolVersion
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 22
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Specifies the string of the format "YYYY-MM" that indicates the client protocol version.
  example: []
  syntax:
    content: public const string ProtocolVersion = "2016-07"
    content.vb: Public Const ProtocolVersion As String = "2016-07"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.ServiceBus.NamespaceManager.#ctor(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: NamespaceManager(String)
  nameWithType: NamespaceManager.NamespaceManager(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.String)
  type: Constructor
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: .ctor
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 34
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> class with the given service namespace address."
  example: []
  syntax:
    content: public NamespaceManager(string address)
    content.vb: Public Sub New(address As String)
    parameters:
    - id: address
      type: System.String
      description: The full address of the service namespace.
  overload: Microsoft.ServiceBus.NamespaceManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.String})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.String})'
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: NamespaceManager(IEnumerable<String>)
  nameWithType: NamespaceManager.NamespaceManager(IEnumerable<String>)
  fullName: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.Collections.Generic.IEnumerable<System.String>)
  type: Constructor
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: .ctor
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 41
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Initializes a new instance of the <xref href="Microsoft.ServiceBus.NamespaceManager" data-throw-if-not-resolved="false"></xref> class with the given addresses.
  example: []
  syntax:
    content: public NamespaceManager(IEnumerable<string> addresses)
    content.vb: Public Sub New(addresses As IEnumerable(Of String))
    parameters:
    - id: addresses
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The full addresses of the service namespace.
  overload: Microsoft.ServiceBus.NamespaceManager.#ctor*
  nameWithType.vb: NamespaceManager.NamespaceManager(IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: NamespaceManager(IEnumerable(Of String))
- uid: Microsoft.ServiceBus.NamespaceManager.#ctor(System.Uri)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Uri)
  id: '#ctor(System.Uri)'
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: NamespaceManager(Uri)
  nameWithType: NamespaceManager.NamespaceManager(Uri)
  fullName: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.Uri)
  type: Constructor
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: .ctor
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 49
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> class with the given service namespace URI base address. "
  example: []
  syntax:
    content: public NamespaceManager(Uri address)
    content.vb: Public Sub New(address As Uri)
    parameters:
    - id: address
      type: System.Uri
      description: The full URI address of the service namespace.
  overload: Microsoft.ServiceBus.NamespaceManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.Uri})
  commentId: M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.Uri})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Uri})'
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: NamespaceManager(IEnumerable<Uri>)
  nameWithType: NamespaceManager.NamespaceManager(IEnumerable<Uri>)
  fullName: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.Collections.Generic.IEnumerable<System.Uri>)
  type: Constructor
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: .ctor
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 57
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> class with the given service namespace URI base addresses."
  example: []
  syntax:
    content: public NamespaceManager(IEnumerable<Uri> addresses)
    content.vb: Public Sub New(addresses As IEnumerable(Of Uri))
    parameters:
    - id: addresses
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: The full URI addresses of the service namespace.
  overload: Microsoft.ServiceBus.NamespaceManager.#ctor*
  nameWithType.vb: NamespaceManager.NamespaceManager(IEnumerable(Of Uri))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.Collections.Generic.IEnumerable(Of System.Uri))
  name.vb: NamespaceManager(IEnumerable(Of Uri))
- uid: Microsoft.ServiceBus.NamespaceManager.#ctor(System.String,Microsoft.ServiceBus.TokenProvider)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.String,Microsoft.ServiceBus.TokenProvider)
  id: '#ctor(System.String,Microsoft.ServiceBus.TokenProvider)'
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: NamespaceManager(String, TokenProvider)
  nameWithType: NamespaceManager.NamespaceManager(String, TokenProvider)
  fullName: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.String, Microsoft.ServiceBus.TokenProvider)
  type: Constructor
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: .ctor
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 70
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> class with the given service namespace base address and token provider."
  example: []
  syntax:
    content: public NamespaceManager(string address, TokenProvider tokenProvider)
    content.vb: Public Sub New(address As String, tokenProvider As TokenProvider)
    parameters:
    - id: address
      type: System.String
      description: The full address of the service namespace.
    - id: tokenProvider
      type: Microsoft.ServiceBus.TokenProvider
      description: The security token provider.
  overload: Microsoft.ServiceBus.NamespaceManager.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>address</em> contains a path appended to the full address of the service namespace."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>address</em> or <em>tokenProvider</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.String},Microsoft.ServiceBus.TokenProvider)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.String},Microsoft.ServiceBus.TokenProvider)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.String},Microsoft.ServiceBus.TokenProvider)'
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: NamespaceManager(IEnumerable<String>, TokenProvider)
  nameWithType: NamespaceManager.NamespaceManager(IEnumerable<String>, TokenProvider)
  fullName: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.Collections.Generic.IEnumerable<System.String>, Microsoft.ServiceBus.TokenProvider)
  type: Constructor
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: .ctor
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 79
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> class with the given addresses and token provider."
  example: []
  syntax:
    content: public NamespaceManager(IEnumerable<string> addresses, TokenProvider tokenProvider)
    content.vb: Public Sub New(addresses As IEnumerable(Of String), tokenProvider As TokenProvider)
    parameters:
    - id: addresses
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The full addresses of the service namespace.
    - id: tokenProvider
      type: Microsoft.ServiceBus.TokenProvider
      description: The security token provider.
  overload: Microsoft.ServiceBus.NamespaceManager.#ctor*
  nameWithType.vb: NamespaceManager.NamespaceManager(IEnumerable(Of String), TokenProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.Collections.Generic.IEnumerable(Of System.String), Microsoft.ServiceBus.TokenProvider)
  name.vb: NamespaceManager(IEnumerable(Of String), TokenProvider)
- uid: Microsoft.ServiceBus.NamespaceManager.#ctor(System.Uri,Microsoft.ServiceBus.TokenProvider)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Uri,Microsoft.ServiceBus.TokenProvider)
  id: '#ctor(System.Uri,Microsoft.ServiceBus.TokenProvider)'
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: NamespaceManager(Uri, TokenProvider)
  nameWithType: NamespaceManager.NamespaceManager(Uri, TokenProvider)
  fullName: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.Uri, Microsoft.ServiceBus.TokenProvider)
  type: Constructor
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: .ctor
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 93
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> class with the given service namespace URI base address and \n<xref href=\"Microsoft.ServiceBus.TokenProvider\" data-throw-if-not-resolved=\"false\"></xref> object."
  example: []
  syntax:
    content: public NamespaceManager(Uri address, TokenProvider tokenProvider)
    content.vb: Public Sub New(address As Uri, tokenProvider As TokenProvider)
    parameters:
    - id: address
      type: System.Uri
      description: The full URI address of the service namespace.
    - id: tokenProvider
      type: Microsoft.ServiceBus.TokenProvider
      description: The security token provider object.
  overload: Microsoft.ServiceBus.NamespaceManager.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>address</em> contains a path appended to the full address of the service namespace."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>address</em> or <em>tokenProvider</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.Uri},Microsoft.ServiceBus.TokenProvider)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.Uri},Microsoft.ServiceBus.TokenProvider)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Uri},Microsoft.ServiceBus.TokenProvider)'
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: NamespaceManager(IEnumerable<Uri>, TokenProvider)
  nameWithType: NamespaceManager.NamespaceManager(IEnumerable<Uri>, TokenProvider)
  fullName: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.Collections.Generic.IEnumerable<System.Uri>, Microsoft.ServiceBus.TokenProvider)
  type: Constructor
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: .ctor
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 108
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> class with the given service namespace URI base addresses and token provider."
  example: []
  syntax:
    content: public NamespaceManager(IEnumerable<Uri> addresses, TokenProvider tokenProvider)
    content.vb: Public Sub New(addresses As IEnumerable(Of Uri), tokenProvider As TokenProvider)
    parameters:
    - id: addresses
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: The full URI addresses of the service namespace.
    - id: tokenProvider
      type: Microsoft.ServiceBus.TokenProvider
      description: The security token provider.
  overload: Microsoft.ServiceBus.NamespaceManager.#ctor*
  nameWithType.vb: NamespaceManager.NamespaceManager(IEnumerable(Of Uri), TokenProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.Collections.Generic.IEnumerable(Of System.Uri), Microsoft.ServiceBus.TokenProvider)
  name.vb: NamespaceManager(IEnumerable(Of Uri), TokenProvider)
- uid: Microsoft.ServiceBus.NamespaceManager.#ctor(System.String,Microsoft.ServiceBus.NamespaceManagerSettings)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.String,Microsoft.ServiceBus.NamespaceManagerSettings)
  id: '#ctor(System.String,Microsoft.ServiceBus.NamespaceManagerSettings)'
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: NamespaceManager(String, NamespaceManagerSettings)
  nameWithType: NamespaceManager.NamespaceManager(String, NamespaceManagerSettings)
  fullName: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.String, Microsoft.ServiceBus.NamespaceManagerSettings)
  type: Constructor
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: .ctor
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 131
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> class with the given service namespace base address and \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> object."
  example: []
  syntax:
    content: public NamespaceManager(string address, NamespaceManagerSettings settings)
    content.vb: Public Sub New(address As String, settings As NamespaceManagerSettings)
    parameters:
    - id: address
      type: System.String
      description: The full address of the service namespace.
    - id: settings
      type: Microsoft.ServiceBus.NamespaceManagerSettings
      description: "A \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> object, which contains the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider\" data-throw-if-not-resolved=\"false\"></xref> and \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> properties."
  overload: Microsoft.ServiceBus.NamespaceManager.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>address</em> contains a path appended to the full address of the service namespace."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>address</em> or <em>settings</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.String},Microsoft.ServiceBus.NamespaceManagerSettings)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.String},Microsoft.ServiceBus.NamespaceManagerSettings)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.String},Microsoft.ServiceBus.NamespaceManagerSettings)'
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: NamespaceManager(IEnumerable<String>, NamespaceManagerSettings)
  nameWithType: NamespaceManager.NamespaceManager(IEnumerable<String>, NamespaceManagerSettings)
  fullName: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.Collections.Generic.IEnumerable<System.String>, Microsoft.ServiceBus.NamespaceManagerSettings)
  type: Constructor
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: .ctor
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 143
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> class with the given addresses and settings."
  example: []
  syntax:
    content: public NamespaceManager(IEnumerable<string> addresses, NamespaceManagerSettings settings)
    content.vb: Public Sub New(addresses As IEnumerable(Of String), settings As NamespaceManagerSettings)
    parameters:
    - id: addresses
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The full addresses of the service namespace.
    - id: settings
      type: Microsoft.ServiceBus.NamespaceManagerSettings
      description: "A \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> object, which contains the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider\" data-throw-if-not-resolved=\"false\"></xref> and \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> properties."
  overload: Microsoft.ServiceBus.NamespaceManager.#ctor*
  nameWithType.vb: NamespaceManager.NamespaceManager(IEnumerable(Of String), NamespaceManagerSettings)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.Collections.Generic.IEnumerable(Of System.String), Microsoft.ServiceBus.NamespaceManagerSettings)
  name.vb: NamespaceManager(IEnumerable(Of String), NamespaceManagerSettings)
- uid: Microsoft.ServiceBus.NamespaceManager.#ctor(System.Uri,Microsoft.ServiceBus.NamespaceManagerSettings)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Uri,Microsoft.ServiceBus.NamespaceManagerSettings)
  id: '#ctor(System.Uri,Microsoft.ServiceBus.NamespaceManagerSettings)'
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: NamespaceManager(Uri, NamespaceManagerSettings)
  nameWithType: NamespaceManager.NamespaceManager(Uri, NamespaceManagerSettings)
  fullName: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.Uri, Microsoft.ServiceBus.NamespaceManagerSettings)
  type: Constructor
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: .ctor
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 160
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> class with the given service namespace URI base address and \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> object."
  example: []
  syntax:
    content: public NamespaceManager(Uri address, NamespaceManagerSettings settings)
    content.vb: Public Sub New(address As Uri, settings As NamespaceManagerSettings)
    parameters:
    - id: address
      type: System.Uri
      description: The full URI address of the service namespace.
    - id: settings
      type: Microsoft.ServiceBus.NamespaceManagerSettings
      description: "A \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> object, which contains the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider\" data-throw-if-not-resolved=\"false\"></xref> and \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> properties."
  overload: Microsoft.ServiceBus.NamespaceManager.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>address</em> contains a path appended to the full address of the service namespace."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>address</em> or <em>settings</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.Uri},Microsoft.ServiceBus.NamespaceManagerSettings)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.Uri},Microsoft.ServiceBus.NamespaceManagerSettings)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Uri},Microsoft.ServiceBus.NamespaceManagerSettings)'
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: NamespaceManager(IEnumerable<Uri>, NamespaceManagerSettings)
  nameWithType: NamespaceManager.NamespaceManager(IEnumerable<Uri>, NamespaceManagerSettings)
  fullName: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.Collections.Generic.IEnumerable<System.Uri>, Microsoft.ServiceBus.NamespaceManagerSettings)
  type: Constructor
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: .ctor
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 172
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> class with the given service namespace URI base addresses and settings."
  example: []
  syntax:
    content: public NamespaceManager(IEnumerable<Uri> addresses, NamespaceManagerSettings settings)
    content.vb: Public Sub New(addresses As IEnumerable(Of Uri), settings As NamespaceManagerSettings)
    parameters:
    - id: addresses
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: The full URI addresses of the service namespace.
    - id: settings
      type: Microsoft.ServiceBus.NamespaceManagerSettings
      description: "A \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> object, which contains the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider\" data-throw-if-not-resolved=\"false\"></xref> and \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> properties."
  overload: Microsoft.ServiceBus.NamespaceManager.#ctor*
  nameWithType.vb: NamespaceManager.NamespaceManager(IEnumerable(Of Uri), NamespaceManagerSettings)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.NamespaceManager.NamespaceManager(System.Collections.Generic.IEnumerable(Of System.Uri), Microsoft.ServiceBus.NamespaceManagerSettings)
  name.vb: NamespaceManager(IEnumerable(Of Uri), NamespaceManagerSettings)
- uid: Microsoft.ServiceBus.NamespaceManager.Address
  commentId: P:Microsoft.ServiceBus.NamespaceManager.Address
  id: Address
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: NamespaceManager.Address
  fullName: Microsoft.ServiceBus.NamespaceManager.Address
  type: Property
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: Address
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 187
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Gets the service namespace base address.
  example: []
  syntax:
    content: public Uri Address { get; }
    content.vb: Public ReadOnly Property Address As Uri
    parameters: []
    return:
      type: System.Uri
      description: A <xref href="System.Uri" data-throw-if-not-resolved="false"></xref> that represents the service namespace base address.
  overload: Microsoft.ServiceBus.NamespaceManager.Address*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.NamespaceManager.Settings
  commentId: P:Microsoft.ServiceBus.NamespaceManager.Settings
  id: Settings
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: Settings
  nameWithType: NamespaceManager.Settings
  fullName: Microsoft.ServiceBus.NamespaceManager.Settings
  type: Property
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: Settings
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 197
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Gets the service namespace client settings.
  example: []
  syntax:
    content: public NamespaceManagerSettings Settings { get; }
    content.vb: Public ReadOnly Property Settings As NamespaceManagerSettings
    parameters: []
    return:
      type: Microsoft.ServiceBus.NamespaceManagerSettings
      description: A <xref href="Microsoft.ServiceBus.NamespaceManagerSettings" data-throw-if-not-resolved="false"></xref> object that represents the service namespace client settings.
  overload: Microsoft.ServiceBus.NamespaceManager.Settings*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.NamespaceManager.Create
  commentId: M:Microsoft.ServiceBus.NamespaceManager.Create
  id: Create
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: Create()
  nameWithType: NamespaceManager.Create()
  fullName: Microsoft.ServiceBus.NamespaceManager.Create()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: Create
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 220
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates a new instance of <xref href="Microsoft.ServiceBus.NamespaceManager" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static NamespaceManager Create()
    content.vb: Public Shared Function Create As NamespaceManager
    return:
      type: Microsoft.ServiceBus.NamespaceManager
      description: A new instance of <xref href="Microsoft.ServiceBus.NamespaceManager" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.NamespaceManager.CreateFromConnectionString(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateFromConnectionString(System.String)
  id: CreateFromConnectionString(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateFromConnectionString(String)
  nameWithType: NamespaceManager.CreateFromConnectionString(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateFromConnectionString(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateFromConnectionString
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 229
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates a new instance of <xref href="Microsoft.ServiceBus.NamespaceManager" data-throw-if-not-resolved="false"></xref> using a specified connection string.
  example: []
  syntax:
    content: public static NamespaceManager CreateFromConnectionString(string connectionString)
    content.vb: Public Shared Function CreateFromConnectionString(connectionString As String) As NamespaceManager
    parameters:
    - id: connectionString
      type: System.String
      description: The connection sting used.
    return:
      type: Microsoft.ServiceBus.NamespaceManager
      description: A new instance of <xref href="Microsoft.ServiceBus.NamespaceManager" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateFromConnectionString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.NamespaceManager.GetVersionInfo
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetVersionInfo
  id: GetVersionInfo
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetVersionInfo()
  nameWithType: NamespaceManager.GetVersionInfo()
  fullName: Microsoft.ServiceBus.NamespaceManager.GetVersionInfo()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetVersionInfo
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 243
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Retrieves a string of the format \"YYYY-MM\" that indicates the \nmaximum supported protocol version that the server or service can handle."
  example: []
  syntax:
    content: public string GetVersionInfo()
    content.vb: Public Function GetVersionInfo As String
    return:
      type: System.String
      description: A string that indicates the maximum supported protocol version that the server or service can handle.
  overload: Microsoft.ServiceBus.NamespaceManager.GetVersionInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetVersionInfoAsync
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetVersionInfoAsync
  id: GetVersionInfoAsync
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetVersionInfoAsync()
  nameWithType: NamespaceManager.GetVersionInfoAsync()
  fullName: Microsoft.ServiceBus.NamespaceManager.GetVersionInfoAsync()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetVersionInfoAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 251
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Asynchronously retrieves a string of the format \"YYYY-MM\" that indicates \nthe maximum supported protocol version that the server or service can handle."
  example: []
  syntax:
    content: public Task<string> GetVersionInfoAsync()
    content.vb: Public Function GetVersionInfoAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetVersionInfoAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateQueue(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateQueue(System.String)
  id: CreateQueue(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateQueue(String)
  nameWithType: NamespaceManager.CreateQueue(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateQueue(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateQueue
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 278
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates a new queue in the service namespace with the given path.
  example: []
  syntax:
    content: public QueueDescription CreateQueue(string path)
    content.vb: Public Function CreateQueue(path As String) As QueueDescription
    parameters:
    - id: path
      type: System.String
      description: The path of the queue relative to the service namespace base address.
    return:
      type: Microsoft.ServiceBus.Messaging.QueueDescription
      description: The <xref href="Microsoft.ServiceBus.Messaging.QueueDescription" data-throw-if-not-resolved="false"></xref> of the newly created queue.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateQueue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>path</em> is null or empty."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The length of <em>path</em> is greater than 290 characters.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "The operation times out. The timeout period is initialized through the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> class. You may need to increase the value of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> property to avoid this exception if the timeout value is relatively low."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    description: "A queue or a topic with the \nsame name and path exists under the same service namespace."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> object does not have sufficient permission to perform this operation. You should check to ensure that your \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> has the correct \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider\" data-throw-if-not-resolved=\"false\"></xref> credentials to perform this operation."
  - type: Microsoft.ServiceBus.Messaging.QuotaExceededException
    commentId: T:Microsoft.ServiceBus.Messaging.QuotaExceededException
    description: "Either the specified size in the description is not supported or the maximum allowable quota has \nbeen reached. You must specify one of the supported size values, delete existing entities, or increase your quota size."
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: An internal error or unexpected exception occurs.
  - type: Microsoft.ServiceBus.Messaging.ServerBusyException
    commentId: T:Microsoft.ServiceBus.Messaging.ServerBusyException
    description: "The server is overloaded with logical operations. You can consider any of the following \nactions:Wait and retry calling this function.Remove entities before retry (for example, receive messages before sending any more)."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateQueueAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateQueueAsync(System.String)
  id: CreateQueueAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateQueueAsync(String)
  nameWithType: NamespaceManager.CreateQueueAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateQueueAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateQueueAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 286
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously creates a new queue in the service namespace with the given path.
  example: []
  syntax:
    content: public Task<QueueDescription> CreateQueueAsync(string path)
    content.vb: Public Function CreateQueueAsync(path As String) As Task(Of QueueDescription)
    parameters:
    - id: path
      type: System.String
      description: The path of the queue relative to the service namespace base address.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.QueueDescription}
      description: The <xref href="Microsoft.ServiceBus.Messaging.QueueDescription" data-throw-if-not-resolved="false"></xref> of the newly created queue.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateQueueAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateQueueAsync(Microsoft.ServiceBus.Messaging.QueueDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateQueueAsync(Microsoft.ServiceBus.Messaging.QueueDescription)
  id: CreateQueueAsync(Microsoft.ServiceBus.Messaging.QueueDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateQueueAsync(QueueDescription)
  nameWithType: NamespaceManager.CreateQueueAsync(QueueDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateQueueAsync(Microsoft.ServiceBus.Messaging.QueueDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateQueueAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 297
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously creates a new queue in the service namespace with the specified queue description.
  example: []
  syntax:
    content: public Task<QueueDescription> CreateQueueAsync(QueueDescription description)
    content.vb: Public Function CreateQueueAsync(description As QueueDescription) As Task(Of QueueDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.QueueDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueDescription\" data-throw-if-not-resolved=\"false\"></xref> object describing the attributes with which the new queue will be created."
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.QueueDescription}
      description: The <xref href="Microsoft.ServiceBus.Messaging.QueueDescription" data-throw-if-not-resolved="false"></xref> of the newly created queue.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateQueueAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateQueue(Microsoft.ServiceBus.Messaging.QueueDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateQueue(Microsoft.ServiceBus.Messaging.QueueDescription)
  id: CreateQueue(Microsoft.ServiceBus.Messaging.QueueDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateQueue(QueueDescription)
  nameWithType: NamespaceManager.CreateQueue(QueueDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateQueue(Microsoft.ServiceBus.Messaging.QueueDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateQueue
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 308
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates a new queue in the service namespace with the specified queue description.
  example: []
  syntax:
    content: public QueueDescription CreateQueue(QueueDescription description)
    content.vb: Public Function CreateQueue(description As QueueDescription) As QueueDescription
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.QueueDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueDescription\" data-throw-if-not-resolved=\"false\"></xref> object describing the attributes with which the new queue will be created."
    return:
      type: Microsoft.ServiceBus.Messaging.QueueDescription
      description: The <xref href="Microsoft.ServiceBus.Messaging.QueueDescription" data-throw-if-not-resolved="false"></xref> of the newly created queue.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateQueue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateRelay(System.String,Microsoft.ServiceBus.RelayType)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateRelay(System.String,Microsoft.ServiceBus.RelayType)
  id: CreateRelay(System.String,Microsoft.ServiceBus.RelayType)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateRelay(String, RelayType)
  nameWithType: NamespaceManager.CreateRelay(String, RelayType)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateRelay(System.String, Microsoft.ServiceBus.RelayType)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateRelay
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 316
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: ''
  example: []
  syntax:
    content: public RelayDescription CreateRelay(string path, RelayType type)
    content.vb: Public Function CreateRelay(path As String, type As RelayType) As RelayDescription
    parameters:
    - id: path
      type: System.String
      description: ''
    - id: type
      type: Microsoft.ServiceBus.RelayType
      description: ''
    return:
      type: Microsoft.ServiceBus.Messaging.RelayDescription
  overload: Microsoft.ServiceBus.NamespaceManager.CreateRelay*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateRelay(Microsoft.ServiceBus.Messaging.RelayDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateRelay(Microsoft.ServiceBus.Messaging.RelayDescription)
  id: CreateRelay(Microsoft.ServiceBus.Messaging.RelayDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateRelay(RelayDescription)
  nameWithType: NamespaceManager.CreateRelay(RelayDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateRelay(Microsoft.ServiceBus.Messaging.RelayDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateRelay
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 323
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: ''
  example: []
  syntax:
    content: public RelayDescription CreateRelay(RelayDescription description)
    content.vb: Public Function CreateRelay(description As RelayDescription) As RelayDescription
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.RelayDescription
      description: ''
    return:
      type: Microsoft.ServiceBus.Messaging.RelayDescription
  overload: Microsoft.ServiceBus.NamespaceManager.CreateRelay*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateRelayAsync(System.String,Microsoft.ServiceBus.RelayType)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateRelayAsync(System.String,Microsoft.ServiceBus.RelayType)
  id: CreateRelayAsync(System.String,Microsoft.ServiceBus.RelayType)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateRelayAsync(String, RelayType)
  nameWithType: NamespaceManager.CreateRelayAsync(String, RelayType)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateRelayAsync(System.String, Microsoft.ServiceBus.RelayType)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateRelayAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 332
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously creates a new relay in the service namespace with the given path and type.
  example: []
  syntax:
    content: public Task<RelayDescription> CreateRelayAsync(string path, RelayType type)
    content.vb: Public Function CreateRelayAsync(path As String, type As RelayType) As Task(Of RelayDescription)
    parameters:
    - id: path
      type: System.String
      description: The path of the queue relative to the service namespace base address.
    - id: type
      type: Microsoft.ServiceBus.RelayType
      description: The relay type.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.RelayDescription}
      description: The <xref href="Microsoft.ServiceBus.Messaging.RelayDescription" data-throw-if-not-resolved="false"></xref> object for the newly created relay.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateRelayAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateRelayAsync(Microsoft.ServiceBus.Messaging.RelayDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateRelayAsync(Microsoft.ServiceBus.Messaging.RelayDescription)
  id: CreateRelayAsync(Microsoft.ServiceBus.Messaging.RelayDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateRelayAsync(RelayDescription)
  nameWithType: NamespaceManager.CreateRelayAsync(RelayDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateRelayAsync(Microsoft.ServiceBus.Messaging.RelayDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateRelayAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 342
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously creates a new relay in the service namespace with the specified queue description.
  example: []
  syntax:
    content: public Task<RelayDescription> CreateRelayAsync(RelayDescription description)
    content.vb: Public Function CreateRelayAsync(description As RelayDescription) As Task(Of RelayDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.RelayDescription
      description: The description object describing the attributes with which the new relay will be created.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.RelayDescription}
      description: The <xref href="Microsoft.ServiceBus.Messaging.RelayDescription" data-throw-if-not-resolved="false"></xref> object for the newly created relay.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateRelayAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteRelay(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.DeleteRelay(System.String)
  id: DeleteRelay(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: DeleteRelay(String)
  nameWithType: NamespaceManager.DeleteRelay(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteRelay(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: DeleteRelay
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 383
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: ''
  example: []
  syntax:
    content: public void DeleteRelay(string path)
    content.vb: Public Sub DeleteRelay(path As String)
    parameters:
    - id: path
      type: System.String
      description: ''
  overload: Microsoft.ServiceBus.NamespaceManager.DeleteRelay*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteRelayAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.DeleteRelayAsync(System.String)
  id: DeleteRelayAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: DeleteRelayAsync(String)
  nameWithType: NamespaceManager.DeleteRelayAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteRelayAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: DeleteRelayAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 391
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously deletes the relay described by the path relative to the service namespace base address.
  example: []
  syntax:
    content: public Task DeleteRelayAsync(string path)
    content.vb: Public Function DeleteRelayAsync(path As String) As Task
    parameters:
    - id: path
      type: System.String
      description: The path of the relay relative to the service namespace base address.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous delete relay operation.
  overload: Microsoft.ServiceBus.NamespaceManager.DeleteRelayAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetRelay(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetRelay(System.String)
  id: GetRelay(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetRelay(String)
  nameWithType: NamespaceManager.GetRelay(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRelay(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetRelay
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 400
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: ''
  example: []
  syntax:
    content: public RelayDescription GetRelay(string path)
    content.vb: Public Function GetRelay(path As String) As RelayDescription
    parameters:
    - id: path
      type: System.String
      description: ''
    return:
      type: Microsoft.ServiceBus.Messaging.RelayDescription
  overload: Microsoft.ServiceBus.NamespaceManager.GetRelay*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetRelayAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetRelayAsync(System.String)
  id: GetRelayAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetRelayAsync(String)
  nameWithType: NamespaceManager.GetRelayAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRelayAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetRelayAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 408
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously retrieves an enumerable collection of all relays in the service namespace with specified path.
  example: []
  syntax:
    content: public Task<RelayDescription> GetRelayAsync(string path)
    content.vb: Public Function GetRelayAsync(path As String) As Task(Of RelayDescription)
    parameters:
    - id: path
      type: System.String
      description: The relay path.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.RelayDescription}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetRelayAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetRelays
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetRelays
  id: GetRelays
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetRelays()
  nameWithType: NamespaceManager.GetRelays()
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRelays()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetRelays
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 417
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: ''
  example: []
  syntax:
    content: public IEnumerable<RelayDescription> GetRelays()
    content.vb: Public Function GetRelays As IEnumerable(Of RelayDescription)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RelayDescription}
  overload: Microsoft.ServiceBus.NamespaceManager.GetRelays*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetRelaysAsync
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetRelaysAsync
  id: GetRelaysAsync
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetRelaysAsync()
  nameWithType: NamespaceManager.GetRelaysAsync()
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRelaysAsync()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetRelaysAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 424
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously retrieves an enumerable collection of all relays in the service namespace.
  example: []
  syntax:
    content: public Task<IEnumerable<RelayDescription>> GetRelaysAsync()
    content.vb: Public Function GetRelaysAsync As Task(Of IEnumerable(Of RelayDescription))
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RelayDescription}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetRelaysAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.RelayExists(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.RelayExists(System.String)
  id: RelayExists(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: RelayExists(String)
  nameWithType: NamespaceManager.RelayExists(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.RelayExists(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: RelayExists
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 451
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: ''
  example: []
  syntax:
    content: public bool RelayExists(string path)
    content.vb: Public Function RelayExists(path As String) As Boolean
    parameters:
    - id: path
      type: System.String
      description: ''
    return:
      type: System.Boolean
  overload: Microsoft.ServiceBus.NamespaceManager.RelayExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.RelayExistsAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.RelayExistsAsync(System.String)
  id: RelayExistsAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: RelayExistsAsync(String)
  nameWithType: NamespaceManager.RelayExistsAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.RelayExistsAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: RelayExistsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 459
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously determines whether a relay exists in the service namespace.
  example: []
  syntax:
    content: public Task<bool> RelayExistsAsync(string path)
    content.vb: Public Function RelayExistsAsync(path As String) As Task(Of Boolean)
    parameters:
    - id: path
      type: System.String
      description: The path of the relay relative to the service namespace base address.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.RelayExistsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateRelay(Microsoft.ServiceBus.Messaging.RelayDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.UpdateRelay(Microsoft.ServiceBus.Messaging.RelayDescription)
  id: UpdateRelay(Microsoft.ServiceBus.Messaging.RelayDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: UpdateRelay(RelayDescription)
  nameWithType: NamespaceManager.UpdateRelay(RelayDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateRelay(Microsoft.ServiceBus.Messaging.RelayDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: UpdateRelay
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 497
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: ''
  example: []
  syntax:
    content: public RelayDescription UpdateRelay(RelayDescription description)
    content.vb: Public Function UpdateRelay(description As RelayDescription) As RelayDescription
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.RelayDescription
      description: ''
    return:
      type: Microsoft.ServiceBus.Messaging.RelayDescription
  overload: Microsoft.ServiceBus.NamespaceManager.UpdateRelay*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateRelayAsync(Microsoft.ServiceBus.Messaging.RelayDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.UpdateRelayAsync(Microsoft.ServiceBus.Messaging.RelayDescription)
  id: UpdateRelayAsync(Microsoft.ServiceBus.Messaging.RelayDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: UpdateRelayAsync(RelayDescription)
  nameWithType: NamespaceManager.UpdateRelayAsync(RelayDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateRelayAsync(Microsoft.ServiceBus.Messaging.RelayDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: UpdateRelayAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 505
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously enables you to update the relay.
  example: []
  syntax:
    content: public Task<RelayDescription> UpdateRelayAsync(RelayDescription description)
    content.vb: Public Function UpdateRelayAsync(description As RelayDescription) As Task(Of RelayDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.RelayDescription
      description: A <xref href="Microsoft.ServiceBus.Messaging.RelayDescription" data-throw-if-not-resolved="false"></xref> object describing the relay to be updated.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.RelayDescription}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.UpdateRelayAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateHybridConnection(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateHybridConnection(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  id: CreateHybridConnection(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateHybridConnection(HybridConnectionDescription)
  nameWithType: NamespaceManager.CreateHybridConnection(HybridConnectionDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateHybridConnection(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateHybridConnection
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 520
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates a new HybridConnection in the service namespace.
  example: []
  syntax:
    content: public HybridConnectionDescription CreateHybridConnection(HybridConnectionDescription hybridConnection)
    content.vb: Public Function CreateHybridConnection(hybridConnection As HybridConnectionDescription) As HybridConnectionDescription
    parameters:
    - id: hybridConnection
      type: Microsoft.ServiceBus.Relay.HybridConnectionDescription
      description: A <xref href="Microsoft.ServiceBus.Relay.HybridConnectionDescription" data-throw-if-not-resolved="false"></xref> describing the new HybridConnection to be created.
    return:
      type: Microsoft.ServiceBus.Relay.HybridConnectionDescription
      description: The <xref href="Microsoft.ServiceBus.Relay.HybridConnectionDescription" data-throw-if-not-resolved="false"></xref> object for the newly created HybridConnection.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateHybridConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateHybridConnectionAsync(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateHybridConnectionAsync(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  id: CreateHybridConnectionAsync(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateHybridConnectionAsync(HybridConnectionDescription)
  nameWithType: NamespaceManager.CreateHybridConnectionAsync(HybridConnectionDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateHybridConnectionAsync(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateHybridConnectionAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 528
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously creates a new HybridConnection in the service namespace.
  example: []
  syntax:
    content: public Task<HybridConnectionDescription> CreateHybridConnectionAsync(HybridConnectionDescription hybridConnection)
    content.vb: Public Function CreateHybridConnectionAsync(hybridConnection As HybridConnectionDescription) As Task(Of HybridConnectionDescription)
    parameters:
    - id: hybridConnection
      type: Microsoft.ServiceBus.Relay.HybridConnectionDescription
      description: A <xref href="Microsoft.ServiceBus.Relay.HybridConnectionDescription" data-throw-if-not-resolved="false"></xref> describing the new HybridConnection to be created.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Relay.HybridConnectionDescription}
      description: The <xref href="Microsoft.ServiceBus.Relay.HybridConnectionDescription" data-throw-if-not-resolved="false"></xref> object for the newly created HybridConnection.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateHybridConnectionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteHybridConnection(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.DeleteHybridConnection(System.String)
  id: DeleteHybridConnection(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: DeleteHybridConnection(String)
  nameWithType: NamespaceManager.DeleteHybridConnection(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteHybridConnection(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: DeleteHybridConnection
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 543
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Deletes the HybridConnection described by the path relative to the service namespace base address.
  example: []
  syntax:
    content: public void DeleteHybridConnection(string path)
    content.vb: Public Sub DeleteHybridConnection(path As String)
    parameters:
    - id: path
      type: System.String
      description: The path of the HybridConnection relative to the service namespace base address.
  overload: Microsoft.ServiceBus.NamespaceManager.DeleteHybridConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteHybridConnectionAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.DeleteHybridConnectionAsync(System.String)
  id: DeleteHybridConnectionAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: DeleteHybridConnectionAsync(String)
  nameWithType: NamespaceManager.DeleteHybridConnectionAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteHybridConnectionAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: DeleteHybridConnectionAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 550
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously deletes the HybridConnection described by the path relative to the service namespace base address.
  example: []
  syntax:
    content: public Task DeleteHybridConnectionAsync(string path)
    content.vb: Public Function DeleteHybridConnectionAsync(path As String) As Task
    parameters:
    - id: path
      type: System.String
      description: The relative path of the HybridConnection.
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.ServiceBus.NamespaceManager.DeleteHybridConnectionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetHybridConnection(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetHybridConnection(System.String)
  id: GetHybridConnection(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetHybridConnection(String)
  nameWithType: NamespaceManager.GetHybridConnection(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetHybridConnection(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetHybridConnection
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 558
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Retrieves a HybridConnection in the service namespace with specified path.
  example: []
  syntax:
    content: public HybridConnectionDescription GetHybridConnection(string path)
    content.vb: Public Function GetHybridConnection(path As String) As HybridConnectionDescription
    parameters:
    - id: path
      type: System.String
      description: The relative path of the HybridConnection.
    return:
      type: Microsoft.ServiceBus.Relay.HybridConnectionDescription
  overload: Microsoft.ServiceBus.NamespaceManager.GetHybridConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetHybridConnectionAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetHybridConnectionAsync(System.String)
  id: GetHybridConnectionAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetHybridConnectionAsync(String)
  nameWithType: NamespaceManager.GetHybridConnectionAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetHybridConnectionAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetHybridConnectionAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 566
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously retrieves a HybridConnection in the service namespace with specified path.
  example: []
  syntax:
    content: public Task<HybridConnectionDescription> GetHybridConnectionAsync(string path)
    content.vb: Public Function GetHybridConnectionAsync(path As String) As Task(Of HybridConnectionDescription)
    parameters:
    - id: path
      type: System.String
      description: The relative path of the HybridConnection.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Relay.HybridConnectionDescription}
      description: A Task which returns the <xref href="Microsoft.ServiceBus.Relay.HybridConnectionDescription" data-throw-if-not-resolved="false"></xref> upon completion.
  overload: Microsoft.ServiceBus.NamespaceManager.GetHybridConnectionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetHybridConnections
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetHybridConnections
  id: GetHybridConnections
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetHybridConnections()
  nameWithType: NamespaceManager.GetHybridConnections()
  fullName: Microsoft.ServiceBus.NamespaceManager.GetHybridConnections()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetHybridConnections
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 574
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Retrieves a collection of all HybridConnections in the namespace.
  example: []
  syntax:
    content: public IEnumerable<HybridConnectionDescription> GetHybridConnections()
    content.vb: Public Function GetHybridConnections As IEnumerable(Of HybridConnectionDescription)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Relay.HybridConnectionDescription}
  overload: Microsoft.ServiceBus.NamespaceManager.GetHybridConnections*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetHybridConnectionsAsync
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetHybridConnectionsAsync
  id: GetHybridConnectionsAsync
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetHybridConnectionsAsync()
  nameWithType: NamespaceManager.GetHybridConnectionsAsync()
  fullName: Microsoft.ServiceBus.NamespaceManager.GetHybridConnectionsAsync()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetHybridConnectionsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 580
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously retrieves a collection of all HybridConnections in the namespace.
  example: []
  syntax:
    content: public Task<IEnumerable<HybridConnectionDescription>> GetHybridConnectionsAsync()
    content.vb: Public Function GetHybridConnectionsAsync As Task(Of IEnumerable(Of HybridConnectionDescription))
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Relay.HybridConnectionDescription}}
  overload: Microsoft.ServiceBus.NamespaceManager.GetHybridConnectionsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.HybridConnectionExists(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.HybridConnectionExists(System.String)
  id: HybridConnectionExists(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: HybridConnectionExists(String)
  nameWithType: NamespaceManager.HybridConnectionExists(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.HybridConnectionExists(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: HybridConnectionExists
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 589
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Determines whether a HybridConnection exists in the service namespace.
  example: []
  syntax:
    content: public bool HybridConnectionExists(string path)
    content.vb: Public Function HybridConnectionExists(path As String) As Boolean
    parameters:
    - id: path
      type: System.String
      description: The relative path of the HybridConnection.
    return:
      type: System.Boolean
  overload: Microsoft.ServiceBus.NamespaceManager.HybridConnectionExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.HybridConnectionExistsAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.HybridConnectionExistsAsync(System.String)
  id: HybridConnectionExistsAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: HybridConnectionExistsAsync(String)
  nameWithType: NamespaceManager.HybridConnectionExistsAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.HybridConnectionExistsAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: HybridConnectionExistsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 596
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously determines whether a HybridConnection exists in the service namespace.
  example: []
  syntax:
    content: public Task<bool> HybridConnectionExistsAsync(string path)
    content.vb: Public Function HybridConnectionExistsAsync(path As String) As Task(Of Boolean)
    parameters:
    - id: path
      type: System.String
      description: The relative path of the HybridConnection.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
  overload: Microsoft.ServiceBus.NamespaceManager.HybridConnectionExistsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateHybridConnection(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.UpdateHybridConnection(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  id: UpdateHybridConnection(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: UpdateHybridConnection(HybridConnectionDescription)
  nameWithType: NamespaceManager.UpdateHybridConnection(HybridConnectionDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateHybridConnection(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: UpdateHybridConnection
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 614
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Updates the HybridConnection.
  example: []
  syntax:
    content: public HybridConnectionDescription UpdateHybridConnection(HybridConnectionDescription hybridConnection)
    content.vb: Public Function UpdateHybridConnection(hybridConnection As HybridConnectionDescription) As HybridConnectionDescription
    parameters:
    - id: hybridConnection
      type: Microsoft.ServiceBus.Relay.HybridConnectionDescription
      description: A <xref href="Microsoft.ServiceBus.Relay.HybridConnectionDescription" data-throw-if-not-resolved="false"></xref> object describing the HybridConnection to be updated.
    return:
      type: Microsoft.ServiceBus.Relay.HybridConnectionDescription
      description: The updated <xref href="Microsoft.ServiceBus.Relay.HybridConnectionDescription" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.UpdateHybridConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateHybridConnectionAsync(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.UpdateHybridConnectionAsync(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  id: UpdateHybridConnectionAsync(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: UpdateHybridConnectionAsync(HybridConnectionDescription)
  nameWithType: NamespaceManager.UpdateHybridConnectionAsync(HybridConnectionDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateHybridConnectionAsync(Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: UpdateHybridConnectionAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 622
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously updates the HybridConnection.
  example: []
  syntax:
    content: public Task<HybridConnectionDescription> UpdateHybridConnectionAsync(HybridConnectionDescription hybridConnection)
    content.vb: Public Function UpdateHybridConnectionAsync(hybridConnection As HybridConnectionDescription) As Task(Of HybridConnectionDescription)
    parameters:
    - id: hybridConnection
      type: Microsoft.ServiceBus.Relay.HybridConnectionDescription
      description: A <xref href="Microsoft.ServiceBus.Relay.HybridConnectionDescription" data-throw-if-not-resolved="false"></xref> object describing the HybridConnection to be updated.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Relay.HybridConnectionDescription}
      description: A Task which returns the <xref href="Microsoft.ServiceBus.Relay.HybridConnectionDescription" data-throw-if-not-resolved="false"></xref> upon completion.
  overload: Microsoft.ServiceBus.NamespaceManager.UpdateHybridConnectionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateEventHub(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateEventHub(System.String)
  id: CreateEventHub(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateEventHub(String)
  nameWithType: NamespaceManager.CreateEventHub(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateEventHub(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateEventHub
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 638
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates a new Event Hub using default values, for the given input path.
  example: []
  syntax:
    content: public EventHubDescription CreateEventHub(string path)
    content.vb: Public Function CreateEventHub(path As String) As EventHubDescription
    parameters:
    - id: path
      type: System.String
      description: The path to the Event Hub.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubDescription
      description: Returns the <xref href="Microsoft.ServiceBus.Messaging.EventHubDescription" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateEventHub*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateEventHub(Microsoft.ServiceBus.Messaging.EventHubDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateEventHub(Microsoft.ServiceBus.Messaging.EventHubDescription)
  id: CreateEventHub(Microsoft.ServiceBus.Messaging.EventHubDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateEventHub(EventHubDescription)
  nameWithType: NamespaceManager.CreateEventHub(EventHubDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateEventHub(Microsoft.ServiceBus.Messaging.EventHubDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateEventHub
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 646
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates a new Event Hub using the specified <xref href="Microsoft.ServiceBus.Messaging.EventHubDescription" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public EventHubDescription CreateEventHub(EventHubDescription description)
    content.vb: Public Function CreateEventHub(description As EventHubDescription) As EventHubDescription
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.EventHubDescription
      description: The <xref href="Microsoft.ServiceBus.Messaging.EventHubDescription" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubDescription
      description: Returns the <xref href="Microsoft.ServiceBus.Messaging.EventHubDescription" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateEventHub*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateEventHubAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateEventHubAsync(System.String)
  id: CreateEventHubAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateEventHubAsync(String)
  nameWithType: NamespaceManager.CreateEventHubAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateEventHubAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateEventHubAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 654
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously creates an event hub.
  example: []
  syntax:
    content: public Task<EventHubDescription> CreateEventHubAsync(string path)
    content.vb: Public Function CreateEventHubAsync(path As String) As Task(Of EventHubDescription)
    parameters:
    - id: path
      type: System.String
      description: The path to the Event Hub.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubDescription}
      description: The task that completes the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateEventHubAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateEventHubAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateEventHubAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)
  id: CreateEventHubAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateEventHubAsync(EventHubDescription)
  nameWithType: NamespaceManager.CreateEventHubAsync(EventHubDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateEventHubAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateEventHubAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 665
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously creates an event hub.
  example: []
  syntax:
    content: public Task<EventHubDescription> CreateEventHubAsync(EventHubDescription description)
    content.vb: Public Function CreateEventHubAsync(description As EventHubDescription) As Task(Of EventHubDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.EventHubDescription
      description: "An \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubDescription\" data-throw-if-not-resolved=\"false\"></xref> object that describes the Event Hub to create."
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubDescription}
      description: The task that completes the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateEventHubAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExists(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExists(System.String)
  id: CreateEventHubIfNotExists(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateEventHubIfNotExists(String)
  nameWithType: NamespaceManager.CreateEventHubIfNotExists(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExists(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateEventHubIfNotExists
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 675
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates an Event Hub if it does not exist.
  example: []
  syntax:
    content: public EventHubDescription CreateEventHubIfNotExists(string path)
    content.vb: Public Function CreateEventHubIfNotExists(path As String) As EventHubDescription
    parameters:
    - id: path
      type: System.String
      description: The path to the Event Hub.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubDescription
      description: Returns an <xref href="Microsoft.ServiceBus.Messaging.EventHubDescription" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExists(Microsoft.ServiceBus.Messaging.EventHubDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExists(Microsoft.ServiceBus.Messaging.EventHubDescription)
  id: CreateEventHubIfNotExists(Microsoft.ServiceBus.Messaging.EventHubDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateEventHubIfNotExists(EventHubDescription)
  nameWithType: NamespaceManager.CreateEventHubIfNotExists(EventHubDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExists(Microsoft.ServiceBus.Messaging.EventHubDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateEventHubIfNotExists
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 684
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates an Event Hub if it does not exist.
  example: []
  syntax:
    content: public EventHubDescription CreateEventHubIfNotExists(EventHubDescription description)
    content.vb: Public Function CreateEventHubIfNotExists(description As EventHubDescription) As EventHubDescription
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.EventHubDescription
      description: "An \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubDescription\" data-throw-if-not-resolved=\"false\"></xref> object that describes the Event Hub to create."
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubDescription
      description: Returns an<xref href="Microsoft.ServiceBus.Messaging.EventHubDescription" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExistsAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExistsAsync(System.String)
  id: CreateEventHubIfNotExistsAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateEventHubIfNotExistsAsync(String)
  nameWithType: NamespaceManager.CreateEventHubIfNotExistsAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExistsAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateEventHubIfNotExistsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 692
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously creates an Event Hub if it does not exist.
  example: []
  syntax:
    content: public Task<EventHubDescription> CreateEventHubIfNotExistsAsync(string path)
    content.vb: Public Function CreateEventHubIfNotExistsAsync(path As String) As Task(Of EventHubDescription)
    parameters:
    - id: path
      type: System.String
      description: The path of the event hub.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubDescription}
      description: The task that completes the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExistsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExistsAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExistsAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)
  id: CreateEventHubIfNotExistsAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateEventHubIfNotExistsAsync(EventHubDescription)
  nameWithType: NamespaceManager.CreateEventHubIfNotExistsAsync(EventHubDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExistsAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateEventHubIfNotExistsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 702
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously creates an Event Hub if it does not exist.
  example: []
  syntax:
    content: public Task<EventHubDescription> CreateEventHubIfNotExistsAsync(EventHubDescription description)
    content.vb: Public Function CreateEventHubIfNotExistsAsync(description As EventHubDescription) As Task(Of EventHubDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.EventHubDescription
      description: The event hub description.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubDescription}
      description: The task that completes the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExistsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateEventHub(Microsoft.ServiceBus.Messaging.EventHubDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.UpdateEventHub(Microsoft.ServiceBus.Messaging.EventHubDescription)
  id: UpdateEventHub(Microsoft.ServiceBus.Messaging.EventHubDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: UpdateEventHub(EventHubDescription)
  nameWithType: NamespaceManager.UpdateEventHub(EventHubDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateEventHub(Microsoft.ServiceBus.Messaging.EventHubDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: UpdateEventHub
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 712
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Updates an Event Hub.
  example: []
  syntax:
    content: public EventHubDescription UpdateEventHub(EventHubDescription description)
    content.vb: Public Function UpdateEventHub(description As EventHubDescription) As EventHubDescription
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.EventHubDescription
      description: An <xref href="Microsoft.ServiceBus.Messaging.EventHubDescription" data-throw-if-not-resolved="false"></xref> object containing the updated information.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubDescription
      description: Returns <xref href="Microsoft.ServiceBus.Messaging.EventHubDescription" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.UpdateEventHub*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateEventHubAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.UpdateEventHubAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)
  id: UpdateEventHubAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: UpdateEventHubAsync(EventHubDescription)
  nameWithType: NamespaceManager.UpdateEventHubAsync(EventHubDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateEventHubAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: UpdateEventHubAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 720
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously updates the event hub.
  example: []
  syntax:
    content: public Task<EventHubDescription> UpdateEventHubAsync(EventHubDescription description)
    content.vb: Public Function UpdateEventHubAsync(description As EventHubDescription) As Task(Of EventHubDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.EventHubDescription
      description: The event hub description.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubDescription}
      description: The task representing the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.UpdateEventHubAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteEventHub(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.DeleteEventHub(System.String)
  id: DeleteEventHub(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: DeleteEventHub(String)
  nameWithType: NamespaceManager.DeleteEventHub(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteEventHub(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: DeleteEventHub
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 729
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Deletes an Event Hub.
  example: []
  syntax:
    content: public void DeleteEventHub(string path)
    content.vb: Public Sub DeleteEventHub(path As String)
    parameters:
    - id: path
      type: System.String
      description: The path to the Event Hub.
  overload: Microsoft.ServiceBus.NamespaceManager.DeleteEventHub*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteEventHubAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.DeleteEventHubAsync(System.String)
  id: DeleteEventHubAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: DeleteEventHubAsync(String)
  nameWithType: NamespaceManager.DeleteEventHubAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteEventHubAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: DeleteEventHubAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 737
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously deletes an Event Hub.
  example: []
  syntax:
    content: public Task DeleteEventHubAsync(string path)
    content.vb: Public Function DeleteEventHubAsync(path As String) As Task
    parameters:
    - id: path
      type: System.String
      description: The path to the Event Hub.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.DeleteEventHubAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetEventHub(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetEventHub(System.String)
  id: GetEventHub(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetEventHub(String)
  nameWithType: NamespaceManager.GetEventHub(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetEventHub(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetEventHub
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 766
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Gets information about an Event Hub.
  example: []
  syntax:
    content: public EventHubDescription GetEventHub(string path)
    content.vb: Public Function GetEventHub(path As String) As EventHubDescription
    parameters:
    - id: path
      type: System.String
      description: The path to the Event Hub.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubDescription
      description: Returns an <xref href="Microsoft.ServiceBus.Messaging.EventHubDescription" data-throw-if-not-resolved="false"></xref> object that contains the Event Hub description.
  overload: Microsoft.ServiceBus.NamespaceManager.GetEventHub*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetEventHubAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetEventHubAsync(System.String)
  id: GetEventHubAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetEventHubAsync(String)
  nameWithType: NamespaceManager.GetEventHubAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetEventHubAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetEventHubAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 774
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously gets information about an Event Hub.
  example: []
  syntax:
    content: public Task<EventHubDescription> GetEventHubAsync(string path)
    content.vb: Public Function GetEventHubAsync(path As String) As Task(Of EventHubDescription)
    parameters:
    - id: path
      type: System.String
      description: The path to the Event Hub.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubDescription}
      description: The task representing the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetEventHubAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.EventHubExists(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.EventHubExists(System.String)
  id: EventHubExists(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: EventHubExists(String)
  nameWithType: NamespaceManager.EventHubExists(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.EventHubExists(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: EventHubExists
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 807
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Indicates whether or not an Event Hub exists.
  example: []
  syntax:
    content: public bool EventHubExists(string path)
    content.vb: Public Function EventHubExists(path As String) As Boolean
    parameters:
    - id: path
      type: System.String
      description: The path to the Event Hub.
    return:
      type: System.Boolean
      description: Returns true if the Event Hub exists; otherwise, false.
  overload: Microsoft.ServiceBus.NamespaceManager.EventHubExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.EventHubExistsAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.EventHubExistsAsync(System.String)
  id: EventHubExistsAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: EventHubExistsAsync(String)
  nameWithType: NamespaceManager.EventHubExistsAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.EventHubExistsAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: EventHubExistsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 815
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: 'Asynchronously determines whether the event hub exists from the service namespace. '
  example: []
  syntax:
    content: public Task<bool> EventHubExistsAsync(string path)
    content.vb: Public Function EventHubExistsAsync(path As String) As Task(Of Boolean)
    parameters:
    - id: path
      type: System.String
      description: The path of the event hub.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: The task representing the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.EventHubExistsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetEventHubs
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetEventHubs
  id: GetEventHubs
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetEventHubs()
  nameWithType: NamespaceManager.GetEventHubs()
  fullName: Microsoft.ServiceBus.NamespaceManager.GetEventHubs()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetEventHubs
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 851
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Gets a collection representing a set of Event Hubs.
  example: []
  syntax:
    content: public IEnumerable<EventHubDescription> GetEventHubs()
    content.vb: Public Function GetEventHubs As IEnumerable(Of EventHubDescription)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventHubDescription}
      description: Returns an <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> object representing the set of Event Hubs.
  overload: Microsoft.ServiceBus.NamespaceManager.GetEventHubs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetEventHubsAsync
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetEventHubsAsync
  id: GetEventHubsAsync
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetEventHubsAsync()
  nameWithType: NamespaceManager.GetEventHubsAsync()
  fullName: Microsoft.ServiceBus.NamespaceManager.GetEventHubsAsync()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetEventHubsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 858
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously gets a list of Event Hubs.
  example: []
  syntax:
    content: public Task<IEnumerable<EventHubDescription>> GetEventHubsAsync()
    content.vb: Public Function GetEventHubsAsync As Task(Of IEnumerable(Of EventHubDescription))
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventHubDescription}}
      description: The task representing the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetEventHubsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishers(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishers(System.String)
  id: GetRevokedPublishers(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetRevokedPublishers(String)
  nameWithType: NamespaceManager.GetRevokedPublishers(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishers(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetRevokedPublishers
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 887
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Returns all revoked publishers in an Event Hub.
  example: []
  syntax:
    content: public IEnumerable<RevokedPublisherDescription> GetRevokedPublishers(string entityPath)
    content.vb: Public Function GetRevokedPublishers(entityPath As String) As IEnumerable(Of RevokedPublisherDescription)
    parameters:
    - id: entityPath
      type: System.String
      description: Path to the Event Hub. See <xref href="Microsoft.ServiceBus.Messaging.EventHubDescription.Path" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RevokedPublisherDescription}
      description: Returns an <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> collection containing the revoked publishers.
  overload: Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishers*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishersAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishersAsync(System.String)
  id: GetRevokedPublishersAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetRevokedPublishersAsync(String)
  nameWithType: NamespaceManager.GetRevokedPublishersAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishersAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetRevokedPublishersAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 895
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronous version of <xref href="Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishers(System.String)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<IEnumerable<RevokedPublisherDescription>> GetRevokedPublishersAsync(string entityPath)
    content.vb: Public Function GetRevokedPublishersAsync(entityPath As String) As Task(Of IEnumerable(Of RevokedPublisherDescription))
    parameters:
    - id: entityPath
      type: System.String
      description: Path to the Event Hub. See <xref href="Microsoft.ServiceBus.Messaging.EventHubDescription.Path" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RevokedPublisherDescription}}
      description: Returns a <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> containing the revoked publishers.
  overload: Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishersAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.RevokePublisher(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.RevokePublisher(System.String,System.String)
  id: RevokePublisher(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: RevokePublisher(String, String)
  nameWithType: NamespaceManager.RevokePublisher(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.RevokePublisher(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: RevokePublisher
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 929
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Adds the publisher to the Event Hubs revocation list.
  example: []
  syntax:
    content: public RevokedPublisherDescription RevokePublisher(string entityPath, string publisher)
    content.vb: Public Function RevokePublisher(entityPath As String, publisher As String) As RevokedPublisherDescription
    parameters:
    - id: entityPath
      type: System.String
      description: "Event Hub path under which the publisher must be revoked. See \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubDescription\" data-throw-if-not-resolved=\"false\"></xref>."
    - id: publisher
      type: System.String
      description: The publisher to revoke.
    return:
      type: Microsoft.ServiceBus.Messaging.RevokedPublisherDescription
      description: Returns <xref href="Microsoft.ServiceBus.Messaging.RevokedPublisherDescription" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.RevokePublisher*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.RevokePublisherAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.RevokePublisherAsync(System.String,System.String)
  id: RevokePublisherAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: RevokePublisherAsync(String, String)
  nameWithType: NamespaceManager.RevokePublisherAsync(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.RevokePublisherAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: RevokePublisherAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 939
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronous version of <xref href="Microsoft.ServiceBus.NamespaceManager.RevokePublisher(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<RevokedPublisherDescription> RevokePublisherAsync(string entityPath, string publisher)
    content.vb: Public Function RevokePublisherAsync(entityPath As String, publisher As String) As Task(Of RevokedPublisherDescription)
    parameters:
    - id: entityPath
      type: System.String
      description: "Event Hub path under which the publisher must be revoked. See \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubDescription\" data-throw-if-not-resolved=\"false\"></xref>."
    - id: publisher
      type: System.String
      description: The publisher to revoke.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.RevokedPublisherDescription}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.RevokePublisherAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.RestorePublisher(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.RestorePublisher(System.String,System.String)
  id: RestorePublisher(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: RestorePublisher(String, String)
  nameWithType: NamespaceManager.RestorePublisher(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.RestorePublisher(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: RestorePublisher
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 950
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Removes the publisher from the Event Hubs revocation list.
  example: []
  syntax:
    content: public void RestorePublisher(string entityPath, string publisher)
    content.vb: Public Sub RestorePublisher(entityPath As String, publisher As String)
    parameters:
    - id: entityPath
      type: System.String
      description: "Event Hub path under which the publisher was revoked and must be restored. See \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubDescription\" data-throw-if-not-resolved=\"false\"></xref>."
    - id: publisher
      type: System.String
      description: The revoked publisher.
  overload: Microsoft.ServiceBus.NamespaceManager.RestorePublisher*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.RestorePublisherAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.RestorePublisherAsync(System.String,System.String)
  id: RestorePublisherAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: RestorePublisherAsync(String, String)
  nameWithType: NamespaceManager.RestorePublisherAsync(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.RestorePublisherAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: RestorePublisherAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 960
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronous version of <xref href="Microsoft.ServiceBus.NamespaceManager.RestorePublisher(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task RestorePublisherAsync(string entityPath, string publisher)
    content.vb: Public Function RestorePublisherAsync(entityPath As String, publisher As String) As Task
    parameters:
    - id: entityPath
      type: System.String
      description: "Event Hub path under which the publisher was revoked and must be restored. See \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubDescription\" data-throw-if-not-resolved=\"false\"></xref>."
    - id: publisher
      type: System.String
      description: The revoked publisher.
    return:
      type: System.Threading.Tasks.Task
      description: Returns <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.RestorePublisherAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateQueue(Microsoft.ServiceBus.Messaging.QueueDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.UpdateQueue(Microsoft.ServiceBus.Messaging.QueueDescription)
  id: UpdateQueue(Microsoft.ServiceBus.Messaging.QueueDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: UpdateQueue(QueueDescription)
  nameWithType: NamespaceManager.UpdateQueue(QueueDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateQueue(Microsoft.ServiceBus.Messaging.QueueDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: UpdateQueue
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1069
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Enables you to update the queue.
  example: []
  syntax:
    content: public QueueDescription UpdateQueue(QueueDescription description)
    content.vb: Public Function UpdateQueue(description As QueueDescription) As QueueDescription
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.QueueDescription
      description: A <xref href="Microsoft.ServiceBus.Messaging.QueueDescription" data-throw-if-not-resolved="false"></xref> object describing the queue to be updated.
    return:
      type: Microsoft.ServiceBus.Messaging.QueueDescription
      description: The <xref href="Microsoft.ServiceBus.Messaging.QueueDescription" data-throw-if-not-resolved="false"></xref> of the updated queue.
  overload: Microsoft.ServiceBus.NamespaceManager.UpdateQueue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateQueueAsync(Microsoft.ServiceBus.Messaging.QueueDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.UpdateQueueAsync(Microsoft.ServiceBus.Messaging.QueueDescription)
  id: UpdateQueueAsync(Microsoft.ServiceBus.Messaging.QueueDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: UpdateQueueAsync(QueueDescription)
  nameWithType: NamespaceManager.UpdateQueueAsync(QueueDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateQueueAsync(Microsoft.ServiceBus.Messaging.QueueDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: UpdateQueueAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1077
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously enables you to update the queue.
  example: []
  syntax:
    content: public Task<QueueDescription> UpdateQueueAsync(QueueDescription description)
    content.vb: Public Function UpdateQueueAsync(description As QueueDescription) As Task(Of QueueDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.QueueDescription
      description: A <xref href="Microsoft.ServiceBus.Messaging.QueueDescription" data-throw-if-not-resolved="false"></xref> object describing the queue to be updated.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.QueueDescription}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.UpdateQueueAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.RenameQueue(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.RenameQueue(System.String,System.String)
  id: RenameQueue(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: RenameQueue(String, String)
  nameWithType: NamespaceManager.RenameQueue(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.RenameQueue(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: RenameQueue
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1099
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Renames a queue inside a namespace.
  example: []
  syntax:
    content: public QueueDescription RenameQueue(string path, string newPath)
    content.vb: Public Function RenameQueue(path As String, newPath As String) As QueueDescription
    parameters:
    - id: path
      type: System.String
      description: The path to an existing queue.
    - id: newPath
      type: System.String
      description: The new path to the renamed queue.
    return:
      type: Microsoft.ServiceBus.Messaging.QueueDescription
      description: Returns <xref href="Microsoft.ServiceBus.Messaging.QueueDescription" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.RenameQueue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when <em>path</em> is null or empty.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the length of <em>path</em> is more than 290 characters.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown when the operation times out. The timeout period is initialized through the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> class. You can increase the value of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> property to avoid this exception if the timeout value is relatively low."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    description: "Thrown when the source queue \nwith the specified path does not exist."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    description: "Thrown when the target queue with \nthe same path exists within the same namespace."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown when the client does not have credentials to perform the operation.
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: Thrown when an internal error or unexpected exception occurs.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.RenameQueueAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.RenameQueueAsync(System.String,System.String)
  id: RenameQueueAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: RenameQueueAsync(String, String)
  nameWithType: NamespaceManager.RenameQueueAsync(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.RenameQueueAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: RenameQueueAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1119
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronous version of <xref href="Microsoft.ServiceBus.NamespaceManager.RenameQueue(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<QueueDescription> RenameQueueAsync(string path, string newPath)
    content.vb: Public Function RenameQueueAsync(path As String, newPath As String) As Task(Of QueueDescription)
    parameters:
    - id: path
      type: System.String
      description: The path to an existing queue.
    - id: newPath
      type: System.String
      description: The new path to the renamed queue.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.QueueDescription}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.RenameQueueAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when <em>path</em> is null or empty.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the length of <em>path</em> is more than 290 characters.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown when the operation times out. The timeout period is initialized through the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> class. You can increase the value of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> property to avoid this exception if the timeout value is relatively low."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    description: "Thrown when the source queue \nwith the specified path does not exist."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    description: "Thrown when the target queue with \nthe same path exists within the same namespace."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown when the client does not have credentials to perform the operation.
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: Thrown when an internal error or unexpected exception occurs.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteQueue(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.DeleteQueue(System.String)
  id: DeleteQueue(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: DeleteQueue(String)
  nameWithType: NamespaceManager.DeleteQueue(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteQueue(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: DeleteQueue
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1179
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Deletes the queue described by the path relative to the service namespace base address.
  example: []
  syntax:
    content: public void DeleteQueue(string path)
    content.vb: Public Sub DeleteQueue(path As String)
    parameters:
    - id: path
      type: System.String
      description: The path of the queue relative to the service namespace base address.
  overload: Microsoft.ServiceBus.NamespaceManager.DeleteQueue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>path</em> is empty or null, or <em>path</em> starts or ends with \"/\"."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The length of <em>path</em> is greater than \n<xref href=\"Microsoft.ServiceBus.Messaging.Constants.QueueNameMaximumLength\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "The operation times out. The timeout period is initialized through the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> class. You may need to increase the value of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> property to avoid this exception if the timeout value is relatively low."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    description: Queue does not exist under this path.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> object does not have sufficient permission to perform this operation. You should check to ensure that your \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> has the correct \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider\" data-throw-if-not-resolved=\"false\"></xref> credentials to perform this operation."
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: An internal error or unexpected exception occurs.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteQueueAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.DeleteQueueAsync(System.String)
  id: DeleteQueueAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: DeleteQueueAsync(String)
  nameWithType: NamespaceManager.DeleteQueueAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteQueueAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: DeleteQueueAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1187
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously deletes the queue described by the path relative to the service namespace base address.
  example: []
  syntax:
    content: public Task DeleteQueueAsync(string path)
    content.vb: Public Function DeleteQueueAsync(path As String) As Task
    parameters:
    - id: path
      type: System.String
      description: The path of the queue relative to the service namespace base address.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous delete queue operation.
  overload: Microsoft.ServiceBus.NamespaceManager.DeleteQueueAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetQueue(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetQueue(System.String)
  id: GetQueue(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetQueue(String)
  nameWithType: NamespaceManager.GetQueue(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetQueue(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetQueue
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1270
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Retrieves a queue from the service namespace.
  example: []
  syntax:
    content: public QueueDescription GetQueue(string path)
    content.vb: Public Function GetQueue(path As String) As QueueDescription
    parameters:
    - id: path
      type: System.String
      description: The path of the queue relative to the service namespace base address.
    return:
      type: Microsoft.ServiceBus.Messaging.QueueDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueDescription\" data-throw-if-not-resolved=\"false\"></xref> handle to the queue, or a \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> exception if the queue does not exist in the service namespace."
  overload: Microsoft.ServiceBus.NamespaceManager.GetQueue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>path</em> is empty or null, or <em>path</em> starts or ends with \"/\"."
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "The operation times out. The timeout period is initialized through the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> class. You may need to increase the value of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> property to avoid this exception if the timeout value is relatively low."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> object does not have sufficient permission to perform this operation. You should check to ensure that your \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> has the correct \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider\" data-throw-if-not-resolved=\"false\"></xref> credentials to perform this operation."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    description: The queue does not exist in the service namespace.
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: An internal error or unexpected exception occurs.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetQueueAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetQueueAsync(System.String)
  id: GetQueueAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetQueueAsync(String)
  nameWithType: NamespaceManager.GetQueueAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetQueueAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetQueueAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1278
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously retrieves a queue from the service namespace.
  example: []
  syntax:
    content: public Task<QueueDescription> GetQueueAsync(string path)
    content.vb: Public Function GetQueueAsync(path As String) As Task(Of QueueDescription)
    parameters:
    - id: path
      type: System.String
      description: The path of the queue relative to the service namespace base address.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.QueueDescription}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetQueueAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.QueueExists(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.QueueExists(System.String)
  id: QueueExists(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: QueueExists(String)
  nameWithType: NamespaceManager.QueueExists(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.QueueExists(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: QueueExists
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1311
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Determines whether a queue exists in the service namespace.
  example: []
  syntax:
    content: public bool QueueExists(string path)
    content.vb: Public Function QueueExists(path As String) As Boolean
    parameters:
    - id: path
      type: System.String
      description: The path of the queue relative to the service namespace base address.
    return:
      type: System.Boolean
      description: true if a queue exists in the service namespace; otherwise, false.
  overload: Microsoft.ServiceBus.NamespaceManager.QueueExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.QueueExistsAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.QueueExistsAsync(System.String)
  id: QueueExistsAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: QueueExistsAsync(String)
  nameWithType: NamespaceManager.QueueExistsAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.QueueExistsAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: QueueExistsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1319
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously determines whether a queue exists in the service namespace.
  example: []
  syntax:
    content: public Task<bool> QueueExistsAsync(string path)
    content.vb: Public Function QueueExistsAsync(path As String) As Task(Of Boolean)
    parameters:
    - id: path
      type: System.String
      description: The path of the queue relative to the service namespace base address.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.QueueExistsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetQueues
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetQueues
  id: GetQueues
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetQueues()
  nameWithType: NamespaceManager.GetQueues()
  fullName: Microsoft.ServiceBus.NamespaceManager.GetQueues()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetQueues
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1364
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Retrieves an enumerable collection of all queues in the service namespace.
  example: []
  syntax:
    content: public IEnumerable<QueueDescription> GetQueues()
    content.vb: Public Function GetQueues As IEnumerable(Of QueueDescription)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.QueueDescription}
      description: "An \n<xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> object that represents the collection of all queues in the service namespace or returns an empty collection if no queue exists. "
  overload: Microsoft.ServiceBus.NamespaceManager.GetQueues*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "The operation times out. The timeout period is initialized through the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> class. You may need to increase the value of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> property to avoid this exception if the timeout value is relatively low."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> object does not have sufficient permission to perform this operation. You should check to ensure that your \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> has the correct \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider\" data-throw-if-not-resolved=\"false\"></xref> credentials to perform this operation."
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: An internal error or unexpected exception occurs.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetQueues(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetQueues(System.String)
  id: GetQueues(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetQueues(String)
  nameWithType: NamespaceManager.GetQueues(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetQueues(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetQueues
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1374
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Retrieves an enumerable collection of all queues in the service namespace with the specified filter. You can filter by \na combination of entity name (including starts with), entity length (Gt or Lt), created, updated, and accessed time (Gt or Lt)."
  example: []
  syntax:
    content: public IEnumerable<QueueDescription> GetQueues(string filter)
    content.vb: Public Function GetQueues(filter As String) As IEnumerable(Of QueueDescription)
    parameters:
    - id: filter
      type: System.String
      description: A string used to filter the queues to be retrieved.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.QueueDescription}
      description: "An \n<xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> object that represents the collection of all queues in the service namespace or returns an empty collection if no queue exists."
  overload: Microsoft.ServiceBus.NamespaceManager.GetQueues*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetQueuesAsync
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetQueuesAsync
  id: GetQueuesAsync
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetQueuesAsync()
  nameWithType: NamespaceManager.GetQueuesAsync()
  fullName: Microsoft.ServiceBus.NamespaceManager.GetQueuesAsync()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetQueuesAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1381
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously retrieves an enumerable collection of all queues in the service namespace.
  example: []
  syntax:
    content: public Task<IEnumerable<QueueDescription>> GetQueuesAsync()
    content.vb: Public Function GetQueuesAsync As Task(Of IEnumerable(Of QueueDescription))
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.QueueDescription}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetQueuesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetQueuesAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetQueuesAsync(System.String)
  id: GetQueuesAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetQueuesAsync(String)
  nameWithType: NamespaceManager.GetQueuesAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetQueuesAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetQueuesAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1391
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously retrieves an enumerable collection of all queues in the service namespace with specified filter.
  example: []
  syntax:
    content: public Task<IEnumerable<QueueDescription>> GetQueuesAsync(string filter)
    content.vb: Public Function GetQueuesAsync(filter As String) As Task(Of IEnumerable(Of QueueDescription))
    parameters:
    - id: filter
      type: System.String
      description: The string used to filter the queues to be retrieved.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.QueueDescription}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetQueuesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateTopic(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateTopic(System.String)
  id: CreateTopic(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateTopic(String)
  nameWithType: NamespaceManager.CreateTopic(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateTopic(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateTopic
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1529
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates a new topic inside the service namespace with the given service namespace path.
  example: []
  syntax:
    content: public TopicDescription CreateTopic(string path)
    content.vb: Public Function CreateTopic(path As String) As TopicDescription
    parameters:
    - id: path
      type: System.String
      description: The path of the topic relative to the service namespace base address.
    return:
      type: Microsoft.ServiceBus.Messaging.TopicDescription
      description: The <xref href="Microsoft.ServiceBus.Messaging.TopicDescription" data-throw-if-not-resolved="false"></xref> of the newly created topic.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateTopic*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>path</em> is null or empty, or <em>path</em> begins or ends with “/”."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Length of <em>path</em> is greater than \n<xref href=\"Microsoft.ServiceBus.Messaging.Constants.QueueNameMaximumLength\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "The operation times out. The timeout period is initialized through the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> class. You may need to increase the value of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> property to avoid this exception if the timeout value is relatively low."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    description: "A queue or a topic with the \nsame name and path exists under the same service namespace."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> object does not have sufficient permission to perform this operation. You should check to ensure that your \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> has the correct \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider\" data-throw-if-not-resolved=\"false\"></xref> credentials to perform this operation."
  - type: Microsoft.ServiceBus.Messaging.QuotaExceededException
    commentId: T:Microsoft.ServiceBus.Messaging.QuotaExceededException
    description: "Either the specified size in the description is not supported or the maximum allowable quota has \nbeen reached. You must specify one of the supported size values, delete existing entities, or increase your quota size."
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: An internal error or unexpected exception occurs.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateTopic(Microsoft.ServiceBus.Messaging.TopicDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateTopic(Microsoft.ServiceBus.Messaging.TopicDescription)
  id: CreateTopic(Microsoft.ServiceBus.Messaging.TopicDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateTopic(TopicDescription)
  nameWithType: NamespaceManager.CreateTopic(TopicDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateTopic(Microsoft.ServiceBus.Messaging.TopicDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateTopic
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1538
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates a new topic inside the service namespace with the specified topic description.
  example: []
  syntax:
    content: public TopicDescription CreateTopic(TopicDescription description)
    content.vb: Public Function CreateTopic(description As TopicDescription) As TopicDescription
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.TopicDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.TopicDescription\" data-throw-if-not-resolved=\"false\"></xref> object describing the attributes with which the new topic will be created."
    return:
      type: Microsoft.ServiceBus.Messaging.TopicDescription
      description: The <xref href="Microsoft.ServiceBus.Messaging.TopicDescription" data-throw-if-not-resolved="false"></xref> of the newly created topic.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateTopic*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateTopicAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateTopicAsync(System.String)
  id: CreateTopicAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateTopicAsync(String)
  nameWithType: NamespaceManager.CreateTopicAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateTopicAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateTopicAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1546
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously creates a new topic inside the service namespace with the given service namespace path.
  example: []
  syntax:
    content: public Task<TopicDescription> CreateTopicAsync(string path)
    content.vb: Public Function CreateTopicAsync(path As String) As Task(Of TopicDescription)
    parameters:
    - id: path
      type: System.String
      description: The path of the topic relative to the service namespace base address.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.TopicDescription}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateTopicAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateTopicAsync(Microsoft.ServiceBus.Messaging.TopicDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateTopicAsync(Microsoft.ServiceBus.Messaging.TopicDescription)
  id: CreateTopicAsync(Microsoft.ServiceBus.Messaging.TopicDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateTopicAsync(TopicDescription)
  nameWithType: NamespaceManager.CreateTopicAsync(TopicDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateTopicAsync(Microsoft.ServiceBus.Messaging.TopicDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateTopicAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1557
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously creates a new topic inside the service namespace with the specified topic description.
  example: []
  syntax:
    content: public Task<TopicDescription> CreateTopicAsync(TopicDescription description)
    content.vb: Public Function CreateTopicAsync(description As TopicDescription) As Task(Of TopicDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.TopicDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.TopicDescription\" data-throw-if-not-resolved=\"false\"></xref> object describing the attributes with which the new topic will be created."
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.TopicDescription}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateTopicAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateTopic(Microsoft.ServiceBus.Messaging.TopicDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.UpdateTopic(Microsoft.ServiceBus.Messaging.TopicDescription)
  id: UpdateTopic(Microsoft.ServiceBus.Messaging.TopicDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: UpdateTopic(TopicDescription)
  nameWithType: NamespaceManager.UpdateTopic(TopicDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateTopic(Microsoft.ServiceBus.Messaging.TopicDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: UpdateTopic
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1567
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Enables you to update the topic.
  example: []
  syntax:
    content: public TopicDescription UpdateTopic(TopicDescription description)
    content.vb: Public Function UpdateTopic(description As TopicDescription) As TopicDescription
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.TopicDescription
      description: A <xref href="Microsoft.ServiceBus.Messaging.TopicDescription" data-throw-if-not-resolved="false"></xref> object describing the topic to be updated.
    return:
      type: Microsoft.ServiceBus.Messaging.TopicDescription
      description: The <xref href="Microsoft.ServiceBus.Messaging.TopicDescription" data-throw-if-not-resolved="false"></xref> of the updated topic.
  overload: Microsoft.ServiceBus.NamespaceManager.UpdateTopic*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateTopicAsync(Microsoft.ServiceBus.Messaging.TopicDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.UpdateTopicAsync(Microsoft.ServiceBus.Messaging.TopicDescription)
  id: UpdateTopicAsync(Microsoft.ServiceBus.Messaging.TopicDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: UpdateTopicAsync(TopicDescription)
  nameWithType: NamespaceManager.UpdateTopicAsync(TopicDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateTopicAsync(Microsoft.ServiceBus.Messaging.TopicDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: UpdateTopicAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1575
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously enables you to update the topic.
  example: []
  syntax:
    content: public Task<TopicDescription> UpdateTopicAsync(TopicDescription description)
    content.vb: Public Function UpdateTopicAsync(description As TopicDescription) As Task(Of TopicDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.TopicDescription
      description: A <xref href="Microsoft.ServiceBus.Messaging.TopicDescription" data-throw-if-not-resolved="false"></xref> object describing the topic to be updated.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.TopicDescription}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.UpdateTopicAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.RenameTopic(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.RenameTopic(System.String,System.String)
  id: RenameTopic(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: RenameTopic(String, String)
  nameWithType: NamespaceManager.RenameTopic(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.RenameTopic(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: RenameTopic
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1597
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Renames a topic inside a namespace.
  example: []
  syntax:
    content: public TopicDescription RenameTopic(string path, string newPath)
    content.vb: Public Function RenameTopic(path As String, newPath As String) As TopicDescription
    parameters:
    - id: path
      type: System.String
      description: The path to an existing topic.
    - id: newPath
      type: System.String
      description: The new path to the renamed topic.
    return:
      type: Microsoft.ServiceBus.Messaging.TopicDescription
      description: Returns <xref href="Microsoft.ServiceBus.Messaging.TopicDescription" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.RenameTopic*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when <em>path</em> is null or empty.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the length of <em>path</em> is more than 290 characters.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown when the operation times out. The timeout period is initialized through the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> class. You can increase the value of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> property to avoid this exception if the timeout value is relatively low."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    description: "Thrown when the source topic \nwith the specified path does not exist."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    description: "Thrown when the target topic with \nthe same path exists within the same namespace."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown when the client does not have credentials to perform the operation.
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: Thrown when an internal error or unexpected exception occurs.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.RenameTopicAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.RenameTopicAsync(System.String,System.String)
  id: RenameTopicAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: RenameTopicAsync(String, String)
  nameWithType: NamespaceManager.RenameTopicAsync(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.RenameTopicAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: RenameTopicAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1617
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronous version of <xref href="Microsoft.ServiceBus.NamespaceManager.RenameTopic(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<TopicDescription> RenameTopicAsync(string path, string newPath)
    content.vb: Public Function RenameTopicAsync(path As String, newPath As String) As Task(Of TopicDescription)
    parameters:
    - id: path
      type: System.String
      description: The path to an existing topic.
    - id: newPath
      type: System.String
      description: The new path to the renamed topic.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.TopicDescription}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.RenameTopicAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when <em>path</em> is null or empty.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the length of <em>path</em> is more than 290 characters.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown when the operation times out. The timeout period is initialized through the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> class. You can increase the value of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> property to avoid this exception if the timeout value is relatively low."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    description: "Thrown when the source topic \nwith the specified path does not exist."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    description: "Thrown when the target topic with \nthe same path exists within the same namespace."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown when the client does not have credentials to perform the operation.
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: Thrown when an internal error or unexpected exception occurs.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteTopic(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.DeleteTopic(System.String)
  id: DeleteTopic(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: DeleteTopic(String)
  nameWithType: NamespaceManager.DeleteTopic(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteTopic(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: DeleteTopic
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1630
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Deletes the topic described by path relative to the service namespace base address.
  example: []
  syntax:
    content: public void DeleteTopic(string path)
    content.vb: Public Sub DeleteTopic(path As String)
    parameters:
    - id: path
      type: System.String
      description: The path of the topic relative to the service namespace base address.
  overload: Microsoft.ServiceBus.NamespaceManager.DeleteTopic*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>path</em> is null or empty, or <em>path</em> starts or ends with \"/\"."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteTopicAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.DeleteTopicAsync(System.String)
  id: DeleteTopicAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: DeleteTopicAsync(String)
  nameWithType: NamespaceManager.DeleteTopicAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteTopicAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: DeleteTopicAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1638
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously deletes the topic described by path relative to the service namespace base address.
  example: []
  syntax:
    content: public Task DeleteTopicAsync(string path)
    content.vb: Public Function DeleteTopicAsync(path As String) As Task
    parameters:
    - id: path
      type: System.String
      description: The path of the topic relative to the service namespace base address.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous deleted topic operation.
  overload: Microsoft.ServiceBus.NamespaceManager.DeleteTopicAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetTopic(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetTopic(System.String)
  id: GetTopic(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetTopic(String)
  nameWithType: NamespaceManager.GetTopic(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetTopic(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetTopic
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1723
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Retrieves the topic from the service namespace.
  example: []
  syntax:
    content: public TopicDescription GetTopic(string path)
    content.vb: Public Function GetTopic(path As String) As TopicDescription
    parameters:
    - id: path
      type: System.String
      description: The path of the topic relative to the service namespace base address.
    return:
      type: Microsoft.ServiceBus.Messaging.TopicDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.TopicDescription\" data-throw-if-not-resolved=\"false\"></xref> reference to the topic, or a \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> exception if the topic does not exist in the service namespace."
  overload: Microsoft.ServiceBus.NamespaceManager.GetTopic*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>path</em> is empty or null."
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "The operation times out. The timeout period is initialized through the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> class. You may need to increase the value of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> property to avoid this exception if the timeout value is relatively low."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> object does not have sufficient permission to perform this operation. You should check to ensure that your \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> has the correct \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider\" data-throw-if-not-resolved=\"false\"></xref> credentials to perform this operation."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    description: The topic does not exist in the service namespace.
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: An internal error or unexpected exception occurs.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetTopicAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetTopicAsync(System.String)
  id: GetTopicAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetTopicAsync(String)
  nameWithType: NamespaceManager.GetTopicAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetTopicAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetTopicAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1731
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously retrieves the topic from the service namespace.
  example: []
  syntax:
    content: public Task<TopicDescription> GetTopicAsync(string path)
    content.vb: Public Function GetTopicAsync(path As String) As Task(Of TopicDescription)
    parameters:
    - id: path
      type: System.String
      description: The path of the topic relative to the service namespace base address.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.TopicDescription}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetTopicAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.TopicExists(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.TopicExists(System.String)
  id: TopicExists(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: TopicExists(String)
  nameWithType: NamespaceManager.TopicExists(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.TopicExists(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: TopicExists
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1764
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Determines whether a topic exists in the service namespace.
  example: []
  syntax:
    content: public bool TopicExists(string path)
    content.vb: Public Function TopicExists(path As String) As Boolean
    parameters:
    - id: path
      type: System.String
      description: The path of the topic relative to the service namespace base address.
    return:
      type: System.Boolean
      description: true if a topic exists in the service namespace; otherwise, false.
  overload: Microsoft.ServiceBus.NamespaceManager.TopicExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.TopicExistsAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.TopicExistsAsync(System.String)
  id: TopicExistsAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: TopicExistsAsync(String)
  nameWithType: NamespaceManager.TopicExistsAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.TopicExistsAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: TopicExistsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1772
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously determines whether a topic exists in the service namespace.
  example: []
  syntax:
    content: public Task<bool> TopicExistsAsync(string path)
    content.vb: Public Function TopicExistsAsync(path As String) As Task(Of Boolean)
    parameters:
    - id: path
      type: System.String
      description: The path of the topic relative to the service namespace base address.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.TopicExistsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetTopics
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetTopics
  id: GetTopics
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetTopics()
  nameWithType: NamespaceManager.GetTopics()
  fullName: Microsoft.ServiceBus.NamespaceManager.GetTopics()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetTopics
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1817
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Retrieves a collection of topics in a service namespace.
  example: []
  syntax:
    content: public IEnumerable<TopicDescription> GetTopics()
    content.vb: Public Function GetTopics As IEnumerable(Of TopicDescription)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.TopicDescription}
      description: "An \n<xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> object that represents the collection of topics under the current namespace, or returns an empty collection if no topic exists."
  overload: Microsoft.ServiceBus.NamespaceManager.GetTopics*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "The operation times out. The timeout period is initialized through the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings\" data-throw-if-not-resolved=\"false\"></xref> class. You may need to increase the value of the \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> property to avoid this exception if the timeout value is relatively low."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> object does not have sufficient permission to perform this operation. You should check to ensure that your \n<xref href=\"Microsoft.ServiceBus.NamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> has the correct \n<xref href=\"Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider\" data-throw-if-not-resolved=\"false\"></xref> credentials to perform this operation."
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: An internal error or unexpected exception occurs.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetTopics(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetTopics(System.String)
  id: GetTopics(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetTopics(String)
  nameWithType: NamespaceManager.GetTopics(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetTopics(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetTopics
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1827
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Retrieves a collection of topics in a service namespace with the specified filter. You can filter by a \ncombination of entity name (including starts with), entity length (Gt or Lt), created, updated, and accessed time (Gt or Lt)."
  example: []
  syntax:
    content: public IEnumerable<TopicDescription> GetTopics(string filter)
    content.vb: Public Function GetTopics(filter As String) As IEnumerable(Of TopicDescription)
    parameters:
    - id: filter
      type: System.String
      description: The string used to filter the topics to be retrieved.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.TopicDescription}
      description: "An \n<xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> object that represents the collection of topics under the current namespace, or returns an empty collection if no topic exists."
  overload: Microsoft.ServiceBus.NamespaceManager.GetTopics*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetTopicsAsync
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetTopicsAsync
  id: GetTopicsAsync
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetTopicsAsync()
  nameWithType: NamespaceManager.GetTopicsAsync()
  fullName: Microsoft.ServiceBus.NamespaceManager.GetTopicsAsync()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetTopicsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1834
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously retrieves a collection of topics in a service namespace.
  example: []
  syntax:
    content: public Task<IEnumerable<TopicDescription>> GetTopicsAsync()
    content.vb: Public Function GetTopicsAsync As Task(Of IEnumerable(Of TopicDescription))
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.TopicDescription}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetTopicsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetTopicsAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetTopicsAsync(System.String)
  id: GetTopicsAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetTopicsAsync(String)
  nameWithType: NamespaceManager.GetTopicsAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetTopicsAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetTopicsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1844
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously retrieves a collection of topics in a service namespace.
  example: []
  syntax:
    content: public Task<IEnumerable<TopicDescription>> GetTopicsAsync(string filter)
    content.vb: Public Function GetTopicsAsync(filter As String) As Task(Of IEnumerable(Of TopicDescription))
    parameters:
    - id: filter
      type: System.String
      description: The string used to filter the topics to be retrieved.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.TopicDescription}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetTopicsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(System.String,System.String)
  id: CreateConsumerGroup(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateConsumerGroup(String, String)
  nameWithType: NamespaceManager.CreateConsumerGroup(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateConsumerGroup
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1888
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Creates an Event Hubs consumer group using default values, with \nthe specified Event Hubs path and a name for the consumer group."
  example: []
  syntax:
    content: public ConsumerGroupDescription CreateConsumerGroup(string eventHubPath, string name)
    content.vb: Public Function CreateConsumerGroup(eventHubPath As String, name As String) As ConsumerGroupDescription
    parameters:
    - id: eventHubPath
      type: System.String
      description: The path to the Event Hub.
    - id: name
      type: System.String
      description: The name of the consumer group.
    return:
      type: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
      description: Returns <xref href="Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  id: CreateConsumerGroup(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateConsumerGroup(ConsumerGroupDescription)
  nameWithType: NamespaceManager.CreateConsumerGroup(ConsumerGroupDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateConsumerGroup
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1897
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Creates an Event Hubs consumer group using the specified \n<xref href=\"Microsoft.ServiceBus.Messaging.ConsumerGroupDescription\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public ConsumerGroupDescription CreateConsumerGroup(ConsumerGroupDescription description)
    content.vb: Public Function CreateConsumerGroup(description As ConsumerGroupDescription) As ConsumerGroupDescription
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
      description: The <xref href="Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
      description: Returns <xref href="Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupAsync(System.String,System.String)
  id: CreateConsumerGroupAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateConsumerGroupAsync(String, String)
  nameWithType: NamespaceManager.CreateConsumerGroupAsync(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateConsumerGroupAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1906
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronous version of <xref href="Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<ConsumerGroupDescription> CreateConsumerGroupAsync(string eventHubPath, string name)
    content.vb: Public Function CreateConsumerGroupAsync(eventHubPath As String, name As String) As Task(Of ConsumerGroupDescription)
    parameters:
    - id: eventHubPath
      type: System.String
      description: The path to the Event Hub.
    - id: name
      type: System.String
      description: The name of the consumer group.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.ConsumerGroupDescription}
      description: The task that completes the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  id: CreateConsumerGroupAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateConsumerGroupAsync(ConsumerGroupDescription)
  nameWithType: NamespaceManager.CreateConsumerGroupAsync(ConsumerGroupDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateConsumerGroupAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1917
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Asynchronous version of \n<xref href=\"Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public Task<ConsumerGroupDescription> CreateConsumerGroupAsync(ConsumerGroupDescription description)
    content.vb: Public Function CreateConsumerGroupAsync(description As ConsumerGroupDescription) As Task(Of ConsumerGroupDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
      description: The <xref href="Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.ConsumerGroupDescription}
      description: The task that completes the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(System.String,System.String)
  id: CreateConsumerGroupIfNotExists(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateConsumerGroupIfNotExists(String, String)
  nameWithType: NamespaceManager.CreateConsumerGroupIfNotExists(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateConsumerGroupIfNotExists
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1931
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Creates a consumer group if it does not already exist, using the specified Event Hubs path and group name. If the group already exists, then return the stored \n<xref href=\"Microsoft.ServiceBus.Messaging.ConsumerGroupDescription\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public ConsumerGroupDescription CreateConsumerGroupIfNotExists(string eventHubPath, string name)
    content.vb: Public Function CreateConsumerGroupIfNotExists(eventHubPath As String, name As String) As ConsumerGroupDescription
    parameters:
    - id: eventHubPath
      type: System.String
      description: Path to the Event Hub.
    - id: name
      type: System.String
      description: The name of the consumer group to create.
    return:
      type: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
      description: "Returns the newly-created \n<xref href=\"Microsoft.ServiceBus.Messaging.ConsumerGroupDescription\" data-throw-if-not-resolved=\"false\"></xref>. If the consumer group already exists, returns the existing \n<xref href=\"Microsoft.ServiceBus.Messaging.ConsumerGroupDescription\" data-throw-if-not-resolved=\"false\"></xref>."
  overload: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  id: CreateConsumerGroupIfNotExists(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateConsumerGroupIfNotExists(ConsumerGroupDescription)
  nameWithType: NamespaceManager.CreateConsumerGroupIfNotExists(ConsumerGroupDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateConsumerGroupIfNotExists
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1943
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Creates a consumer group if it does not already exist, using the specified \n<xref href=\"Microsoft.ServiceBus.Messaging.ConsumerGroupDescription\" data-throw-if-not-resolved=\"false\"></xref> as metadata. If the group already exists, then return the stored \n<xref href=\"Microsoft.ServiceBus.Messaging.ConsumerGroupDescription\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public ConsumerGroupDescription CreateConsumerGroupIfNotExists(ConsumerGroupDescription description)
    content.vb: Public Function CreateConsumerGroupIfNotExists(description As ConsumerGroupDescription) As ConsumerGroupDescription
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
      description: A <xref href="Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" data-throw-if-not-resolved="false"></xref> object.
    return:
      type: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
      description: "Returns the newly-created \n<xref href=\"Microsoft.ServiceBus.Messaging.ConsumerGroupDescription\" data-throw-if-not-resolved=\"false\"></xref>. If the consumer group already exists, returns the existing \n<xref href=\"Microsoft.ServiceBus.Messaging.ConsumerGroupDescription\" data-throw-if-not-resolved=\"false\"></xref>."
  overload: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExistsAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExistsAsync(System.String,System.String)
  id: CreateConsumerGroupIfNotExistsAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateConsumerGroupIfNotExistsAsync(String, String)
  nameWithType: NamespaceManager.CreateConsumerGroupIfNotExistsAsync(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExistsAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateConsumerGroupIfNotExistsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1953
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Asynchronous version of \n<xref href=\"Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(System.String%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public Task<ConsumerGroupDescription> CreateConsumerGroupIfNotExistsAsync(string eventHubPath, string name)
    content.vb: Public Function CreateConsumerGroupIfNotExistsAsync(eventHubPath As String, name As String) As Task(Of ConsumerGroupDescription)
    parameters:
    - id: eventHubPath
      type: System.String
      description: The path to the Event Hub.
    - id: name
      type: System.String
      description: The name of the consumer group.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.ConsumerGroupDescription}
      description: The task that completes the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExistsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExistsAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExistsAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  id: CreateConsumerGroupIfNotExistsAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateConsumerGroupIfNotExistsAsync(ConsumerGroupDescription)
  nameWithType: NamespaceManager.CreateConsumerGroupIfNotExistsAsync(ConsumerGroupDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExistsAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateConsumerGroupIfNotExistsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1964
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Asynchronous version of \n<xref href=\"Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public Task<ConsumerGroupDescription> CreateConsumerGroupIfNotExistsAsync(ConsumerGroupDescription description)
    content.vb: Public Function CreateConsumerGroupIfNotExistsAsync(description As ConsumerGroupDescription) As Task(Of ConsumerGroupDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
      description: The consumer group description.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.ConsumerGroupDescription}
      description: The task that completes the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExistsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroup(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroup(System.String,System.String)
  id: DeleteConsumerGroup(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: DeleteConsumerGroup(String, String)
  nameWithType: NamespaceManager.DeleteConsumerGroup(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroup(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: DeleteConsumerGroup
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1974
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Deletes a consumer group.
  example: []
  syntax:
    content: public void DeleteConsumerGroup(string eventHubPath, string name)
    content.vb: Public Sub DeleteConsumerGroup(eventHubPath As String, name As String)
    parameters:
    - id: eventHubPath
      type: System.String
      description: The path to the Event Hub.
    - id: name
      type: System.String
      description: The name of the consumer group to delete.
  overload: Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroup*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroupAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroupAsync(System.String,System.String)
  id: DeleteConsumerGroupAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: DeleteConsumerGroupAsync(String, String)
  nameWithType: NamespaceManager.DeleteConsumerGroupAsync(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroupAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: DeleteConsumerGroupAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 1983
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously deletes a consumer group.
  example: []
  syntax:
    content: public Task DeleteConsumerGroupAsync(string eventHubPath, string name)
    content.vb: Public Function DeleteConsumerGroupAsync(eventHubPath As String, name As String) As Task
    parameters:
    - id: eventHubPath
      type: System.String
      description: The path to the Event Hub.
    - id: name
      type: System.String
      description: The name of the consumer group to delete.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroupAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroup(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetConsumerGroup(System.String,System.String)
  id: GetConsumerGroup(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetConsumerGroup(String, String)
  nameWithType: NamespaceManager.GetConsumerGroup(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroup(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetConsumerGroup
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2015
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Gets an Event Hubs consumer group.
  example: []
  syntax:
    content: public ConsumerGroupDescription GetConsumerGroup(string eventHubPath, string name)
    content.vb: Public Function GetConsumerGroup(eventHubPath As String, name As String) As ConsumerGroupDescription
    parameters:
    - id: eventHubPath
      type: System.String
      description: The path to the Event Hub.
    - id: name
      type: System.String
      description: The name of the consumer group.
    return:
      type: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
      description: Returns <xref href="Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroup*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupAsync(System.String,System.String)
  id: GetConsumerGroupAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetConsumerGroupAsync(String, String)
  nameWithType: NamespaceManager.GetConsumerGroupAsync(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetConsumerGroupAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2024
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously gets a consumer group.
  example: []
  syntax:
    content: public Task<ConsumerGroupDescription> GetConsumerGroupAsync(string eventHubPath, string name)
    content.vb: Public Function GetConsumerGroupAsync(eventHubPath As String, name As String) As Task(Of ConsumerGroupDescription)
    parameters:
    - id: eventHubPath
      type: System.String
      description: The path to the Event Hub.
    - id: name
      type: System.String
      description: The name of the consumer group.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.ConsumerGroupDescription}
      description: The task representing the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroups(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetConsumerGroups(System.String)
  id: GetConsumerGroups(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetConsumerGroups(String)
  nameWithType: NamespaceManager.GetConsumerGroups(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroups(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetConsumerGroups
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2059
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Gets a collection representing a set of consumer groups.
  example: []
  syntax:
    content: public IEnumerable<ConsumerGroupDescription> GetConsumerGroups(string eventHubPath)
    content.vb: Public Function GetConsumerGroups(eventHubPath As String) As IEnumerable(Of ConsumerGroupDescription)
    parameters:
    - id: eventHubPath
      type: System.String
      description: The path to the Event Hub.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.ConsumerGroupDescription}
      description: Returns an <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> object representing the set of consumer groups.
  overload: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroups*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupsAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupsAsync(System.String)
  id: GetConsumerGroupsAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetConsumerGroupsAsync(String)
  nameWithType: NamespaceManager.GetConsumerGroupsAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupsAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetConsumerGroupsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2067
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously gets a set of consumer groups.
  example: []
  syntax:
    content: public Task<IEnumerable<ConsumerGroupDescription>> GetConsumerGroupsAsync(string eventHubPath)
    content.vb: Public Function GetConsumerGroupsAsync(eventHubPath As String) As Task(Of IEnumerable(Of ConsumerGroupDescription))
    parameters:
    - id: eventHubPath
      type: System.String
      description: The path to the Event Hub.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.ConsumerGroupDescription}}
      description: The task representing the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroup(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroup(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  id: UpdateConsumerGroup(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: UpdateConsumerGroup(ConsumerGroupDescription)
  nameWithType: NamespaceManager.UpdateConsumerGroup(ConsumerGroupDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroup(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: UpdateConsumerGroup
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2099
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Updates an Event Hubs consumer group.
  example: []
  syntax:
    content: public ConsumerGroupDescription UpdateConsumerGroup(ConsumerGroupDescription description)
    content.vb: Public Function UpdateConsumerGroup(description As ConsumerGroupDescription) As ConsumerGroupDescription
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.ConsumerGroupDescription\" data-throw-if-not-resolved=\"false\"></xref> object containing the updated information."
    return:
      type: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
      description: Returns <xref href="Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroup*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroupAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroupAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  id: UpdateConsumerGroupAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: UpdateConsumerGroupAsync(ConsumerGroupDescription)
  nameWithType: NamespaceManager.UpdateConsumerGroupAsync(ConsumerGroupDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroupAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: UpdateConsumerGroupAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2107
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously updates the consumer group.
  example: []
  syntax:
    content: public Task<ConsumerGroupDescription> UpdateConsumerGroupAsync(ConsumerGroupDescription description)
    content.vb: Public Function UpdateConsumerGroupAsync(description As ConsumerGroupDescription) As Task(Of ConsumerGroupDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
      description: The consumer group description.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.ConsumerGroupDescription}
      description: The task representing the asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroupAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String)
  id: CreateSubscription(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateSubscription(String, String)
  nameWithType: NamespaceManager.CreateSubscription(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateSubscription
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2118
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates a new subscription in the service namespace with the specified topic path and subscription name.
  example: []
  syntax:
    content: public SubscriptionDescription CreateSubscription(string topicPath, string name)
    content.vb: Public Function CreateSubscription(topicPath As String, name As String) As SubscriptionDescription
    parameters:
    - id: topicPath
      type: System.String
      description: The topic path relative to the service namespace base address.
    - id: name
      type: System.String
      description: The name of the subscription.
    return:
      type: Microsoft.ServiceBus.Messaging.SubscriptionDescription
      description: The <xref href="Microsoft.ServiceBus.Messaging.SubscriptionDescription" data-throw-if-not-resolved="false"></xref> of the newly created subscription.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateSubscription*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String,Microsoft.ServiceBus.Messaging.Filter)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String,Microsoft.ServiceBus.Messaging.Filter)
  id: CreateSubscription(System.String,System.String,Microsoft.ServiceBus.Messaging.Filter)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateSubscription(String, String, Filter)
  nameWithType: NamespaceManager.CreateSubscription(String, String, Filter)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String, System.String, Microsoft.ServiceBus.Messaging.Filter)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateSubscription
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2128
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates a new subscription in the service namespace with the specified topic path, subscription name, and filter expression.
  example: []
  syntax:
    content: public SubscriptionDescription CreateSubscription(string topicPath, string name, Filter filter)
    content.vb: Public Function CreateSubscription(topicPath As String, name As String, filter As Filter) As SubscriptionDescription
    parameters:
    - id: topicPath
      type: System.String
      description: The topic path relative to the service namespace base address.
    - id: name
      type: System.String
      description: The name of the subscription.
    - id: filter
      type: Microsoft.ServiceBus.Messaging.Filter
      description: The filter expression used to capture messages satisfying the filtering expression value.
    return:
      type: Microsoft.ServiceBus.Messaging.SubscriptionDescription
      description: The <xref href="Microsoft.ServiceBus.Messaging.SubscriptionDescription" data-throw-if-not-resolved="false"></xref> of the newly created subscription.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateSubscription*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  id: CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateSubscription(SubscriptionDescription)
  nameWithType: NamespaceManager.CreateSubscription(SubscriptionDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateSubscription
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2137
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates a new subscription in the service namespace with the specified subscription description.
  example: []
  syntax:
    content: public SubscriptionDescription CreateSubscription(SubscriptionDescription description)
    content.vb: Public Function CreateSubscription(description As SubscriptionDescription) As SubscriptionDescription
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.SubscriptionDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription\" data-throw-if-not-resolved=\"false\"></xref> object describing the attributes with which the new subscription will be created."
    return:
      type: Microsoft.ServiceBus.Messaging.SubscriptionDescription
      description: The <xref href="Microsoft.ServiceBus.Messaging.SubscriptionDescription" data-throw-if-not-resolved="false"></xref> of the newly created subscription.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateSubscription*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.Filter)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.Filter)
  id: CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.Filter)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateSubscription(SubscriptionDescription, Filter)
  nameWithType: NamespaceManager.CreateSubscription(SubscriptionDescription, Filter)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription, Microsoft.ServiceBus.Messaging.Filter)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateSubscription
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2147
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates a new subscription in the service namespace with the specified subscription description and filter expression.
  example: []
  syntax:
    content: public SubscriptionDescription CreateSubscription(SubscriptionDescription description, Filter filter)
    content.vb: Public Function CreateSubscription(description As SubscriptionDescription, filter As Filter) As SubscriptionDescription
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.SubscriptionDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription\" data-throw-if-not-resolved=\"false\"></xref> object describing the attributes with which the new subscription will be created."
    - id: filter
      type: Microsoft.ServiceBus.Messaging.Filter
      description: The filter expression used to capture messages satisfying the filtering expression value.
    return:
      type: Microsoft.ServiceBus.Messaging.SubscriptionDescription
      description: The <xref href="Microsoft.ServiceBus.Messaging.SubscriptionDescription" data-throw-if-not-resolved="false"></xref> of the newly created subscription.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateSubscription*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String,Microsoft.ServiceBus.Messaging.RuleDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String,Microsoft.ServiceBus.Messaging.RuleDescription)
  id: CreateSubscription(System.String,System.String,Microsoft.ServiceBus.Messaging.RuleDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateSubscription(String, String, RuleDescription)
  nameWithType: NamespaceManager.CreateSubscription(String, String, RuleDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String, System.String, Microsoft.ServiceBus.Messaging.RuleDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateSubscription
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2158
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates a new subscription in the service namespace with the specified topic path, subscription name, and rule description.
  example: []
  syntax:
    content: public SubscriptionDescription CreateSubscription(string topicPath, string name, RuleDescription ruleDescription)
    content.vb: Public Function CreateSubscription(topicPath As String, name As String, ruleDescription As RuleDescription) As SubscriptionDescription
    parameters:
    - id: topicPath
      type: System.String
      description: The topic path relative to the service namespace base address.
    - id: name
      type: System.String
      description: The name of the subscription.
    - id: ruleDescription
      type: Microsoft.ServiceBus.Messaging.RuleDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.RuleDescription\" data-throw-if-not-resolved=\"false\"></xref> object describing the attributes with which the messages are matched and acted upon."
    return:
      type: Microsoft.ServiceBus.Messaging.SubscriptionDescription
      description: The <xref href="Microsoft.ServiceBus.Messaging.SubscriptionDescription" data-throw-if-not-resolved="false"></xref> of the newly created subscription.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateSubscription*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.RuleDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.RuleDescription)
  id: CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.RuleDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateSubscription(SubscriptionDescription, RuleDescription)
  nameWithType: NamespaceManager.CreateSubscription(SubscriptionDescription, RuleDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription, Microsoft.ServiceBus.Messaging.RuleDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateSubscription
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2169
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Creates a new subscription in the service namespace with the specified subscription description and rule description.
  example: []
  syntax:
    content: public SubscriptionDescription CreateSubscription(SubscriptionDescription description, RuleDescription ruleDescription)
    content.vb: Public Function CreateSubscription(description As SubscriptionDescription, ruleDescription As RuleDescription) As SubscriptionDescription
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.SubscriptionDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription\" data-throw-if-not-resolved=\"false\"></xref> object describing the attributes with which the new subscription will be created."
    - id: ruleDescription
      type: Microsoft.ServiceBus.Messaging.RuleDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.RuleDescription\" data-throw-if-not-resolved=\"false\"></xref> object describing the attributes with which the messages are matched and acted upon."
    return:
      type: Microsoft.ServiceBus.Messaging.SubscriptionDescription
      description: The <xref href="Microsoft.ServiceBus.Messaging.SubscriptionDescription" data-throw-if-not-resolved="false"></xref> of the newly created subscription.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateSubscription*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(System.String,System.String)
  id: CreateSubscriptionAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateSubscriptionAsync(String, String)
  nameWithType: NamespaceManager.CreateSubscriptionAsync(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateSubscriptionAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2178
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously creates a new subscription in the service namespace with the specified topic path and subscription name.
  example: []
  syntax:
    content: public Task<SubscriptionDescription> CreateSubscriptionAsync(string topicPath, string name)
    content.vb: Public Function CreateSubscriptionAsync(topicPath As String, name As String) As Task(Of SubscriptionDescription)
    parameters:
    - id: topicPath
      type: System.String
      description: The topic path relative to the service namespace base address.
    - id: name
      type: System.String
      description: The name of the subscription.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.SubscriptionDescription}
      description: The asynchronously created subscription.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(System.String,System.String,Microsoft.ServiceBus.Messaging.Filter)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(System.String,System.String,Microsoft.ServiceBus.Messaging.Filter)
  id: CreateSubscriptionAsync(System.String,System.String,Microsoft.ServiceBus.Messaging.Filter)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateSubscriptionAsync(String, String, Filter)
  nameWithType: NamespaceManager.CreateSubscriptionAsync(String, String, Filter)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(System.String, System.String, Microsoft.ServiceBus.Messaging.Filter)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateSubscriptionAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2193
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Asynchronously creates a new subscription in the service namespace \nwith the specified topic path, subscription name, and filter expression."
  example: []
  syntax:
    content: public Task<SubscriptionDescription> CreateSubscriptionAsync(string topicPath, string name, Filter filter)
    content.vb: Public Function CreateSubscriptionAsync(topicPath As String, name As String, filter As Filter) As Task(Of SubscriptionDescription)
    parameters:
    - id: topicPath
      type: System.String
      description: The topic path relative to the service namespace base address.
    - id: name
      type: System.String
      description: The name of the subscription.
    - id: filter
      type: Microsoft.ServiceBus.Messaging.Filter
      description: The filter expression used to capture messages satisfying the filtering expression value.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.SubscriptionDescription}
      description: The asynchronously created subscription.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(System.String,System.String,Microsoft.ServiceBus.Messaging.RuleDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(System.String,System.String,Microsoft.ServiceBus.Messaging.RuleDescription)
  id: CreateSubscriptionAsync(System.String,System.String,Microsoft.ServiceBus.Messaging.RuleDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateSubscriptionAsync(String, String, RuleDescription)
  nameWithType: NamespaceManager.CreateSubscriptionAsync(String, String, RuleDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(System.String, System.String, Microsoft.ServiceBus.Messaging.RuleDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateSubscriptionAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2210
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Asynchronously creates a new subscription in the service namespace \nwith the specified topic path, subscription name, and rule description."
  example: []
  syntax:
    content: public Task<SubscriptionDescription> CreateSubscriptionAsync(string topicPath, string name, RuleDescription ruleDescription)
    content.vb: Public Function CreateSubscriptionAsync(topicPath As String, name As String, ruleDescription As RuleDescription) As Task(Of SubscriptionDescription)
    parameters:
    - id: topicPath
      type: System.String
      description: The topic path relative to the service namespace base address.
    - id: name
      type: System.String
      description: The name of the subscription.
    - id: ruleDescription
      type: Microsoft.ServiceBus.Messaging.RuleDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.RuleDescription\" data-throw-if-not-resolved=\"false\"></xref> object describing the attributes with which the messages are matched and acted upon."
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.SubscriptionDescription}
      description: The asynchronously created subscription.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  id: CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateSubscriptionAsync(SubscriptionDescription)
  nameWithType: NamespaceManager.CreateSubscriptionAsync(SubscriptionDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateSubscriptionAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2224
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously creates a new subscription in the service namespace with the specified subscription description.
  example: []
  syntax:
    content: public Task<SubscriptionDescription> CreateSubscriptionAsync(SubscriptionDescription description)
    content.vb: Public Function CreateSubscriptionAsync(description As SubscriptionDescription) As Task(Of SubscriptionDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.SubscriptionDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription\" data-throw-if-not-resolved=\"false\"></xref> object describing the attributes with which the new subscription will be created."
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.SubscriptionDescription}
      description: The asynchronously created subscription.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.Filter)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.Filter)
  id: CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.Filter)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateSubscriptionAsync(SubscriptionDescription, Filter)
  nameWithType: NamespaceManager.CreateSubscriptionAsync(SubscriptionDescription, Filter)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription, Microsoft.ServiceBus.Messaging.Filter)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateSubscriptionAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2240
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Asynchronously creates a new subscription in the service \nnamespace with the specified subscription description and filter expression."
  example: []
  syntax:
    content: public Task<SubscriptionDescription> CreateSubscriptionAsync(SubscriptionDescription description, Filter filter)
    content.vb: Public Function CreateSubscriptionAsync(description As SubscriptionDescription, filter As Filter) As Task(Of SubscriptionDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.SubscriptionDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription\" data-throw-if-not-resolved=\"false\"></xref> object describing the attributes with which the new subscription will be created."
    - id: filter
      type: Microsoft.ServiceBus.Messaging.Filter
      description: The filter expression used to capture messages satisfying the filtering expression value.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.SubscriptionDescription}
      description: The asynchronously created subscription.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.RuleDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.RuleDescription)
  id: CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.RuleDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: CreateSubscriptionAsync(SubscriptionDescription, RuleDescription)
  nameWithType: NamespaceManager.CreateSubscriptionAsync(SubscriptionDescription, RuleDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription, Microsoft.ServiceBus.Messaging.RuleDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: CreateSubscriptionAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2257
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Asynchronously creates a new subscription in the service \nnamespace with the specified subscription description and rule description."
  example: []
  syntax:
    content: public Task<SubscriptionDescription> CreateSubscriptionAsync(SubscriptionDescription description, RuleDescription ruleDescription)
    content.vb: Public Function CreateSubscriptionAsync(description As SubscriptionDescription, ruleDescription As RuleDescription) As Task(Of SubscriptionDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.SubscriptionDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription\" data-throw-if-not-resolved=\"false\"></xref> object describing the attributes with which the new subscription will be created."
    - id: ruleDescription
      type: Microsoft.ServiceBus.Messaging.RuleDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.RuleDescription\" data-throw-if-not-resolved=\"false\"></xref> object describing the attributes with which the messages are matched and acted upon."
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.SubscriptionDescription}
      description: The asynchronously created subscription.
  overload: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.UpdateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  id: UpdateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: UpdateSubscription(SubscriptionDescription)
  nameWithType: NamespaceManager.UpdateSubscription(SubscriptionDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: UpdateSubscription
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2284
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Enables you to update the subscription.
  example: []
  syntax:
    content: public SubscriptionDescription UpdateSubscription(SubscriptionDescription description)
    content.vb: Public Function UpdateSubscription(description As SubscriptionDescription) As SubscriptionDescription
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.SubscriptionDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription\" data-throw-if-not-resolved=\"false\"></xref> object describing the subscription to be updated."
    return:
      type: Microsoft.ServiceBus.Messaging.SubscriptionDescription
      description: The <xref href="Microsoft.ServiceBus.Messaging.SubscriptionDescription" data-throw-if-not-resolved="false"></xref> of the updated subscription.
  overload: Microsoft.ServiceBus.NamespaceManager.UpdateSubscription*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.UpdateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  id: UpdateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: UpdateSubscriptionAsync(SubscriptionDescription)
  nameWithType: NamespaceManager.UpdateSubscriptionAsync(SubscriptionDescription)
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: UpdateSubscriptionAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2293
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously enables you to update the subscription.
  example: []
  syntax:
    content: public Task<SubscriptionDescription> UpdateSubscriptionAsync(SubscriptionDescription description)
    content.vb: Public Function UpdateSubscriptionAsync(description As SubscriptionDescription) As Task(Of SubscriptionDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.SubscriptionDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription\" data-throw-if-not-resolved=\"false\"></xref> object describing the subscription to be updated."
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.SubscriptionDescription}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.UpdateSubscriptionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteSubscription(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.DeleteSubscription(System.String,System.String)
  id: DeleteSubscription(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: DeleteSubscription(String, String)
  nameWithType: NamespaceManager.DeleteSubscription(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteSubscription(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: DeleteSubscription
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2303
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Deletes the subscription with the specified topic path and subscription name.
  example: []
  syntax:
    content: public void DeleteSubscription(string topicPath, string name)
    content.vb: Public Sub DeleteSubscription(topicPath As String, name As String)
    parameters:
    - id: topicPath
      type: System.String
      description: The topic path relative to the service namespace base address.
    - id: name
      type: System.String
      description: The name of the subscription to delete.
  overload: Microsoft.ServiceBus.NamespaceManager.DeleteSubscription*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteSubscriptionAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.DeleteSubscriptionAsync(System.String,System.String)
  id: DeleteSubscriptionAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: DeleteSubscriptionAsync(String, String)
  nameWithType: NamespaceManager.DeleteSubscriptionAsync(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteSubscriptionAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: DeleteSubscriptionAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2312
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously deletes the subscription with the specified topic path and subscription name.
  example: []
  syntax:
    content: public Task DeleteSubscriptionAsync(string topicPath, string name)
    content.vb: Public Function DeleteSubscriptionAsync(topicPath As String, name As String) As Task
    parameters:
    - id: topicPath
      type: System.String
      description: The topic path relative to the service namespace base address.
    - id: name
      type: System.String
      description: The name of the subscription to delete.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous delete subscription operation.
  overload: Microsoft.ServiceBus.NamespaceManager.DeleteSubscriptionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetSubscription(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetSubscription(System.String,System.String)
  id: GetSubscription(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetSubscription(String, String)
  nameWithType: NamespaceManager.GetSubscription(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetSubscription(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetSubscription
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2336
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Retrieves the topic from the service namespace.
  example: []
  syntax:
    content: public SubscriptionDescription GetSubscription(string topicPath, string name)
    content.vb: Public Function GetSubscription(topicPath As String, name As String) As SubscriptionDescription
    parameters:
    - id: topicPath
      type: System.String
      description: The path of the topic relative to the service namespace base address.
    - id: name
      type: System.String
      description: The name of the subscription.
    return:
      type: Microsoft.ServiceBus.Messaging.SubscriptionDescription
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription\" data-throw-if-not-resolved=\"false\"></xref> handle to the subscription, or a \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> exception if the subscription does not exist in the service namespace."
  overload: Microsoft.ServiceBus.NamespaceManager.GetSubscription*
  exceptions:
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    description: "The subscription does \nnot exist in the service namespace."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetSubscriptionAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetSubscriptionAsync(System.String,System.String)
  id: GetSubscriptionAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetSubscriptionAsync(String, String)
  nameWithType: NamespaceManager.GetSubscriptionAsync(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetSubscriptionAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetSubscriptionAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2345
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously retrieves the topic from the service namespace.
  example: []
  syntax:
    content: public Task<SubscriptionDescription> GetSubscriptionAsync(string topicPath, string name)
    content.vb: Public Function GetSubscriptionAsync(topicPath As String, name As String) As Task(Of SubscriptionDescription)
    parameters:
    - id: topicPath
      type: System.String
      description: The path of the topic relative to the service namespace base address.
    - id: name
      type: System.String
      description: The name of the subscription.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.SubscriptionDescription}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetSubscriptionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.SubscriptionExists(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.SubscriptionExists(System.String,System.String)
  id: SubscriptionExists(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: SubscriptionExists(String, String)
  nameWithType: NamespaceManager.SubscriptionExists(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.SubscriptionExists(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: SubscriptionExists
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2382
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Determines whether a subscription exists in the service namespace.
  example: []
  syntax:
    content: public bool SubscriptionExists(string topicPath, string name)
    content.vb: Public Function SubscriptionExists(topicPath As String, name As String) As Boolean
    parameters:
    - id: topicPath
      type: System.String
      description: The path of the topic relative to the service namespace base address.
    - id: name
      type: System.String
      description: The name of the subscription.
    return:
      type: System.Boolean
      description: true if a subscription exists in the service namespace; otherwise, false.
  overload: Microsoft.ServiceBus.NamespaceManager.SubscriptionExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.SubscriptionExistsAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.SubscriptionExistsAsync(System.String,System.String)
  id: SubscriptionExistsAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: SubscriptionExistsAsync(String, String)
  nameWithType: NamespaceManager.SubscriptionExistsAsync(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.SubscriptionExistsAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: SubscriptionExistsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2391
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously determines whether a subscription exists in the service namespace.
  example: []
  syntax:
    content: public Task<bool> SubscriptionExistsAsync(string topicPath, string name)
    content.vb: Public Function SubscriptionExistsAsync(topicPath As String, name As String) As Task(Of Boolean)
    parameters:
    - id: topicPath
      type: System.String
      description: The path of the topic relative to the service namespace base address.
    - id: name
      type: System.String
      description: The name of the subscription.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.SubscriptionExistsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetSubscriptions(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetSubscriptions(System.String)
  id: GetSubscriptions(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetSubscriptions(String)
  nameWithType: NamespaceManager.GetSubscriptions(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetSubscriptions(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetSubscriptions
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2430
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Retrieves an enumerable collection of all subscriptions in the service namespace.
  example: []
  syntax:
    content: public IEnumerable<SubscriptionDescription> GetSubscriptions(string topicPath)
    content.vb: Public Function GetSubscriptions(topicPath As String) As IEnumerable(Of SubscriptionDescription)
    parameters:
    - id: topicPath
      type: System.String
      description: The path of the topic relative to the service namespace base address.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.SubscriptionDescription}
      description: "An \n<xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> object that represents the collection of all subscriptions in the service namespace or returns an empty collection if no subscription exists."
  overload: Microsoft.ServiceBus.NamespaceManager.GetSubscriptions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetSubscriptionsAsync(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetSubscriptionsAsync(System.String)
  id: GetSubscriptionsAsync(System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetSubscriptionsAsync(String)
  nameWithType: NamespaceManager.GetSubscriptionsAsync(String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetSubscriptionsAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetSubscriptionsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2438
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously retrieves an enumerable collection of all subscriptions in the service namespace.
  example: []
  syntax:
    content: public Task<IEnumerable<SubscriptionDescription>> GetSubscriptionsAsync(string topicPath)
    content.vb: Public Function GetSubscriptionsAsync(topicPath As String) As Task(Of IEnumerable(Of SubscriptionDescription))
    parameters:
    - id: topicPath
      type: System.String
      description: The path of the topic relative to the service namespace base address.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.SubscriptionDescription}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetSubscriptionsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetSubscriptions(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetSubscriptions(System.String,System.String)
  id: GetSubscriptions(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetSubscriptions(String, String)
  nameWithType: NamespaceManager.GetSubscriptions(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetSubscriptions(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetSubscriptions
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2450
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Retrieves an enumerable collection of all subscriptions in the service namespace with specified topic path and filter.
  example: []
  syntax:
    content: public IEnumerable<SubscriptionDescription> GetSubscriptions(string topicPath, string filter)
    content.vb: Public Function GetSubscriptions(topicPath As String, filter As String) As IEnumerable(Of SubscriptionDescription)
    parameters:
    - id: topicPath
      type: System.String
      description: The path of the topic relative to the service namespace base address.
    - id: filter
      type: System.String
      description: The string used to filter the subscriptions to be retrieved.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.SubscriptionDescription}
      description: "An \n<xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> object that represents the collection of all subscriptions in the service namespace or returns an empty collection if no subscription exists."
  overload: Microsoft.ServiceBus.NamespaceManager.GetSubscriptions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetSubscriptionsAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetSubscriptionsAsync(System.String,System.String)
  id: GetSubscriptionsAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetSubscriptionsAsync(String, String)
  nameWithType: NamespaceManager.GetSubscriptionsAsync(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetSubscriptionsAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetSubscriptionsAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2459
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously retrieves an enumerable collection of all subscriptions in the service namespace.
  example: []
  syntax:
    content: public Task<IEnumerable<SubscriptionDescription>> GetSubscriptionsAsync(string topicPath, string filter)
    content.vb: Public Function GetSubscriptionsAsync(topicPath As String, filter As String) As Task(Of IEnumerable(Of SubscriptionDescription))
    parameters:
    - id: topicPath
      type: System.String
      description: The path of the topic relative to the service namespace base address.
    - id: filter
      type: System.String
      description: The string used to filter the subscriptions to be retrieved.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.SubscriptionDescription}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetSubscriptionsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition(System.String,System.String)
  id: GetEventHubPartition(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetEventHubPartition(String, String)
  nameWithType: NamespaceManager.GetEventHubPartition(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetEventHubPartition
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2568
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Returns information about the specified Event Hub partition. This method assumes that you want partition information for the partition \nspecified by the <em>name</em> parameter that belongs to the default consumer group pointed to by <em>eventHubPath</em>."
  example: []
  syntax:
    content: public PartitionDescription GetEventHubPartition(string eventHubPath, string name)
    content.vb: Public Function GetEventHubPartition(eventHubPath As String, name As String) As PartitionDescription
    parameters:
    - id: eventHubPath
      type: System.String
      description: The path to the Event Hub.
    - id: name
      type: System.String
      description: The ID of the Event Hub partition.
    return:
      type: Microsoft.ServiceBus.Messaging.PartitionDescription
      description: Returns <xref href="Microsoft.ServiceBus.Messaging.PartitionDescription" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition(System.String,System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition(System.String,System.String,System.String)
  id: GetEventHubPartition(System.String,System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetEventHubPartition(String, String, String)
  nameWithType: NamespaceManager.GetEventHubPartition(String, String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetEventHubPartition
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2577
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: ''
  example: []
  syntax:
    content: public PartitionDescription GetEventHubPartition(string eventHubPath, string consumerGroupName, string name)
    content.vb: Public Function GetEventHubPartition(eventHubPath As String, consumerGroupName As String, name As String) As PartitionDescription
    parameters:
    - id: eventHubPath
      type: System.String
      description: ''
    - id: consumerGroupName
      type: System.String
      description: ''
    - id: name
      type: System.String
      description: ''
    return:
      type: Microsoft.ServiceBus.Messaging.PartitionDescription
  overload: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartitionAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetEventHubPartitionAsync(System.String,System.String)
  id: GetEventHubPartitionAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetEventHubPartitionAsync(String, String)
  nameWithType: NamespaceManager.GetEventHubPartitionAsync(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartitionAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetEventHubPartitionAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2586
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronous version of <xref href="Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<PartitionDescription> GetEventHubPartitionAsync(string eventHubPath, string name)
    content.vb: Public Function GetEventHubPartitionAsync(eventHubPath As String, name As String) As Task(Of PartitionDescription)
    parameters:
    - id: eventHubPath
      type: System.String
      description: The path to the Event Hub.
    - id: name
      type: System.String
      description: The ID of the Event Hub partition.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.PartitionDescription}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartitionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartitionAsync(System.String,System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetEventHubPartitionAsync(System.String,System.String,System.String)
  id: GetEventHubPartitionAsync(System.String,System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetEventHubPartitionAsync(String, String, String)
  nameWithType: NamespaceManager.GetEventHubPartitionAsync(String, String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartitionAsync(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetEventHubPartitionAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2598
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronous version of <xref href="Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<PartitionDescription> GetEventHubPartitionAsync(string eventHubPath, string consumerGroupName, string name)
    content.vb: Public Function GetEventHubPartitionAsync(eventHubPath As String, consumerGroupName As String, name As String) As Task(Of PartitionDescription)
    parameters:
    - id: eventHubPath
      type: System.String
      description: The path to the Event Hub.
    - id: consumerGroupName
      type: System.String
      description: The name of the Event Hubs consumer group.
    - id: name
      type: System.String
      description: The ID of the Event Hubs partition.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.PartitionDescription}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartitionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetRules(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetRules(System.String,System.String)
  id: GetRules(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetRules(String, String)
  nameWithType: NamespaceManager.GetRules(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRules(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetRules
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2738
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Retrieves an enumerable collection of all rules in the service namespace.
  example: []
  syntax:
    content: public IEnumerable<RuleDescription> GetRules(string topicPath, string subscriptionName)
    content.vb: Public Function GetRules(topicPath As String, subscriptionName As String) As IEnumerable(Of RuleDescription)
    parameters:
    - id: topicPath
      type: System.String
      description: The path of the topic relative to the service namespace base address.
    - id: subscriptionName
      type: System.String
      description: The name of the subscription.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RuleDescription}
      description: "An \n<xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> object that represents the collection of all rules in the service namespace or returns an empty collection if no rule exists."
  overload: Microsoft.ServiceBus.NamespaceManager.GetRules*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetRules(System.String,System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetRules(System.String,System.String,System.String)
  id: GetRules(System.String,System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetRules(String, String, String)
  nameWithType: NamespaceManager.GetRules(String, String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRules(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetRules
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2750
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Retrieves an enumerable collection of all rules in the \nservice namespace with specified topic path, subscription name and filter."
  example: []
  syntax:
    content: public IEnumerable<RuleDescription> GetRules(string topicPath, string subscriptionName, string filter)
    content.vb: Public Function GetRules(topicPath As String, subscriptionName As String, filter As String) As IEnumerable(Of RuleDescription)
    parameters:
    - id: topicPath
      type: System.String
      description: The topic path relative to the service namespace base address.
    - id: subscriptionName
      type: System.String
      description: The name of the subscription.
    - id: filter
      type: System.String
      description: The string used to filter the rules to be retrieved.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RuleDescription}
      description: "An \n<xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> object that represents the collection of all rules in the service namespace or returns an empty collection if no rule exists."
  overload: Microsoft.ServiceBus.NamespaceManager.GetRules*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetRulesAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetRulesAsync(System.String,System.String)
  id: GetRulesAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetRulesAsync(String, String)
  nameWithType: NamespaceManager.GetRulesAsync(String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRulesAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetRulesAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2759
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: Asynchronously retrieves an enumerable collection of all rules in the service namespace.
  example: []
  syntax:
    content: public Task<IEnumerable<RuleDescription>> GetRulesAsync(string topicPath, string subscriptionName)
    content.vb: Public Function GetRulesAsync(topicPath As String, subscriptionName As String) As Task(Of IEnumerable(Of RuleDescription))
    parameters:
    - id: topicPath
      type: System.String
      description: The topic path relative to the service namespace base address.
    - id: subscriptionName
      type: System.String
      description: The name of the subscription.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RuleDescription}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetRulesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.NamespaceManager.GetRulesAsync(System.String,System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetRulesAsync(System.String,System.String,System.String)
  id: GetRulesAsync(System.String,System.String,System.String)
  parent: Microsoft.ServiceBus.NamespaceManager
  langs:
  - csharp
  - vb
  name: GetRulesAsync(String, String, String)
  nameWithType: NamespaceManager.GetRulesAsync(String, String, String)
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRulesAsync(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
      branch: release_10_12_2016
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
    id: GetRulesAsync
    path: src/product/clients/Microsoft.ServiceBus.Messaging/NamespaceManager.cs
    startLine: 2772
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus
  summary: "Asynchronously retrieves an enumerable collection of all rules in \nthe service namespace with specified topic path, subscription name and filter."
  example: []
  syntax:
    content: public Task<IEnumerable<RuleDescription>> GetRulesAsync(string topicPath, string subscriptionName, string filter)
    content.vb: Public Function GetRulesAsync(topicPath As String, subscriptionName As String, filter As String) As Task(Of IEnumerable(Of RuleDescription))
    parameters:
    - id: topicPath
      type: System.String
      description: The topic path relative to the service namespace base address.
    - id: subscriptionName
      type: System.String
      description: The name of the subscription.
    - id: filter
      type: System.String
      description: The string used to filter the rules to be retrieved.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RuleDescription}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.NamespaceManager.GetRulesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.ServiceBus
  commentId: N:Microsoft.ServiceBus
  isExternal: false
  name: Microsoft.ServiceBus
  nameWithType: Microsoft.ServiceBus
  fullName: Microsoft.ServiceBus
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ServiceBus.NamespaceManager
  commentId: T:Microsoft.ServiceBus.NamespaceManager
  parent: Microsoft.ServiceBus
  isExternal: false
  name: NamespaceManager
  nameWithType: NamespaceManager
  fullName: Microsoft.ServiceBus.NamespaceManager
- uid: Microsoft.ServiceBus.NamespaceManager.#ctor*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.#ctor
  isExternal: false
  name: NamespaceManager
  nameWithType: NamespaceManager.NamespaceManager
  fullName: Microsoft.ServiceBus.NamespaceManager.NamespaceManager
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Collections.Generic.IEnumerable{System.Uri}
  commentId: T:System.Collections.Generic.IEnumerable{System.Uri}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Uri>
  nameWithType: IEnumerable<Uri>
  fullName: System.Collections.Generic.IEnumerable<System.Uri>
  nameWithType.vb: IEnumerable(Of Uri)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Uri)
  name.vb: IEnumerable(Of Uri)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Microsoft.ServiceBus.TokenProvider
  commentId: T:Microsoft.ServiceBus.TokenProvider
  parent: Microsoft.ServiceBus
  isExternal: false
  name: TokenProvider
  nameWithType: TokenProvider
  fullName: Microsoft.ServiceBus.TokenProvider
- uid: Microsoft.ServiceBus.NamespaceManagerSettings
  commentId: T:Microsoft.ServiceBus.NamespaceManagerSettings
  parent: Microsoft.ServiceBus
  isExternal: false
  name: NamespaceManagerSettings
  nameWithType: NamespaceManagerSettings
  fullName: Microsoft.ServiceBus.NamespaceManagerSettings
- uid: Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider
  commentId: P:Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider
- uid: Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout
  commentId: P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout
- uid: Microsoft.ServiceBus.NamespaceManager.Address*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.Address
  isExternal: false
  name: Address
  nameWithType: NamespaceManager.Address
  fullName: Microsoft.ServiceBus.NamespaceManager.Address
- uid: Microsoft.ServiceBus.NamespaceManager.Settings*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.Settings
  isExternal: false
  name: Settings
  nameWithType: NamespaceManager.Settings
  fullName: Microsoft.ServiceBus.NamespaceManager.Settings
- uid: Microsoft.ServiceBus.NamespaceManager.Create*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.Create
  isExternal: false
  name: Create
  nameWithType: NamespaceManager.Create
  fullName: Microsoft.ServiceBus.NamespaceManager.Create
- uid: Microsoft.ServiceBus.NamespaceManager.CreateFromConnectionString*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateFromConnectionString
  isExternal: false
  name: CreateFromConnectionString
  nameWithType: NamespaceManager.CreateFromConnectionString
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateFromConnectionString
- uid: Microsoft.ServiceBus.NamespaceManager.GetVersionInfo*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetVersionInfo
  isExternal: false
  name: GetVersionInfo
  nameWithType: NamespaceManager.GetVersionInfo
  fullName: Microsoft.ServiceBus.NamespaceManager.GetVersionInfo
- uid: Microsoft.ServiceBus.NamespaceManager.GetVersionInfoAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetVersionInfoAsync
  isExternal: false
  name: GetVersionInfoAsync
  nameWithType: NamespaceManager.GetVersionInfoAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetVersionInfoAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceBus.Messaging.QueueDescription
  commentId: T:Microsoft.ServiceBus.Messaging.QueueDescription
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: QueueDescription
  nameWithType: QueueDescription
  fullName: Microsoft.ServiceBus.Messaging.QueueDescription
- uid: Microsoft.ServiceBus.NamespaceManager.CreateQueue*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateQueue
  isExternal: false
  name: CreateQueue
  nameWithType: NamespaceManager.CreateQueue
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateQueue
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
  isExternal: false
  name: MessagingEntityAlreadyExistsException
  nameWithType: MessagingEntityAlreadyExistsException
  fullName: Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
- uid: Microsoft.ServiceBus.Messaging.QuotaExceededException
  commentId: T:Microsoft.ServiceBus.Messaging.QuotaExceededException
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: QuotaExceededException
  nameWithType: QuotaExceededException
  fullName: Microsoft.ServiceBus.Messaging.QuotaExceededException
- uid: Microsoft.ServiceBus.Messaging.MessagingException
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessagingException
  nameWithType: MessagingException
  fullName: Microsoft.ServiceBus.Messaging.MessagingException
- uid: Microsoft.ServiceBus.Messaging.ServerBusyException
  commentId: T:Microsoft.ServiceBus.Messaging.ServerBusyException
  isExternal: false
  name: ServerBusyException
  nameWithType: ServerBusyException
  fullName: Microsoft.ServiceBus.Messaging.ServerBusyException
- uid: Microsoft.ServiceBus.Messaging
  commentId: N:Microsoft.ServiceBus.Messaging
  isExternal: false
  name: Microsoft.ServiceBus.Messaging
  nameWithType: Microsoft.ServiceBus.Messaging
  fullName: Microsoft.ServiceBus.Messaging
- uid: Microsoft.ServiceBus.NamespaceManager.CreateQueueAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateQueueAsync
  isExternal: false
  name: CreateQueueAsync
  nameWithType: NamespaceManager.CreateQueueAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateQueueAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.QueueDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.QueueDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<QueueDescription>
  nameWithType: Task<QueueDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.QueueDescription>
  nameWithType.vb: Task(Of QueueDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.QueueDescription)
  name.vb: Task(Of QueueDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.QueueDescription
    name: QueueDescription
    nameWithType: QueueDescription
    fullName: Microsoft.ServiceBus.Messaging.QueueDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.QueueDescription
    name: QueueDescription
    nameWithType: QueueDescription
    fullName: Microsoft.ServiceBus.Messaging.QueueDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.CreateRelay*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateRelay
  isExternal: false
  name: CreateRelay
  nameWithType: NamespaceManager.CreateRelay
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateRelay
- uid: Microsoft.ServiceBus.RelayType
  commentId: T:Microsoft.ServiceBus.RelayType
  parent: Microsoft.ServiceBus
  isExternal: false
  name: RelayType
  nameWithType: RelayType
  fullName: Microsoft.ServiceBus.RelayType
- uid: Microsoft.ServiceBus.Messaging.RelayDescription
  commentId: T:Microsoft.ServiceBus.Messaging.RelayDescription
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: RelayDescription
  nameWithType: RelayDescription
  fullName: Microsoft.ServiceBus.Messaging.RelayDescription
- uid: Microsoft.ServiceBus.NamespaceManager.CreateRelayAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateRelayAsync
  isExternal: false
  name: CreateRelayAsync
  nameWithType: NamespaceManager.CreateRelayAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateRelayAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.RelayDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.RelayDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RelayDescription>
  nameWithType: Task<RelayDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.RelayDescription>
  nameWithType.vb: Task(Of RelayDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.RelayDescription)
  name.vb: Task(Of RelayDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.RelayDescription
    name: RelayDescription
    nameWithType: RelayDescription
    fullName: Microsoft.ServiceBus.Messaging.RelayDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.RelayDescription
    name: RelayDescription
    nameWithType: RelayDescription
    fullName: Microsoft.ServiceBus.Messaging.RelayDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteRelay*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.DeleteRelay
  isExternal: false
  name: DeleteRelay
  nameWithType: NamespaceManager.DeleteRelay
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteRelay
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteRelayAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.DeleteRelayAsync
  isExternal: false
  name: DeleteRelayAsync
  nameWithType: NamespaceManager.DeleteRelayAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteRelayAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.ServiceBus.NamespaceManager.GetRelay*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetRelay
  isExternal: false
  name: GetRelay
  nameWithType: NamespaceManager.GetRelay
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRelay
- uid: Microsoft.ServiceBus.NamespaceManager.GetRelayAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetRelayAsync
  isExternal: false
  name: GetRelayAsync
  nameWithType: NamespaceManager.GetRelayAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRelayAsync
- uid: Microsoft.ServiceBus.NamespaceManager.GetRelays*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetRelays
  isExternal: false
  name: GetRelays
  nameWithType: NamespaceManager.GetRelays
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRelays
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RelayDescription}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RelayDescription}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<RelayDescription>
  nameWithType: IEnumerable<RelayDescription>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.RelayDescription>
  nameWithType.vb: IEnumerable(Of RelayDescription)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.RelayDescription)
  name.vb: IEnumerable(Of RelayDescription)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.RelayDescription
    name: RelayDescription
    nameWithType: RelayDescription
    fullName: Microsoft.ServiceBus.Messaging.RelayDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.RelayDescription
    name: RelayDescription
    nameWithType: RelayDescription
    fullName: Microsoft.ServiceBus.Messaging.RelayDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.GetRelaysAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetRelaysAsync
  isExternal: false
  name: GetRelaysAsync
  nameWithType: NamespaceManager.GetRelaysAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRelaysAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RelayDescription}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RelayDescription}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<RelayDescription>>
  nameWithType: Task<IEnumerable<RelayDescription>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.RelayDescription>>
  nameWithType.vb: Task(Of IEnumerable(Of RelayDescription))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.RelayDescription))
  name.vb: Task(Of IEnumerable(Of RelayDescription))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.RelayDescription
    name: RelayDescription
    nameWithType: RelayDescription
    fullName: Microsoft.ServiceBus.Messaging.RelayDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.RelayDescription
    name: RelayDescription
    nameWithType: RelayDescription
    fullName: Microsoft.ServiceBus.Messaging.RelayDescription
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.RelayExists*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.RelayExists
  isExternal: false
  name: RelayExists
  nameWithType: NamespaceManager.RelayExists
  fullName: Microsoft.ServiceBus.NamespaceManager.RelayExists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.ServiceBus.NamespaceManager.RelayExistsAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.RelayExistsAsync
  isExternal: false
  name: RelayExistsAsync
  nameWithType: NamespaceManager.RelayExistsAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.RelayExistsAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateRelay*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.UpdateRelay
  isExternal: false
  name: UpdateRelay
  nameWithType: NamespaceManager.UpdateRelay
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateRelay
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateRelayAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.UpdateRelayAsync
  isExternal: false
  name: UpdateRelayAsync
  nameWithType: NamespaceManager.UpdateRelayAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateRelayAsync
- uid: Microsoft.ServiceBus.Relay.HybridConnectionDescription
  commentId: T:Microsoft.ServiceBus.Relay.HybridConnectionDescription
  parent: Microsoft.ServiceBus.Relay
  isExternal: false
  name: HybridConnectionDescription
  nameWithType: HybridConnectionDescription
  fullName: Microsoft.ServiceBus.Relay.HybridConnectionDescription
- uid: Microsoft.ServiceBus.NamespaceManager.CreateHybridConnection*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateHybridConnection
  isExternal: false
  name: CreateHybridConnection
  nameWithType: NamespaceManager.CreateHybridConnection
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateHybridConnection
- uid: Microsoft.ServiceBus.Relay
  commentId: N:Microsoft.ServiceBus.Relay
  isExternal: false
  name: Microsoft.ServiceBus.Relay
  nameWithType: Microsoft.ServiceBus.Relay
  fullName: Microsoft.ServiceBus.Relay
- uid: Microsoft.ServiceBus.NamespaceManager.CreateHybridConnectionAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateHybridConnectionAsync
  isExternal: false
  name: CreateHybridConnectionAsync
  nameWithType: NamespaceManager.CreateHybridConnectionAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateHybridConnectionAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Relay.HybridConnectionDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Relay.HybridConnectionDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HybridConnectionDescription>
  nameWithType: Task<HybridConnectionDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Relay.HybridConnectionDescription>
  nameWithType.vb: Task(Of HybridConnectionDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  name.vb: Task(Of HybridConnectionDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Relay.HybridConnectionDescription
    name: HybridConnectionDescription
    nameWithType: HybridConnectionDescription
    fullName: Microsoft.ServiceBus.Relay.HybridConnectionDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Relay.HybridConnectionDescription
    name: HybridConnectionDescription
    nameWithType: HybridConnectionDescription
    fullName: Microsoft.ServiceBus.Relay.HybridConnectionDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteHybridConnection*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.DeleteHybridConnection
  isExternal: false
  name: DeleteHybridConnection
  nameWithType: NamespaceManager.DeleteHybridConnection
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteHybridConnection
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteHybridConnectionAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.DeleteHybridConnectionAsync
  isExternal: false
  name: DeleteHybridConnectionAsync
  nameWithType: NamespaceManager.DeleteHybridConnectionAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteHybridConnectionAsync
- uid: Microsoft.ServiceBus.NamespaceManager.GetHybridConnection*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetHybridConnection
  isExternal: false
  name: GetHybridConnection
  nameWithType: NamespaceManager.GetHybridConnection
  fullName: Microsoft.ServiceBus.NamespaceManager.GetHybridConnection
- uid: Microsoft.ServiceBus.NamespaceManager.GetHybridConnectionAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetHybridConnectionAsync
  isExternal: false
  name: GetHybridConnectionAsync
  nameWithType: NamespaceManager.GetHybridConnectionAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetHybridConnectionAsync
- uid: Microsoft.ServiceBus.NamespaceManager.GetHybridConnections*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetHybridConnections
  isExternal: false
  name: GetHybridConnections
  nameWithType: NamespaceManager.GetHybridConnections
  fullName: Microsoft.ServiceBus.NamespaceManager.GetHybridConnections
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Relay.HybridConnectionDescription}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Relay.HybridConnectionDescription}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<HybridConnectionDescription>
  nameWithType: IEnumerable<HybridConnectionDescription>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Relay.HybridConnectionDescription>
  nameWithType.vb: IEnumerable(Of HybridConnectionDescription)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Relay.HybridConnectionDescription)
  name.vb: IEnumerable(Of HybridConnectionDescription)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Relay.HybridConnectionDescription
    name: HybridConnectionDescription
    nameWithType: HybridConnectionDescription
    fullName: Microsoft.ServiceBus.Relay.HybridConnectionDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Relay.HybridConnectionDescription
    name: HybridConnectionDescription
    nameWithType: HybridConnectionDescription
    fullName: Microsoft.ServiceBus.Relay.HybridConnectionDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.GetHybridConnectionsAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetHybridConnectionsAsync
  isExternal: false
  name: GetHybridConnectionsAsync
  nameWithType: NamespaceManager.GetHybridConnectionsAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetHybridConnectionsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Relay.HybridConnectionDescription}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Relay.HybridConnectionDescription}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<HybridConnectionDescription>>
  nameWithType: Task<IEnumerable<HybridConnectionDescription>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Relay.HybridConnectionDescription>>
  nameWithType.vb: Task(Of IEnumerable(Of HybridConnectionDescription))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Relay.HybridConnectionDescription))
  name.vb: Task(Of IEnumerable(Of HybridConnectionDescription))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Relay.HybridConnectionDescription
    name: HybridConnectionDescription
    nameWithType: HybridConnectionDescription
    fullName: Microsoft.ServiceBus.Relay.HybridConnectionDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Relay.HybridConnectionDescription
    name: HybridConnectionDescription
    nameWithType: HybridConnectionDescription
    fullName: Microsoft.ServiceBus.Relay.HybridConnectionDescription
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.HybridConnectionExists*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.HybridConnectionExists
  isExternal: false
  name: HybridConnectionExists
  nameWithType: NamespaceManager.HybridConnectionExists
  fullName: Microsoft.ServiceBus.NamespaceManager.HybridConnectionExists
- uid: Microsoft.ServiceBus.NamespaceManager.HybridConnectionExistsAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.HybridConnectionExistsAsync
  isExternal: false
  name: HybridConnectionExistsAsync
  nameWithType: NamespaceManager.HybridConnectionExistsAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.HybridConnectionExistsAsync
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateHybridConnection*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.UpdateHybridConnection
  isExternal: false
  name: UpdateHybridConnection
  nameWithType: NamespaceManager.UpdateHybridConnection
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateHybridConnection
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateHybridConnectionAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.UpdateHybridConnectionAsync
  isExternal: false
  name: UpdateHybridConnectionAsync
  nameWithType: NamespaceManager.UpdateHybridConnectionAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateHybridConnectionAsync
- uid: Microsoft.ServiceBus.Messaging.EventHubDescription
  commentId: T:Microsoft.ServiceBus.Messaging.EventHubDescription
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventHubDescription
  nameWithType: EventHubDescription
  fullName: Microsoft.ServiceBus.Messaging.EventHubDescription
- uid: Microsoft.ServiceBus.NamespaceManager.CreateEventHub*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateEventHub
  isExternal: false
  name: CreateEventHub
  nameWithType: NamespaceManager.CreateEventHub
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateEventHub
- uid: Microsoft.ServiceBus.NamespaceManager.CreateEventHubAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateEventHubAsync
  isExternal: false
  name: CreateEventHubAsync
  nameWithType: NamespaceManager.CreateEventHubAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateEventHubAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<EventHubDescription>
  nameWithType: Task<EventHubDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.EventHubDescription>
  nameWithType.vb: Task(Of EventHubDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.EventHubDescription)
  name.vb: Task(Of EventHubDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.EventHubDescription
    name: EventHubDescription
    nameWithType: EventHubDescription
    fullName: Microsoft.ServiceBus.Messaging.EventHubDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.EventHubDescription
    name: EventHubDescription
    nameWithType: EventHubDescription
    fullName: Microsoft.ServiceBus.Messaging.EventHubDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExists*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExists
  isExternal: false
  name: CreateEventHubIfNotExists
  nameWithType: NamespaceManager.CreateEventHubIfNotExists
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExists
- uid: Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExistsAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExistsAsync
  isExternal: false
  name: CreateEventHubIfNotExistsAsync
  nameWithType: NamespaceManager.CreateEventHubIfNotExistsAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExistsAsync
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateEventHub*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.UpdateEventHub
  isExternal: false
  name: UpdateEventHub
  nameWithType: NamespaceManager.UpdateEventHub
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateEventHub
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateEventHubAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.UpdateEventHubAsync
  isExternal: false
  name: UpdateEventHubAsync
  nameWithType: NamespaceManager.UpdateEventHubAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateEventHubAsync
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteEventHub*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.DeleteEventHub
  isExternal: false
  name: DeleteEventHub
  nameWithType: NamespaceManager.DeleteEventHub
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteEventHub
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteEventHubAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.DeleteEventHubAsync
  isExternal: false
  name: DeleteEventHubAsync
  nameWithType: NamespaceManager.DeleteEventHubAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteEventHubAsync
- uid: Microsoft.ServiceBus.NamespaceManager.GetEventHub*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetEventHub
  isExternal: false
  name: GetEventHub
  nameWithType: NamespaceManager.GetEventHub
  fullName: Microsoft.ServiceBus.NamespaceManager.GetEventHub
- uid: Microsoft.ServiceBus.NamespaceManager.GetEventHubAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetEventHubAsync
  isExternal: false
  name: GetEventHubAsync
  nameWithType: NamespaceManager.GetEventHubAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetEventHubAsync
- uid: Microsoft.ServiceBus.NamespaceManager.EventHubExists*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.EventHubExists
  isExternal: false
  name: EventHubExists
  nameWithType: NamespaceManager.EventHubExists
  fullName: Microsoft.ServiceBus.NamespaceManager.EventHubExists
- uid: Microsoft.ServiceBus.NamespaceManager.EventHubExistsAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.EventHubExistsAsync
  isExternal: false
  name: EventHubExistsAsync
  nameWithType: NamespaceManager.EventHubExistsAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.EventHubExistsAsync
- uid: Microsoft.ServiceBus.NamespaceManager.GetEventHubs*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetEventHubs
  isExternal: false
  name: GetEventHubs
  nameWithType: NamespaceManager.GetEventHubs
  fullName: Microsoft.ServiceBus.NamespaceManager.GetEventHubs
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventHubDescription}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventHubDescription}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EventHubDescription>
  nameWithType: IEnumerable<EventHubDescription>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.EventHubDescription>
  nameWithType.vb: IEnumerable(Of EventHubDescription)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.EventHubDescription)
  name.vb: IEnumerable(Of EventHubDescription)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.EventHubDescription
    name: EventHubDescription
    nameWithType: EventHubDescription
    fullName: Microsoft.ServiceBus.Messaging.EventHubDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.EventHubDescription
    name: EventHubDescription
    nameWithType: EventHubDescription
    fullName: Microsoft.ServiceBus.Messaging.EventHubDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.GetEventHubsAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetEventHubsAsync
  isExternal: false
  name: GetEventHubsAsync
  nameWithType: NamespaceManager.GetEventHubsAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetEventHubsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventHubDescription}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventHubDescription}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<EventHubDescription>>
  nameWithType: Task<IEnumerable<EventHubDescription>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.EventHubDescription>>
  nameWithType.vb: Task(Of IEnumerable(Of EventHubDescription))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.EventHubDescription))
  name.vb: Task(Of IEnumerable(Of EventHubDescription))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.EventHubDescription
    name: EventHubDescription
    nameWithType: EventHubDescription
    fullName: Microsoft.ServiceBus.Messaging.EventHubDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.EventHubDescription
    name: EventHubDescription
    nameWithType: EventHubDescription
    fullName: Microsoft.ServiceBus.Messaging.EventHubDescription
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubDescription.Path
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubDescription.Path
- uid: Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishers*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishers
  isExternal: false
  name: GetRevokedPublishers
  nameWithType: NamespaceManager.GetRevokedPublishers
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishers
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RevokedPublisherDescription}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RevokedPublisherDescription}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<RevokedPublisherDescription>
  nameWithType: IEnumerable<RevokedPublisherDescription>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.RevokedPublisherDescription>
  nameWithType.vb: IEnumerable(Of RevokedPublisherDescription)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.RevokedPublisherDescription)
  name.vb: IEnumerable(Of RevokedPublisherDescription)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.RevokedPublisherDescription
    name: RevokedPublisherDescription
    nameWithType: RevokedPublisherDescription
    fullName: Microsoft.ServiceBus.Messaging.RevokedPublisherDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.RevokedPublisherDescription
    name: RevokedPublisherDescription
    nameWithType: RevokedPublisherDescription
    fullName: Microsoft.ServiceBus.Messaging.RevokedPublisherDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishers(System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishers(System.String)
- uid: Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishersAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishersAsync
  isExternal: false
  name: GetRevokedPublishersAsync
  nameWithType: NamespaceManager.GetRevokedPublishersAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishersAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RevokedPublisherDescription}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RevokedPublisherDescription}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<RevokedPublisherDescription>>
  nameWithType: Task<IEnumerable<RevokedPublisherDescription>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.RevokedPublisherDescription>>
  nameWithType.vb: Task(Of IEnumerable(Of RevokedPublisherDescription))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.RevokedPublisherDescription))
  name.vb: Task(Of IEnumerable(Of RevokedPublisherDescription))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.RevokedPublisherDescription
    name: RevokedPublisherDescription
    nameWithType: RevokedPublisherDescription
    fullName: Microsoft.ServiceBus.Messaging.RevokedPublisherDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.RevokedPublisherDescription
    name: RevokedPublisherDescription
    nameWithType: RevokedPublisherDescription
    fullName: Microsoft.ServiceBus.Messaging.RevokedPublisherDescription
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.RevokedPublisherDescription
  commentId: T:Microsoft.ServiceBus.Messaging.RevokedPublisherDescription
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: RevokedPublisherDescription
  nameWithType: RevokedPublisherDescription
  fullName: Microsoft.ServiceBus.Messaging.RevokedPublisherDescription
- uid: Microsoft.ServiceBus.NamespaceManager.RevokePublisher*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.RevokePublisher
  isExternal: false
  name: RevokePublisher
  nameWithType: NamespaceManager.RevokePublisher
  fullName: Microsoft.ServiceBus.NamespaceManager.RevokePublisher
- uid: Microsoft.ServiceBus.NamespaceManager.RevokePublisher(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.RevokePublisher(System.String,System.String)
- uid: Microsoft.ServiceBus.NamespaceManager.RevokePublisherAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.RevokePublisherAsync
  isExternal: false
  name: RevokePublisherAsync
  nameWithType: NamespaceManager.RevokePublisherAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.RevokePublisherAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.RevokedPublisherDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.RevokedPublisherDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RevokedPublisherDescription>
  nameWithType: Task<RevokedPublisherDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.RevokedPublisherDescription>
  nameWithType.vb: Task(Of RevokedPublisherDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.RevokedPublisherDescription)
  name.vb: Task(Of RevokedPublisherDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.RevokedPublisherDescription
    name: RevokedPublisherDescription
    nameWithType: RevokedPublisherDescription
    fullName: Microsoft.ServiceBus.Messaging.RevokedPublisherDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.RevokedPublisherDescription
    name: RevokedPublisherDescription
    nameWithType: RevokedPublisherDescription
    fullName: Microsoft.ServiceBus.Messaging.RevokedPublisherDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.RestorePublisher*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.RestorePublisher
  isExternal: false
  name: RestorePublisher
  nameWithType: NamespaceManager.RestorePublisher
  fullName: Microsoft.ServiceBus.NamespaceManager.RestorePublisher
- uid: Microsoft.ServiceBus.NamespaceManager.RestorePublisher(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.RestorePublisher(System.String,System.String)
- uid: Microsoft.ServiceBus.NamespaceManager.RestorePublisherAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.RestorePublisherAsync
  isExternal: false
  name: RestorePublisherAsync
  nameWithType: NamespaceManager.RestorePublisherAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.RestorePublisherAsync
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateQueue*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.UpdateQueue
  isExternal: false
  name: UpdateQueue
  nameWithType: NamespaceManager.UpdateQueue
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateQueue
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateQueueAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.UpdateQueueAsync
  isExternal: false
  name: UpdateQueueAsync
  nameWithType: NamespaceManager.UpdateQueueAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateQueueAsync
- uid: Microsoft.ServiceBus.NamespaceManager.RenameQueue*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.RenameQueue
  isExternal: false
  name: RenameQueue
  nameWithType: NamespaceManager.RenameQueue
  fullName: Microsoft.ServiceBus.NamespaceManager.RenameQueue
- uid: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
  isExternal: false
  name: MessagingEntityNotFoundException
  nameWithType: MessagingEntityNotFoundException
  fullName: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
- uid: Microsoft.ServiceBus.NamespaceManager.RenameQueue(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.RenameQueue(System.String,System.String)
- uid: Microsoft.ServiceBus.NamespaceManager.RenameQueueAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.RenameQueueAsync
  isExternal: false
  name: RenameQueueAsync
  nameWithType: NamespaceManager.RenameQueueAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.RenameQueueAsync
- uid: Microsoft.ServiceBus.Messaging.Constants.QueueNameMaximumLength
  commentId: F:Microsoft.ServiceBus.Messaging.Constants.QueueNameMaximumLength
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteQueue*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.DeleteQueue
  isExternal: false
  name: DeleteQueue
  nameWithType: NamespaceManager.DeleteQueue
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteQueue
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteQueueAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.DeleteQueueAsync
  isExternal: false
  name: DeleteQueueAsync
  nameWithType: NamespaceManager.DeleteQueueAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteQueueAsync
- uid: Microsoft.ServiceBus.NamespaceManager.GetQueue*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetQueue
  isExternal: false
  name: GetQueue
  nameWithType: NamespaceManager.GetQueue
  fullName: Microsoft.ServiceBus.NamespaceManager.GetQueue
- uid: Microsoft.ServiceBus.NamespaceManager.GetQueueAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetQueueAsync
  isExternal: false
  name: GetQueueAsync
  nameWithType: NamespaceManager.GetQueueAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetQueueAsync
- uid: Microsoft.ServiceBus.NamespaceManager.QueueExists*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.QueueExists
  isExternal: false
  name: QueueExists
  nameWithType: NamespaceManager.QueueExists
  fullName: Microsoft.ServiceBus.NamespaceManager.QueueExists
- uid: Microsoft.ServiceBus.NamespaceManager.QueueExistsAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.QueueExistsAsync
  isExternal: false
  name: QueueExistsAsync
  nameWithType: NamespaceManager.QueueExistsAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.QueueExistsAsync
- uid: Microsoft.ServiceBus.NamespaceManager.GetQueues*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetQueues
  isExternal: false
  name: GetQueues
  nameWithType: NamespaceManager.GetQueues
  fullName: Microsoft.ServiceBus.NamespaceManager.GetQueues
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.QueueDescription}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.QueueDescription}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<QueueDescription>
  nameWithType: IEnumerable<QueueDescription>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.QueueDescription>
  nameWithType.vb: IEnumerable(Of QueueDescription)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.QueueDescription)
  name.vb: IEnumerable(Of QueueDescription)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.QueueDescription
    name: QueueDescription
    nameWithType: QueueDescription
    fullName: Microsoft.ServiceBus.Messaging.QueueDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.QueueDescription
    name: QueueDescription
    nameWithType: QueueDescription
    fullName: Microsoft.ServiceBus.Messaging.QueueDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.GetQueuesAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetQueuesAsync
  isExternal: false
  name: GetQueuesAsync
  nameWithType: NamespaceManager.GetQueuesAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetQueuesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.QueueDescription}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.QueueDescription}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<QueueDescription>>
  nameWithType: Task<IEnumerable<QueueDescription>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.QueueDescription>>
  nameWithType.vb: Task(Of IEnumerable(Of QueueDescription))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.QueueDescription))
  name.vb: Task(Of IEnumerable(Of QueueDescription))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.QueueDescription
    name: QueueDescription
    nameWithType: QueueDescription
    fullName: Microsoft.ServiceBus.Messaging.QueueDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.QueueDescription
    name: QueueDescription
    nameWithType: QueueDescription
    fullName: Microsoft.ServiceBus.Messaging.QueueDescription
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.TopicDescription
  commentId: T:Microsoft.ServiceBus.Messaging.TopicDescription
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: TopicDescription
  nameWithType: TopicDescription
  fullName: Microsoft.ServiceBus.Messaging.TopicDescription
- uid: Microsoft.ServiceBus.NamespaceManager.CreateTopic*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateTopic
  isExternal: false
  name: CreateTopic
  nameWithType: NamespaceManager.CreateTopic
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateTopic
- uid: Microsoft.ServiceBus.NamespaceManager.CreateTopicAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateTopicAsync
  isExternal: false
  name: CreateTopicAsync
  nameWithType: NamespaceManager.CreateTopicAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateTopicAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.TopicDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.TopicDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TopicDescription>
  nameWithType: Task<TopicDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.TopicDescription>
  nameWithType.vb: Task(Of TopicDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.TopicDescription)
  name.vb: Task(Of TopicDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.TopicDescription
    name: TopicDescription
    nameWithType: TopicDescription
    fullName: Microsoft.ServiceBus.Messaging.TopicDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.TopicDescription
    name: TopicDescription
    nameWithType: TopicDescription
    fullName: Microsoft.ServiceBus.Messaging.TopicDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateTopic*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.UpdateTopic
  isExternal: false
  name: UpdateTopic
  nameWithType: NamespaceManager.UpdateTopic
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateTopic
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateTopicAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.UpdateTopicAsync
  isExternal: false
  name: UpdateTopicAsync
  nameWithType: NamespaceManager.UpdateTopicAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateTopicAsync
- uid: Microsoft.ServiceBus.NamespaceManager.RenameTopic*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.RenameTopic
  isExternal: false
  name: RenameTopic
  nameWithType: NamespaceManager.RenameTopic
  fullName: Microsoft.ServiceBus.NamespaceManager.RenameTopic
- uid: Microsoft.ServiceBus.NamespaceManager.RenameTopic(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.RenameTopic(System.String,System.String)
- uid: Microsoft.ServiceBus.NamespaceManager.RenameTopicAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.RenameTopicAsync
  isExternal: false
  name: RenameTopicAsync
  nameWithType: NamespaceManager.RenameTopicAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.RenameTopicAsync
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteTopic*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.DeleteTopic
  isExternal: false
  name: DeleteTopic
  nameWithType: NamespaceManager.DeleteTopic
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteTopic
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteTopicAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.DeleteTopicAsync
  isExternal: false
  name: DeleteTopicAsync
  nameWithType: NamespaceManager.DeleteTopicAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteTopicAsync
- uid: Microsoft.ServiceBus.NamespaceManager.GetTopic*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetTopic
  isExternal: false
  name: GetTopic
  nameWithType: NamespaceManager.GetTopic
  fullName: Microsoft.ServiceBus.NamespaceManager.GetTopic
- uid: Microsoft.ServiceBus.NamespaceManager.GetTopicAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetTopicAsync
  isExternal: false
  name: GetTopicAsync
  nameWithType: NamespaceManager.GetTopicAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetTopicAsync
- uid: Microsoft.ServiceBus.NamespaceManager.TopicExists*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.TopicExists
  isExternal: false
  name: TopicExists
  nameWithType: NamespaceManager.TopicExists
  fullName: Microsoft.ServiceBus.NamespaceManager.TopicExists
- uid: Microsoft.ServiceBus.NamespaceManager.TopicExistsAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.TopicExistsAsync
  isExternal: false
  name: TopicExistsAsync
  nameWithType: NamespaceManager.TopicExistsAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.TopicExistsAsync
- uid: Microsoft.ServiceBus.NamespaceManager.GetTopics*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetTopics
  isExternal: false
  name: GetTopics
  nameWithType: NamespaceManager.GetTopics
  fullName: Microsoft.ServiceBus.NamespaceManager.GetTopics
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.TopicDescription}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.TopicDescription}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TopicDescription>
  nameWithType: IEnumerable<TopicDescription>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.TopicDescription>
  nameWithType.vb: IEnumerable(Of TopicDescription)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.TopicDescription)
  name.vb: IEnumerable(Of TopicDescription)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.TopicDescription
    name: TopicDescription
    nameWithType: TopicDescription
    fullName: Microsoft.ServiceBus.Messaging.TopicDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.TopicDescription
    name: TopicDescription
    nameWithType: TopicDescription
    fullName: Microsoft.ServiceBus.Messaging.TopicDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.GetTopicsAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetTopicsAsync
  isExternal: false
  name: GetTopicsAsync
  nameWithType: NamespaceManager.GetTopicsAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetTopicsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.TopicDescription}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.TopicDescription}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<TopicDescription>>
  nameWithType: Task<IEnumerable<TopicDescription>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.TopicDescription>>
  nameWithType.vb: Task(Of IEnumerable(Of TopicDescription))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.TopicDescription))
  name.vb: Task(Of IEnumerable(Of TopicDescription))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.TopicDescription
    name: TopicDescription
    nameWithType: TopicDescription
    fullName: Microsoft.ServiceBus.Messaging.TopicDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.TopicDescription
    name: TopicDescription
    nameWithType: TopicDescription
    fullName: Microsoft.ServiceBus.Messaging.TopicDescription
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
  commentId: T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: ConsumerGroupDescription
  nameWithType: ConsumerGroupDescription
  fullName: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
- uid: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup
  isExternal: false
  name: CreateConsumerGroup
  nameWithType: NamespaceManager.CreateConsumerGroup
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup
- uid: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(System.String,System.String)
- uid: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupAsync
  isExternal: false
  name: CreateConsumerGroupAsync
  nameWithType: NamespaceManager.CreateConsumerGroupAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.ConsumerGroupDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.ConsumerGroupDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ConsumerGroupDescription>
  nameWithType: Task<ConsumerGroupDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.ConsumerGroupDescription>
  nameWithType.vb: Task(Of ConsumerGroupDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  name.vb: Task(Of ConsumerGroupDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
    name: ConsumerGroupDescription
    nameWithType: ConsumerGroupDescription
    fullName: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
    name: ConsumerGroupDescription
    nameWithType: ConsumerGroupDescription
    fullName: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
- uid: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists
  isExternal: false
  name: CreateConsumerGroupIfNotExists
  nameWithType: NamespaceManager.CreateConsumerGroupIfNotExists
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists
- uid: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(System.String,System.String)
- uid: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExistsAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExistsAsync
  isExternal: false
  name: CreateConsumerGroupIfNotExistsAsync
  nameWithType: NamespaceManager.CreateConsumerGroupIfNotExistsAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExistsAsync
- uid: Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroup*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroup
  isExternal: false
  name: DeleteConsumerGroup
  nameWithType: NamespaceManager.DeleteConsumerGroup
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroup
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroupAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroupAsync
  isExternal: false
  name: DeleteConsumerGroupAsync
  nameWithType: NamespaceManager.DeleteConsumerGroupAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroupAsync
- uid: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroup*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetConsumerGroup
  isExternal: false
  name: GetConsumerGroup
  nameWithType: NamespaceManager.GetConsumerGroup
  fullName: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroup
- uid: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupAsync
  isExternal: false
  name: GetConsumerGroupAsync
  nameWithType: NamespaceManager.GetConsumerGroupAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupAsync
- uid: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroups*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetConsumerGroups
  isExternal: false
  name: GetConsumerGroups
  nameWithType: NamespaceManager.GetConsumerGroups
  fullName: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroups
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.ConsumerGroupDescription}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.ConsumerGroupDescription}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ConsumerGroupDescription>
  nameWithType: IEnumerable<ConsumerGroupDescription>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.ConsumerGroupDescription>
  nameWithType.vb: IEnumerable(Of ConsumerGroupDescription)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)
  name.vb: IEnumerable(Of ConsumerGroupDescription)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
    name: ConsumerGroupDescription
    nameWithType: ConsumerGroupDescription
    fullName: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
    name: ConsumerGroupDescription
    nameWithType: ConsumerGroupDescription
    fullName: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupsAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupsAsync
  isExternal: false
  name: GetConsumerGroupsAsync
  nameWithType: NamespaceManager.GetConsumerGroupsAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.ConsumerGroupDescription}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.ConsumerGroupDescription}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<ConsumerGroupDescription>>
  nameWithType: Task<IEnumerable<ConsumerGroupDescription>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.ConsumerGroupDescription>>
  nameWithType.vb: Task(Of IEnumerable(Of ConsumerGroupDescription))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.ConsumerGroupDescription))
  name.vb: Task(Of IEnumerable(Of ConsumerGroupDescription))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
    name: ConsumerGroupDescription
    nameWithType: ConsumerGroupDescription
    fullName: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
    name: ConsumerGroupDescription
    nameWithType: ConsumerGroupDescription
    fullName: Microsoft.ServiceBus.Messaging.ConsumerGroupDescription
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroup*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroup
  isExternal: false
  name: UpdateConsumerGroup
  nameWithType: NamespaceManager.UpdateConsumerGroup
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroup
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroupAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroupAsync
  isExternal: false
  name: UpdateConsumerGroupAsync
  nameWithType: NamespaceManager.UpdateConsumerGroupAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroupAsync
- uid: Microsoft.ServiceBus.Messaging.SubscriptionDescription
  commentId: T:Microsoft.ServiceBus.Messaging.SubscriptionDescription
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: SubscriptionDescription
  nameWithType: SubscriptionDescription
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionDescription
- uid: Microsoft.ServiceBus.NamespaceManager.CreateSubscription*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateSubscription
  isExternal: false
  name: CreateSubscription
  nameWithType: NamespaceManager.CreateSubscription
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateSubscription
- uid: Microsoft.ServiceBus.Messaging.Filter
  commentId: T:Microsoft.ServiceBus.Messaging.Filter
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: Filter
  nameWithType: Filter
  fullName: Microsoft.ServiceBus.Messaging.Filter
- uid: Microsoft.ServiceBus.Messaging.RuleDescription
  commentId: T:Microsoft.ServiceBus.Messaging.RuleDescription
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: RuleDescription
  nameWithType: RuleDescription
  fullName: Microsoft.ServiceBus.Messaging.RuleDescription
- uid: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync
  isExternal: false
  name: CreateSubscriptionAsync
  nameWithType: NamespaceManager.CreateSubscriptionAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.SubscriptionDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.SubscriptionDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<SubscriptionDescription>
  nameWithType: Task<SubscriptionDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.SubscriptionDescription>
  nameWithType.vb: Task(Of SubscriptionDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  name.vb: Task(Of SubscriptionDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.SubscriptionDescription
    name: SubscriptionDescription
    nameWithType: SubscriptionDescription
    fullName: Microsoft.ServiceBus.Messaging.SubscriptionDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.SubscriptionDescription
    name: SubscriptionDescription
    nameWithType: SubscriptionDescription
    fullName: Microsoft.ServiceBus.Messaging.SubscriptionDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateSubscription*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.UpdateSubscription
  isExternal: false
  name: UpdateSubscription
  nameWithType: NamespaceManager.UpdateSubscription
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateSubscription
- uid: Microsoft.ServiceBus.NamespaceManager.UpdateSubscriptionAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.UpdateSubscriptionAsync
  isExternal: false
  name: UpdateSubscriptionAsync
  nameWithType: NamespaceManager.UpdateSubscriptionAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.UpdateSubscriptionAsync
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteSubscription*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.DeleteSubscription
  isExternal: false
  name: DeleteSubscription
  nameWithType: NamespaceManager.DeleteSubscription
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteSubscription
- uid: Microsoft.ServiceBus.NamespaceManager.DeleteSubscriptionAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.DeleteSubscriptionAsync
  isExternal: false
  name: DeleteSubscriptionAsync
  nameWithType: NamespaceManager.DeleteSubscriptionAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.DeleteSubscriptionAsync
- uid: Microsoft.ServiceBus.NamespaceManager.GetSubscription*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetSubscription
  isExternal: false
  name: GetSubscription
  nameWithType: NamespaceManager.GetSubscription
  fullName: Microsoft.ServiceBus.NamespaceManager.GetSubscription
- uid: Microsoft.ServiceBus.NamespaceManager.GetSubscriptionAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetSubscriptionAsync
  isExternal: false
  name: GetSubscriptionAsync
  nameWithType: NamespaceManager.GetSubscriptionAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetSubscriptionAsync
- uid: Microsoft.ServiceBus.NamespaceManager.SubscriptionExists*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.SubscriptionExists
  isExternal: false
  name: SubscriptionExists
  nameWithType: NamespaceManager.SubscriptionExists
  fullName: Microsoft.ServiceBus.NamespaceManager.SubscriptionExists
- uid: Microsoft.ServiceBus.NamespaceManager.SubscriptionExistsAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.SubscriptionExistsAsync
  isExternal: false
  name: SubscriptionExistsAsync
  nameWithType: NamespaceManager.SubscriptionExistsAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.SubscriptionExistsAsync
- uid: Microsoft.ServiceBus.NamespaceManager.GetSubscriptions*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetSubscriptions
  isExternal: false
  name: GetSubscriptions
  nameWithType: NamespaceManager.GetSubscriptions
  fullName: Microsoft.ServiceBus.NamespaceManager.GetSubscriptions
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.SubscriptionDescription}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.SubscriptionDescription}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SubscriptionDescription>
  nameWithType: IEnumerable<SubscriptionDescription>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.SubscriptionDescription>
  nameWithType.vb: IEnumerable(Of SubscriptionDescription)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.SubscriptionDescription)
  name.vb: IEnumerable(Of SubscriptionDescription)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.SubscriptionDescription
    name: SubscriptionDescription
    nameWithType: SubscriptionDescription
    fullName: Microsoft.ServiceBus.Messaging.SubscriptionDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.SubscriptionDescription
    name: SubscriptionDescription
    nameWithType: SubscriptionDescription
    fullName: Microsoft.ServiceBus.Messaging.SubscriptionDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.GetSubscriptionsAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetSubscriptionsAsync
  isExternal: false
  name: GetSubscriptionsAsync
  nameWithType: NamespaceManager.GetSubscriptionsAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetSubscriptionsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.SubscriptionDescription}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.SubscriptionDescription}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<SubscriptionDescription>>
  nameWithType: Task<IEnumerable<SubscriptionDescription>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.SubscriptionDescription>>
  nameWithType.vb: Task(Of IEnumerable(Of SubscriptionDescription))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.SubscriptionDescription))
  name.vb: Task(Of IEnumerable(Of SubscriptionDescription))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.SubscriptionDescription
    name: SubscriptionDescription
    nameWithType: SubscriptionDescription
    fullName: Microsoft.ServiceBus.Messaging.SubscriptionDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.SubscriptionDescription
    name: SubscriptionDescription
    nameWithType: SubscriptionDescription
    fullName: Microsoft.ServiceBus.Messaging.SubscriptionDescription
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.PartitionDescription
  commentId: T:Microsoft.ServiceBus.Messaging.PartitionDescription
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: PartitionDescription
  nameWithType: PartitionDescription
  fullName: Microsoft.ServiceBus.Messaging.PartitionDescription
- uid: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition
  isExternal: false
  name: GetEventHubPartition
  nameWithType: NamespaceManager.GetEventHubPartition
  fullName: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition
- uid: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition(System.String,System.String)
- uid: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartitionAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetEventHubPartitionAsync
  isExternal: false
  name: GetEventHubPartitionAsync
  nameWithType: NamespaceManager.GetEventHubPartitionAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetEventHubPartitionAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.PartitionDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.PartitionDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PartitionDescription>
  nameWithType: Task<PartitionDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.PartitionDescription>
  nameWithType.vb: Task(Of PartitionDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.PartitionDescription)
  name.vb: Task(Of PartitionDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.PartitionDescription
    name: PartitionDescription
    nameWithType: PartitionDescription
    fullName: Microsoft.ServiceBus.Messaging.PartitionDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.PartitionDescription
    name: PartitionDescription
    nameWithType: PartitionDescription
    fullName: Microsoft.ServiceBus.Messaging.PartitionDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.GetRules*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetRules
  isExternal: false
  name: GetRules
  nameWithType: NamespaceManager.GetRules
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRules
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RuleDescription}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RuleDescription}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<RuleDescription>
  nameWithType: IEnumerable<RuleDescription>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.RuleDescription>
  nameWithType.vb: IEnumerable(Of RuleDescription)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.RuleDescription)
  name.vb: IEnumerable(Of RuleDescription)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.RuleDescription
    name: RuleDescription
    nameWithType: RuleDescription
    fullName: Microsoft.ServiceBus.Messaging.RuleDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.RuleDescription
    name: RuleDescription
    nameWithType: RuleDescription
    fullName: Microsoft.ServiceBus.Messaging.RuleDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.NamespaceManager.GetRulesAsync*
  commentId: Overload:Microsoft.ServiceBus.NamespaceManager.GetRulesAsync
  isExternal: false
  name: GetRulesAsync
  nameWithType: NamespaceManager.GetRulesAsync
  fullName: Microsoft.ServiceBus.NamespaceManager.GetRulesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RuleDescription}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.RuleDescription}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<RuleDescription>>
  nameWithType: Task<IEnumerable<RuleDescription>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.RuleDescription>>
  nameWithType.vb: Task(Of IEnumerable(Of RuleDescription))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.RuleDescription))
  name.vb: Task(Of IEnumerable(Of RuleDescription))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.RuleDescription
    name: RuleDescription
    nameWithType: RuleDescription
    fullName: Microsoft.ServiceBus.Messaging.RuleDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.RuleDescription
    name: RuleDescription
    nameWithType: RuleDescription
    fullName: Microsoft.ServiceBus.Messaging.RuleDescription
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
