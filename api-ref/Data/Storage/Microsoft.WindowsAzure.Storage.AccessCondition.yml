### YamlMime:ManagedReference
items:
- uid: Microsoft.WindowsAzure.Storage.AccessCondition
  commentId: T:Microsoft.WindowsAzure.Storage.AccessCondition
  id: AccessCondition
  parent: Microsoft.WindowsAzure.Storage
  children:
  - Microsoft.WindowsAzure.Storage.AccessCondition.GenerateEmptyCondition
  - Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfAppendPositionEqualCondition(System.Int64)
  - Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfExistsCondition
  - Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfMatchCondition(System.String)
  - Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfMaxSizeLessThanOrEqualCondition(System.Int64)
  - Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfModifiedSinceCondition(System.DateTimeOffset)
  - Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNoneMatchCondition(System.String)
  - Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNotExistsCondition
  - Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNotModifiedSinceCondition(System.DateTimeOffset)
  - Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberEqualCondition(System.Int64)
  - Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberLessThanCondition(System.Int64)
  - Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberLessThanOrEqualCondition(System.Int64)
  - Microsoft.WindowsAzure.Storage.AccessCondition.GenerateLeaseCondition(System.String)
  - Microsoft.WindowsAzure.Storage.AccessCondition.IfAppendPositionEqual
  - Microsoft.WindowsAzure.Storage.AccessCondition.IfMatchETag
  - Microsoft.WindowsAzure.Storage.AccessCondition.IfMaxSizeLessThanOrEqual
  - Microsoft.WindowsAzure.Storage.AccessCondition.IfModifiedSinceTime
  - Microsoft.WindowsAzure.Storage.AccessCondition.IfNoneMatchETag
  - Microsoft.WindowsAzure.Storage.AccessCondition.IfNotModifiedSinceTime
  - Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberEqual
  - Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberLessThan
  - Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberLessThanOrEqual
  - Microsoft.WindowsAzure.Storage.AccessCondition.LeaseId
  langs:
  - csharp
  - vb
  name: AccessCondition
  nameWithType: AccessCondition
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition
  type: Class
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: AccessCondition
    path: Lib/Common/AccessCondition.cs
    startLine: 25
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nRepresents a set of access conditions to be used for operations against the storage services. \n"
  example: []
  syntax:
    content: public sealed class AccessCondition
    content.vb: Public NotInheritable Class AccessCondition
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfMatchETag
  commentId: P:Microsoft.WindowsAzure.Storage.AccessCondition.IfMatchETag
  id: IfMatchETag
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: IfMatchETag
  nameWithType: AccessCondition.IfMatchETag
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfMatchETag
  type: Property
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: IfMatchETag
    path: Lib/Common/AccessCondition.cs
    startLine: 41
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nGets or sets an ETag value for a condition specifying that the given ETag must match the ETag of the specified resource.\n"
  example: []
  syntax:
    content: public string IfMatchETag { get; set; }
    content.vb: Public Property IfMatchETag As String
    parameters: []
    return:
      type: System.String
      description: A string containing an ETag value, or <code>"*"</code> to match any ETag. If <code>null</code>, no condition exists.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.IfMatchETag*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfNoneMatchETag
  commentId: P:Microsoft.WindowsAzure.Storage.AccessCondition.IfNoneMatchETag
  id: IfNoneMatchETag
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: IfNoneMatchETag
  nameWithType: AccessCondition.IfNoneMatchETag
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfNoneMatchETag
  type: Property
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: IfNoneMatchETag
    path: Lib/Common/AccessCondition.cs
    startLine: 51
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nGets or sets an ETag value for a condition specifying that the given ETag must not match the ETag of the specified resource.\n"
  example: []
  syntax:
    content: public string IfNoneMatchETag { get; set; }
    content.vb: Public Property IfNoneMatchETag As String
    parameters: []
    return:
      type: System.String
      description: A string containing an ETag value, or <code>"*"</code> to match any ETag. If <code>null</code>, no condition exists.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.IfNoneMatchETag*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfModifiedSinceTime
  commentId: P:Microsoft.WindowsAzure.Storage.AccessCondition.IfModifiedSinceTime
  id: IfModifiedSinceTime
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: IfModifiedSinceTime
  nameWithType: AccessCondition.IfModifiedSinceTime
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfModifiedSinceTime
  type: Property
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: IfModifiedSinceTime
    path: Lib/Common/AccessCondition.cs
    startLine: 61
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nGets or sets a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> value for a condition specifying a time since which a resource has been modified.\n"
  example: []
  syntax:
    content: public DateTimeOffset? IfModifiedSinceTime { get; set; }
    content.vb: Public Property IfModifiedSinceTime As DateTimeOffset?
    parameters: []
    return:
      type: System.Nullable{System.DateTimeOffset}
      description: A <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> value specified in UTC, or <code>null</code> if no condition exists.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.IfModifiedSinceTime*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfNotModifiedSinceTime
  commentId: P:Microsoft.WindowsAzure.Storage.AccessCondition.IfNotModifiedSinceTime
  id: IfNotModifiedSinceTime
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: IfNotModifiedSinceTime
  nameWithType: AccessCondition.IfNotModifiedSinceTime
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfNotModifiedSinceTime
  type: Property
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: IfNotModifiedSinceTime
    path: Lib/Common/AccessCondition.cs
    startLine: 78
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nGets or sets a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> value for a condition specifying a time since which a resource has not been modified.\n"
  example: []
  syntax:
    content: public DateTimeOffset? IfNotModifiedSinceTime { get; set; }
    content.vb: Public Property IfNotModifiedSinceTime As DateTimeOffset?
    parameters: []
    return:
      type: System.Nullable{System.DateTimeOffset}
      description: A <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> value specified in UTC, or <code>null</code> if no condition exists.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.IfNotModifiedSinceTime*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfMaxSizeLessThanOrEqual
  commentId: P:Microsoft.WindowsAzure.Storage.AccessCondition.IfMaxSizeLessThanOrEqual
  id: IfMaxSizeLessThanOrEqual
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: IfMaxSizeLessThanOrEqual
  nameWithType: AccessCondition.IfMaxSizeLessThanOrEqual
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfMaxSizeLessThanOrEqual
  type: Property
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: IfMaxSizeLessThanOrEqual
    path: Lib/Common/AccessCondition.cs
    startLine: 97
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nGets or sets a value for a condition that specifies the maximum size allowed for an append blob when a new block is committed. The append\nwill succeed only if the size of the blob after the append operation is less than or equal to the specified size.\n"
  remarks: This condition only applies to append blobs.
  example: []
  syntax:
    content: public long ? IfMaxSizeLessThanOrEqual { get; set; }
    content.vb: Public Property IfMaxSizeLessThanOrEqual As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: The maximum size in bytes, or <code>null</code> if no value is set.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.IfMaxSizeLessThanOrEqual*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfAppendPositionEqual
  commentId: P:Microsoft.WindowsAzure.Storage.AccessCondition.IfAppendPositionEqual
  id: IfAppendPositionEqual
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: IfAppendPositionEqual
  nameWithType: AccessCondition.IfAppendPositionEqual
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfAppendPositionEqual
  type: Property
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: IfAppendPositionEqual
    path: Lib/Common/AccessCondition.cs
    startLine: 109
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nGets or sets a value for a condition specifying the byte offset to check for when committing a block to an append blob.\nThe append will succeed only if the end position is equal to this number. \n"
  remarks: This condition only applies to append blobs.
  example: []
  syntax:
    content: public long ? IfAppendPositionEqual { get; set; }
    content.vb: Public Property IfAppendPositionEqual As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: An append position number, or <code>null</code> if no value is set.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.IfAppendPositionEqual*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberLessThanOrEqual
  commentId: P:Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberLessThanOrEqual
  id: IfSequenceNumberLessThanOrEqual
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: IfSequenceNumberLessThanOrEqual
  nameWithType: AccessCondition.IfSequenceNumberLessThanOrEqual
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberLessThanOrEqual
  type: Property
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: IfSequenceNumberLessThanOrEqual
    path: Lib/Common/AccessCondition.cs
    startLine: 120
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nGets or sets a value for a condition specifying that the current sequence number must be less than or equal to the specified value.\n"
  remarks: This condition only applies to page blobs.
  example: []
  syntax:
    content: public long ? IfSequenceNumberLessThanOrEqual { get; set; }
    content.vb: Public Property IfSequenceNumberLessThanOrEqual As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: A sequence number, or <code>null</code> if no condition exists.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberLessThanOrEqual*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberLessThan
  commentId: P:Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberLessThan
  id: IfSequenceNumberLessThan
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: IfSequenceNumberLessThan
  nameWithType: AccessCondition.IfSequenceNumberLessThan
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberLessThan
  type: Property
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: IfSequenceNumberLessThan
    path: Lib/Common/AccessCondition.cs
    startLine: 131
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nGets or sets a value for a condition specifying that the current sequence number must be less than the specified value.\n"
  remarks: This condition only applies to page blobs.
  example: []
  syntax:
    content: public long ? IfSequenceNumberLessThan { get; set; }
    content.vb: Public Property IfSequenceNumberLessThan As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: A sequence number, or <code>null</code> if no condition exists.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberLessThan*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberEqual
  commentId: P:Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberEqual
  id: IfSequenceNumberEqual
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: IfSequenceNumberEqual
  nameWithType: AccessCondition.IfSequenceNumberEqual
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberEqual
  type: Property
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: IfSequenceNumberEqual
    path: Lib/Common/AccessCondition.cs
    startLine: 142
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nGets or sets a value for a condition specifying that the current sequence number must be equal to the specified value.\n"
  remarks: This condition only applies to page blobs.
  example: []
  syntax:
    content: public long ? IfSequenceNumberEqual { get; set; }
    content.vb: Public Property IfSequenceNumberEqual As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: A sequence number, or <code>null</code> if no condition exists.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberEqual*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.LeaseId
  commentId: P:Microsoft.WindowsAzure.Storage.AccessCondition.LeaseId
  id: LeaseId
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: LeaseId
  nameWithType: AccessCondition.LeaseId
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.LeaseId
  type: Property
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: LeaseId
    path: Lib/Common/AccessCondition.cs
    startLine: 152
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nGets or sets a lease ID that must match the lease on a resource.\n"
  example: []
  syntax:
    content: public string LeaseId { get; set; }
    content.vb: Public Property LeaseId As String
    parameters: []
    return:
      type: System.String
      description: A string containing a lease ID, or <code>null</code> if no condition exists.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.LeaseId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateEmptyCondition
  commentId: M:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateEmptyCondition
  id: GenerateEmptyCondition
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateEmptyCondition()
  nameWithType: AccessCondition.GenerateEmptyCondition()
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateEmptyCondition()
  type: Method
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: GenerateEmptyCondition
    path: Lib/Common/AccessCondition.cs
    startLine: 177
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nConstructs an empty access condition.\n"
  example: []
  syntax:
    content: public static AccessCondition GenerateEmptyCondition()
    content.vb: Public Shared Function GenerateEmptyCondition As AccessCondition
    return:
      type: Microsoft.WindowsAzure.Storage.AccessCondition
      description: An empty <xref href="Microsoft.WindowsAzure.Storage.AccessCondition" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateEmptyCondition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNotExistsCondition
  commentId: M:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNotExistsCondition
  id: GenerateIfNotExistsCondition
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateIfNotExistsCondition()
  nameWithType: AccessCondition.GenerateIfNotExistsCondition()
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNotExistsCondition()
  type: Method
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: GenerateIfNotExistsCondition
    path: Lib/Common/AccessCondition.cs
    startLine: 187
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nConstructs an access condition such that an operation will be performed only if the resource does not exist.\n"
  remarks: Setting this access condition modifies the request to include the HTTP <em>If-None-Match</em> conditional header.
  example: []
  syntax:
    content: public static AccessCondition GenerateIfNotExistsCondition()
    content.vb: Public Shared Function GenerateIfNotExistsCondition As AccessCondition
    return:
      type: Microsoft.WindowsAzure.Storage.AccessCondition
      description: An <xref href="Microsoft.WindowsAzure.Storage.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents a condition where a resource does not exist.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNotExistsCondition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfExistsCondition
  commentId: M:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfExistsCondition
  id: GenerateIfExistsCondition
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateIfExistsCondition()
  nameWithType: AccessCondition.GenerateIfExistsCondition()
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfExistsCondition()
  type: Method
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: GenerateIfExistsCondition
    path: Lib/Common/AccessCondition.cs
    startLine: 197
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nConstructs an access condition such that an operation will be performed only if the resource exists.\n"
  remarks: Setting this access condition modifies the request to include the HTTP <em>If-Match</em> conditional header.
  example: []
  syntax:
    content: public static AccessCondition GenerateIfExistsCondition()
    content.vb: Public Shared Function GenerateIfExistsCondition As AccessCondition
    return:
      type: Microsoft.WindowsAzure.Storage.AccessCondition
      description: An <xref href="Microsoft.WindowsAzure.Storage.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents a condition where a resource exists.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfExistsCondition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfMatchCondition(System.String)
  commentId: M:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfMatchCondition(System.String)
  id: GenerateIfMatchCondition(System.String)
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateIfMatchCondition(String)
  nameWithType: AccessCondition.GenerateIfMatchCondition(String)
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfMatchCondition(System.String)
  type: Method
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: GenerateIfMatchCondition
    path: Lib/Common/AccessCondition.cs
    startLine: 208
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nConstructs an access condition such that an operation will be performed only if the resource's ETag value\nmatches the specified ETag value.\n"
  example: []
  syntax:
    content: public static AccessCondition GenerateIfMatchCondition(string etag)
    content.vb: Public Shared Function GenerateIfMatchCondition(etag As String) As AccessCondition
    parameters:
    - id: etag
      type: System.String
      description: The ETag value to check against the resource's ETag.
    return:
      type: Microsoft.WindowsAzure.Storage.AccessCondition
      description: An <xref href="Microsoft.WindowsAzure.Storage.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents the If-Match condition.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfMatchCondition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfModifiedSinceCondition(System.DateTimeOffset)
  commentId: M:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfModifiedSinceCondition(System.DateTimeOffset)
  id: GenerateIfModifiedSinceCondition(System.DateTimeOffset)
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateIfModifiedSinceCondition(DateTimeOffset)
  nameWithType: AccessCondition.GenerateIfModifiedSinceCondition(DateTimeOffset)
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfModifiedSinceCondition(System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: GenerateIfModifiedSinceCondition
    path: Lib/Common/AccessCondition.cs
    startLine: 219
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nConstructs an access condition such that an operation will be performed only if the resource has been\nmodified since the specified time.\n"
  example: []
  syntax:
    content: public static AccessCondition GenerateIfModifiedSinceCondition(DateTimeOffset modifiedTime)
    content.vb: Public Shared Function GenerateIfModifiedSinceCondition(modifiedTime As DateTimeOffset) As AccessCondition
    parameters:
    - id: modifiedTime
      type: System.DateTimeOffset
      description: A <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> value specifying the time since which the resource must have been modified.
    return:
      type: Microsoft.WindowsAzure.Storage.AccessCondition
      description: An <xref href="Microsoft.WindowsAzure.Storage.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents the If-Modified-Since condition.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfModifiedSinceCondition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNoneMatchCondition(System.String)
  commentId: M:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNoneMatchCondition(System.String)
  id: GenerateIfNoneMatchCondition(System.String)
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateIfNoneMatchCondition(String)
  nameWithType: AccessCondition.GenerateIfNoneMatchCondition(String)
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNoneMatchCondition(System.String)
  type: Method
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: GenerateIfNoneMatchCondition
    path: Lib/Common/AccessCondition.cs
    startLine: 233
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nConstructs an access condition such that an operation will be performed only if the resource's ETag value\ndoes not match the specified ETag value.\n"
  remarks: "\nIf <code>\"*\"</code> is specified for the <em>etag</em> parameter, then this condition requires that the resource does not exist.\n"
  example: []
  syntax:
    content: public static AccessCondition GenerateIfNoneMatchCondition(string etag)
    content.vb: Public Shared Function GenerateIfNoneMatchCondition(etag As String) As AccessCondition
    parameters:
    - id: etag
      type: System.String
      description: The ETag value to check against the resource's ETag, or <code>"*"</code> to require that the resource does not exist.
    return:
      type: Microsoft.WindowsAzure.Storage.AccessCondition
      description: An <xref href="Microsoft.WindowsAzure.Storage.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents the If-None-Match condition.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNoneMatchCondition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNotModifiedSinceCondition(System.DateTimeOffset)
  commentId: M:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNotModifiedSinceCondition(System.DateTimeOffset)
  id: GenerateIfNotModifiedSinceCondition(System.DateTimeOffset)
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateIfNotModifiedSinceCondition(DateTimeOffset)
  nameWithType: AccessCondition.GenerateIfNotModifiedSinceCondition(DateTimeOffset)
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNotModifiedSinceCondition(System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: GenerateIfNotModifiedSinceCondition
    path: Lib/Common/AccessCondition.cs
    startLine: 245
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nConstructs an access condition such that an operation will be performed only if the resource has not been\nmodified since the specified time.\n"
  example: []
  syntax:
    content: public static AccessCondition GenerateIfNotModifiedSinceCondition(DateTimeOffset modifiedTime)
    content.vb: Public Shared Function GenerateIfNotModifiedSinceCondition(modifiedTime As DateTimeOffset) As AccessCondition
    parameters:
    - id: modifiedTime
      type: System.DateTimeOffset
      description: A <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> value specifying the time since which the resource must not have been modified.
    return:
      type: Microsoft.WindowsAzure.Storage.AccessCondition
      description: An <xref href="Microsoft.WindowsAzure.Storage.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents the If-Unmodified-Since condition.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNotModifiedSinceCondition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfMaxSizeLessThanOrEqualCondition(System.Int64)
  commentId: M:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfMaxSizeLessThanOrEqualCondition(System.Int64)
  id: GenerateIfMaxSizeLessThanOrEqualCondition(System.Int64)
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateIfMaxSizeLessThanOrEqualCondition(Int64)
  nameWithType: AccessCondition.GenerateIfMaxSizeLessThanOrEqualCondition(Int64)
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfMaxSizeLessThanOrEqualCondition(System.Int64)
  type: Method
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: GenerateIfMaxSizeLessThanOrEqualCondition
    path: Lib/Common/AccessCondition.cs
    startLine: 256
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nConstructs an access condition such that an operation will be performed only if the size of the append blob after committing the block is less\nthan or equal to the specified value.\n"
  example: []
  syntax:
    content: public static AccessCondition GenerateIfMaxSizeLessThanOrEqualCondition(long maxSize)
    content.vb: Public Shared Function GenerateIfMaxSizeLessThanOrEqualCondition(maxSize As Long) As AccessCondition
    parameters:
    - id: maxSize
      type: System.Int64
      description: An integer specifying the maximum allowed size of the blob, in bytes, when committing a new block.
    return:
      type: Microsoft.WindowsAzure.Storage.AccessCondition
      description: An <xref href="Microsoft.WindowsAzure.Storage.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents the maximum allowed size.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfMaxSizeLessThanOrEqualCondition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfAppendPositionEqualCondition(System.Int64)
  commentId: M:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfAppendPositionEqualCondition(System.Int64)
  id: GenerateIfAppendPositionEqualCondition(System.Int64)
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateIfAppendPositionEqualCondition(Int64)
  nameWithType: AccessCondition.GenerateIfAppendPositionEqualCondition(Int64)
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfAppendPositionEqualCondition(System.Int64)
  type: Method
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: GenerateIfAppendPositionEqualCondition
    path: Lib/Common/AccessCondition.cs
    startLine: 266
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nConstructs an access condition such that an operation will be performed only if the end position of the append blob is equal to the specified value.\n"
  example: []
  syntax:
    content: public static AccessCondition GenerateIfAppendPositionEqualCondition(long appendPosition)
    content.vb: Public Shared Function GenerateIfAppendPositionEqualCondition(appendPosition As Long) As AccessCondition
    parameters:
    - id: appendPosition
      type: System.Int64
      description: An integer specifying the offset to compare to the current end position of the blob.
    return:
      type: Microsoft.WindowsAzure.Storage.AccessCondition
      description: An <xref href="Microsoft.WindowsAzure.Storage.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents the offset to compare.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfAppendPositionEqualCondition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberLessThanOrEqualCondition(System.Int64)
  commentId: M:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberLessThanOrEqualCondition(System.Int64)
  id: GenerateIfSequenceNumberLessThanOrEqualCondition(System.Int64)
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateIfSequenceNumberLessThanOrEqualCondition(Int64)
  nameWithType: AccessCondition.GenerateIfSequenceNumberLessThanOrEqualCondition(Int64)
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberLessThanOrEqualCondition(System.Int64)
  type: Method
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: GenerateIfSequenceNumberLessThanOrEqualCondition
    path: Lib/Common/AccessCondition.cs
    startLine: 277
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nConstructs an access condition such that an operation will be performed only if resource's current sequence\nnumber is less than or equal to the specified value.\n"
  example: []
  syntax:
    content: public static AccessCondition GenerateIfSequenceNumberLessThanOrEqualCondition(long sequenceNumber)
    content.vb: Public Shared Function GenerateIfSequenceNumberLessThanOrEqualCondition(sequenceNumber As Long) As AccessCondition
    parameters:
    - id: sequenceNumber
      type: System.Int64
      description: The value to compare to the current sequence number.
    return:
      type: Microsoft.WindowsAzure.Storage.AccessCondition
      description: An <xref href="Microsoft.WindowsAzure.Storage.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents the If-Sequence-Number-LE condition.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberLessThanOrEqualCondition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberLessThanCondition(System.Int64)
  commentId: M:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberLessThanCondition(System.Int64)
  id: GenerateIfSequenceNumberLessThanCondition(System.Int64)
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateIfSequenceNumberLessThanCondition(Int64)
  nameWithType: AccessCondition.GenerateIfSequenceNumberLessThanCondition(Int64)
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberLessThanCondition(System.Int64)
  type: Method
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: GenerateIfSequenceNumberLessThanCondition
    path: Lib/Common/AccessCondition.cs
    startLine: 288
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nConstructs an access condition such that an operation will be performed only if resource's current sequence\nnumber is less than the specified value.\n"
  example: []
  syntax:
    content: public static AccessCondition GenerateIfSequenceNumberLessThanCondition(long sequenceNumber)
    content.vb: Public Shared Function GenerateIfSequenceNumberLessThanCondition(sequenceNumber As Long) As AccessCondition
    parameters:
    - id: sequenceNumber
      type: System.Int64
      description: The value to compare to the current sequence number.
    return:
      type: Microsoft.WindowsAzure.Storage.AccessCondition
      description: An <xref href="Microsoft.WindowsAzure.Storage.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents the If-Sequence-Number-LT condition.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberLessThanCondition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberEqualCondition(System.Int64)
  commentId: M:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberEqualCondition(System.Int64)
  id: GenerateIfSequenceNumberEqualCondition(System.Int64)
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateIfSequenceNumberEqualCondition(Int64)
  nameWithType: AccessCondition.GenerateIfSequenceNumberEqualCondition(Int64)
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberEqualCondition(System.Int64)
  type: Method
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: GenerateIfSequenceNumberEqualCondition
    path: Lib/Common/AccessCondition.cs
    startLine: 299
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nConstructs an access condition such that an operation will be performed only if resource's current sequence\nnumber is equal to the specified value.\n"
  example: []
  syntax:
    content: public static AccessCondition GenerateIfSequenceNumberEqualCondition(long sequenceNumber)
    content.vb: Public Shared Function GenerateIfSequenceNumberEqualCondition(sequenceNumber As Long) As AccessCondition
    parameters:
    - id: sequenceNumber
      type: System.Int64
      description: The value to compare to the current sequence number.
    return:
      type: Microsoft.WindowsAzure.Storage.AccessCondition
      description: An <xref href="Microsoft.WindowsAzure.Storage.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents the If-Sequence-Number-EQ condition.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberEqualCondition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateLeaseCondition(System.String)
  commentId: M:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateLeaseCondition(System.String)
  id: GenerateLeaseCondition(System.String)
  parent: Microsoft.WindowsAzure.Storage.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateLeaseCondition(String)
  nameWithType: AccessCondition.GenerateLeaseCondition(String)
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateLeaseCondition(System.String)
  type: Method
  source:
    remote:
      path: Lib/Common/AccessCondition.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: GenerateLeaseCondition
    path: Lib/Common/AccessCondition.cs
    startLine: 310
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage
  summary: "\nConstructs an access condition such that an operation will be performed only if the lease ID on the\nresource matches the specified lease ID.\n"
  example: []
  syntax:
    content: public static AccessCondition GenerateLeaseCondition(string leaseId)
    content.vb: Public Shared Function GenerateLeaseCondition(leaseId As String) As AccessCondition
    parameters:
    - id: leaseId
      type: System.String
      description: The lease ID to compare to the lease ID of the resource.
    return:
      type: Microsoft.WindowsAzure.Storage.AccessCondition
      description: An <xref href="Microsoft.WindowsAzure.Storage.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents the lease condition.
  overload: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateLeaseCondition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.WindowsAzure.Storage
  commentId: N:Microsoft.WindowsAzure.Storage
  isExternal: false
  name: Microsoft.WindowsAzure.Storage
  nameWithType: Microsoft.WindowsAzure.Storage
  fullName: Microsoft.WindowsAzure.Storage
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfMatchETag*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.IfMatchETag
  isExternal: false
  name: IfMatchETag
  nameWithType: AccessCondition.IfMatchETag
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfMatchETag
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfNoneMatchETag*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.IfNoneMatchETag
  isExternal: false
  name: IfNoneMatchETag
  nameWithType: AccessCondition.IfNoneMatchETag
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfNoneMatchETag
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfModifiedSinceTime*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.IfModifiedSinceTime
  isExternal: false
  name: IfModifiedSinceTime
  nameWithType: AccessCondition.IfModifiedSinceTime
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfModifiedSinceTime
- uid: System.Nullable{System.DateTimeOffset}
  commentId: T:System.Nullable{System.DateTimeOffset}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<System.DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullname.vb: System.Nullable(Of System.DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfNotModifiedSinceTime*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.IfNotModifiedSinceTime
  isExternal: false
  name: IfNotModifiedSinceTime
  nameWithType: AccessCondition.IfNotModifiedSinceTime
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfNotModifiedSinceTime
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfMaxSizeLessThanOrEqual*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.IfMaxSizeLessThanOrEqual
  isExternal: false
  name: IfMaxSizeLessThanOrEqual
  nameWithType: AccessCondition.IfMaxSizeLessThanOrEqual
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfMaxSizeLessThanOrEqual
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfAppendPositionEqual*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.IfAppendPositionEqual
  isExternal: false
  name: IfAppendPositionEqual
  nameWithType: AccessCondition.IfAppendPositionEqual
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfAppendPositionEqual
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberLessThanOrEqual*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberLessThanOrEqual
  isExternal: false
  name: IfSequenceNumberLessThanOrEqual
  nameWithType: AccessCondition.IfSequenceNumberLessThanOrEqual
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberLessThanOrEqual
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberLessThan*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberLessThan
  isExternal: false
  name: IfSequenceNumberLessThan
  nameWithType: AccessCondition.IfSequenceNumberLessThan
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberLessThan
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberEqual*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberEqual
  isExternal: false
  name: IfSequenceNumberEqual
  nameWithType: AccessCondition.IfSequenceNumberEqual
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.IfSequenceNumberEqual
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.LeaseId*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.LeaseId
  isExternal: false
  name: LeaseId
  nameWithType: AccessCondition.LeaseId
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.LeaseId
- uid: Microsoft.WindowsAzure.Storage.AccessCondition
  commentId: T:Microsoft.WindowsAzure.Storage.AccessCondition
  parent: Microsoft.WindowsAzure.Storage
  isExternal: false
  name: AccessCondition
  nameWithType: AccessCondition
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateEmptyCondition*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateEmptyCondition
  isExternal: false
  name: GenerateEmptyCondition
  nameWithType: AccessCondition.GenerateEmptyCondition
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateEmptyCondition
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNotExistsCondition*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNotExistsCondition
  isExternal: false
  name: GenerateIfNotExistsCondition
  nameWithType: AccessCondition.GenerateIfNotExistsCondition
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNotExistsCondition
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfExistsCondition*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfExistsCondition
  isExternal: false
  name: GenerateIfExistsCondition
  nameWithType: AccessCondition.GenerateIfExistsCondition
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfExistsCondition
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfMatchCondition*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfMatchCondition
  isExternal: false
  name: GenerateIfMatchCondition
  nameWithType: AccessCondition.GenerateIfMatchCondition
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfMatchCondition
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfModifiedSinceCondition*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfModifiedSinceCondition
  isExternal: false
  name: GenerateIfModifiedSinceCondition
  nameWithType: AccessCondition.GenerateIfModifiedSinceCondition
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfModifiedSinceCondition
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNoneMatchCondition*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNoneMatchCondition
  isExternal: false
  name: GenerateIfNoneMatchCondition
  nameWithType: AccessCondition.GenerateIfNoneMatchCondition
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNoneMatchCondition
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNotModifiedSinceCondition*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNotModifiedSinceCondition
  isExternal: false
  name: GenerateIfNotModifiedSinceCondition
  nameWithType: AccessCondition.GenerateIfNotModifiedSinceCondition
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfNotModifiedSinceCondition
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfMaxSizeLessThanOrEqualCondition*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfMaxSizeLessThanOrEqualCondition
  isExternal: false
  name: GenerateIfMaxSizeLessThanOrEqualCondition
  nameWithType: AccessCondition.GenerateIfMaxSizeLessThanOrEqualCondition
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfMaxSizeLessThanOrEqualCondition
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfAppendPositionEqualCondition*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfAppendPositionEqualCondition
  isExternal: false
  name: GenerateIfAppendPositionEqualCondition
  nameWithType: AccessCondition.GenerateIfAppendPositionEqualCondition
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfAppendPositionEqualCondition
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberLessThanOrEqualCondition*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberLessThanOrEqualCondition
  isExternal: false
  name: GenerateIfSequenceNumberLessThanOrEqualCondition
  nameWithType: AccessCondition.GenerateIfSequenceNumberLessThanOrEqualCondition
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberLessThanOrEqualCondition
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberLessThanCondition*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberLessThanCondition
  isExternal: false
  name: GenerateIfSequenceNumberLessThanCondition
  nameWithType: AccessCondition.GenerateIfSequenceNumberLessThanCondition
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberLessThanCondition
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberEqualCondition*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberEqualCondition
  isExternal: false
  name: GenerateIfSequenceNumberEqualCondition
  nameWithType: AccessCondition.GenerateIfSequenceNumberEqualCondition
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateIfSequenceNumberEqualCondition
- uid: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateLeaseCondition*
  commentId: Overload:Microsoft.WindowsAzure.Storage.AccessCondition.GenerateLeaseCondition
  isExternal: false
  name: GenerateLeaseCondition
  nameWithType: AccessCondition.GenerateLeaseCondition
  fullName: Microsoft.WindowsAzure.Storage.AccessCondition.GenerateLeaseCondition
