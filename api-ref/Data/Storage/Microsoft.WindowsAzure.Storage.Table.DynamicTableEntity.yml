### YamlMime:ManagedReference
items:
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  commentId: T:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  id: DynamicTableEntity
  parent: Microsoft.WindowsAzure.Storage.Table
  children:
  - Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.#ctor
  - Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.#ctor(System.String,System.String)
  - Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.#ctor(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty})
  - Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ETag
  - Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Item(System.String)
  - Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.PartitionKey
  - Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Properties
  - Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ReadEntity(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.RowKey
  - Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Timestamp
  - Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.WriteEntity(Microsoft.WindowsAzure.Storage.OperationContext)
  langs:
  - csharp
  - vb
  name: DynamicTableEntity
  nameWithType: DynamicTableEntity
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  type: Class
  source:
    remote:
      path: Lib/Common/Table/DynamicTableEntity.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: DynamicTableEntity
    path: Lib/Common/Table/DynamicTableEntity.cs
    startLine: 27
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nA <xref href=\"Microsoft.WindowsAzure.Storage.Table.ITableEntity\" data-throw-if-not-resolved=\"false\"></xref> type which allows callers direct access to the property map of the entity. \nThis class eliminates the use of reflection for serialization and deserialization.\n"
  example: []
  syntax:
    content: 'public sealed class DynamicTableEntity : ITableEntity'
    content.vb: >-
      Public NotInheritable Class DynamicTableEntity
          Implements ITableEntity
  inheritance:
  - System.Object
  implements:
  - Microsoft.WindowsAzure.Storage.Table.ITableEntity
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.#ctor
  commentId: M:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.#ctor
  id: '#ctor'
  parent: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  langs:
  - csharp
  - vb
  name: DynamicTableEntity()
  nameWithType: DynamicTableEntity.DynamicTableEntity()
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.DynamicTableEntity()
  type: Constructor
  source:
    remote:
      path: Lib/Common/Table/DynamicTableEntity.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: .ctor
    path: Lib/Common/Table/DynamicTableEntity.cs
    startLine: 32
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public DynamicTableEntity()
    content.vb: Public Sub New
  overload: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.#ctor(System.String,System.String)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  langs:
  - csharp
  - vb
  name: DynamicTableEntity(String, String)
  nameWithType: DynamicTableEntity.DynamicTableEntity(String, String)
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.DynamicTableEntity(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: Lib/Common/Table/DynamicTableEntity.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: .ctor
    path: Lib/Common/Table/DynamicTableEntity.cs
    startLine: 42
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity\" data-throw-if-not-resolved=\"false\"></xref> class with the specified partition key and row key.\n"
  example: []
  syntax:
    content: public DynamicTableEntity(string partitionKey, string rowKey)
    content.vb: Public Sub New(partitionKey As String, rowKey As String)
    parameters:
    - id: partitionKey
      type: System.String
      description: A string containing the partition key value for the entity.
    - id: rowKey
      type: System.String
      description: A string containing the row key value for the entity.
  overload: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.#ctor(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty})
  commentId: M:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.#ctor(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty})
  id: '#ctor(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty})'
  parent: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  langs:
  - csharp
  - vb
  name: DynamicTableEntity(String, String, String, IDictionary<String, EntityProperty>)
  nameWithType: DynamicTableEntity.DynamicTableEntity(String, String, String, IDictionary<String, EntityProperty>)
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.DynamicTableEntity(System.String, System.String, System.String, System.Collections.Generic.IDictionary<System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty>)
  type: Constructor
  source:
    remote:
      path: Lib/Common/Table/DynamicTableEntity.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: .ctor
    path: Lib/Common/Table/DynamicTableEntity.cs
    startLine: 54
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity\" data-throw-if-not-resolved=\"false\"></xref> class with the entity's partition key, row key, ETag (if available/required), and properties.\n"
  example: []
  syntax:
    content: public DynamicTableEntity(string partitionKey, string rowKey, string etag, IDictionary<string, EntityProperty> properties)
    content.vb: Public Sub New(partitionKey As String, rowKey As String, etag As String, properties As IDictionary(Of String, EntityProperty))
    parameters:
    - id: partitionKey
      type: System.String
      description: A string containing the partition key value for the entity.
    - id: rowKey
      type: System.String
      description: A string containing the row key value for the entity.
    - id: etag
      type: System.String
      description: A string containing the ETag for the entity.
    - id: properties
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty}
      description: An <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> object containing the entity's properties, indexed by property name.
  overload: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.#ctor*
  nameWithType.vb: DynamicTableEntity.DynamicTableEntity(String, String, String, IDictionary(Of String, EntityProperty))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.DynamicTableEntity(System.String, System.String, System.String, System.Collections.Generic.IDictionary(Of System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty))
  name.vb: DynamicTableEntity(String, String, String, IDictionary(Of String, EntityProperty))
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Properties
  commentId: P:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Properties
  id: Properties
  parent: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: DynamicTableEntity.Properties
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Properties
  type: Property
  source:
    remote:
      path: Lib/Common/Table/DynamicTableEntity.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Properties
    path: Lib/Common/Table/DynamicTableEntity.cs
    startLine: 86
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nGets or sets the properties in the table entity, indexed by property name.\n"
  example: []
  syntax:
    content: public IDictionary<string, EntityProperty> Properties { get; set; }
    content.vb: Public Property Properties As IDictionary(Of String, EntityProperty)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty}
      description: An <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> object containing the entity's properties.
  overload: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Properties*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.PartitionKey
  commentId: P:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.PartitionKey
  id: PartitionKey
  parent: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  langs:
  - csharp
  - vb
  name: PartitionKey
  nameWithType: DynamicTableEntity.PartitionKey
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.PartitionKey
  type: Property
  source:
    remote:
      path: Lib/Common/Table/DynamicTableEntity.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: PartitionKey
    path: Lib/Common/Table/DynamicTableEntity.cs
    startLine: 92
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nGets or sets the entity's partition key.\n"
  example: []
  syntax:
    content: public string PartitionKey { get; set; }
    content.vb: Public Property PartitionKey As String
    parameters: []
    return:
      type: System.String
      description: A string containing the partition key value for the entity.
  overload: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.PartitionKey*
  implements:
  - Microsoft.WindowsAzure.Storage.Table.ITableEntity.PartitionKey
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.RowKey
  commentId: P:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.RowKey
  id: RowKey
  parent: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  langs:
  - csharp
  - vb
  name: RowKey
  nameWithType: DynamicTableEntity.RowKey
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.RowKey
  type: Property
  source:
    remote:
      path: Lib/Common/Table/DynamicTableEntity.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: RowKey
    path: Lib/Common/Table/DynamicTableEntity.cs
    startLine: 98
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nGets or sets the entity's row key.\n"
  example: []
  syntax:
    content: public string RowKey { get; set; }
    content.vb: Public Property RowKey As String
    parameters: []
    return:
      type: System.String
      description: A string containing the row key value for the entity.
  overload: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.RowKey*
  implements:
  - Microsoft.WindowsAzure.Storage.Table.ITableEntity.RowKey
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Timestamp
  commentId: P:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Timestamp
  id: Timestamp
  parent: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  langs:
  - csharp
  - vb
  name: Timestamp
  nameWithType: DynamicTableEntity.Timestamp
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Timestamp
  type: Property
  source:
    remote:
      path: Lib/Common/Table/DynamicTableEntity.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Timestamp
    path: Lib/Common/Table/DynamicTableEntity.cs
    startLine: 104
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nGets or sets the entity's timestamp.\n"
  example: []
  syntax:
    content: public DateTimeOffset Timestamp { get; set; }
    content.vb: Public Property Timestamp As DateTimeOffset
    parameters: []
    return:
      type: System.DateTimeOffset
      description: A <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> containing the timestamp for the entity.
  overload: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Timestamp*
  implements:
  - Microsoft.WindowsAzure.Storage.Table.ITableEntity.Timestamp
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ETag
  commentId: P:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ETag
  id: ETag
  parent: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  langs:
  - csharp
  - vb
  name: ETag
  nameWithType: DynamicTableEntity.ETag
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ETag
  type: Property
  source:
    remote:
      path: Lib/Common/Table/DynamicTableEntity.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: ETag
    path: Lib/Common/Table/DynamicTableEntity.cs
    startLine: 111
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nGets or sets the entity's current ETag.\n"
  remarks: Set this value to '*' to blindly overwrite an entity as part of an update operation.
  example: []
  syntax:
    content: public string ETag { get; set; }
    content.vb: Public Property ETag As String
    parameters: []
    return:
      type: System.String
      description: A string containing the ETag for the entity.
  overload: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ETag*
  implements:
  - Microsoft.WindowsAzure.Storage.Table.ITableEntity.ETag
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Item(System.String)
  commentId: P:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Item(System.String)
  id: Item(System.String)
  parent: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: DynamicTableEntity.Item[String]
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Item[System.String]
  type: Property
  source:
    remote:
      path: Lib/Common/Table/DynamicTableEntity.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: this[]
    path: Lib/Common/Table/DynamicTableEntity.cs
    startLine: 119
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nGets or sets the entity's property, given the name of the property.\n"
  example: []
  syntax:
    content: public EntityProperty this[string key] { get; set; }
    content.vb: Public Property Item(key As String) As EntityProperty
    parameters:
    - id: key
      type: System.String
      description: A string containing the name of the property.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.EntityProperty
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityProperty" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Item*
  nameWithType.vb: DynamicTableEntity.Item(String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Item(System.String)
  name.vb: Item(String)
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ReadEntity(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ReadEntity(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.OperationContext)
  id: ReadEntity(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  langs:
  - csharp
  - vb
  name: ReadEntity(IDictionary<String, EntityProperty>, OperationContext)
  nameWithType: DynamicTableEntity.ReadEntity(IDictionary<String, EntityProperty>, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ReadEntity(System.Collections.Generic.IDictionary<System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty>, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/DynamicTableEntity.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: ReadEntity
    path: Lib/Common/Table/DynamicTableEntity.cs
    startLine: 132
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nDeserializes this <xref href=\"Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity\" data-throw-if-not-resolved=\"false\"></xref> instance using the specified <xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref> of property names to values of type <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityProperty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: The properties dictionary passed to this API is stored internally as a reference, not a copy.
  example: []
  syntax:
    content: public void ReadEntity(IDictionary<string, EntityProperty> properties, OperationContext operationContext)
    content.vb: Public Sub ReadEntity(properties As IDictionary(Of String, EntityProperty), operationContext As OperationContext)
    parameters:
    - id: properties
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty}
      description: A collection containing the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> of string property names mapped to values of type <xref href="Microsoft.WindowsAzure.Storage.Table.EntityProperty" data-throw-if-not-resolved="false"></xref> to store in this <xref href="Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity" data-throw-if-not-resolved="false"></xref> instance.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
  overload: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ReadEntity*
  implements:
  - Microsoft.WindowsAzure.Storage.Table.ITableEntity.ReadEntity(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.OperationContext)
  nameWithType.vb: DynamicTableEntity.ReadEntity(IDictionary(Of String, EntityProperty), OperationContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ReadEntity(System.Collections.Generic.IDictionary(Of System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty), Microsoft.WindowsAzure.Storage.OperationContext)
  name.vb: ReadEntity(IDictionary(Of String, EntityProperty), OperationContext)
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.WriteEntity(Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.WriteEntity(Microsoft.WindowsAzure.Storage.OperationContext)
  id: WriteEntity(Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  langs:
  - csharp
  - vb
  name: WriteEntity(OperationContext)
  nameWithType: DynamicTableEntity.WriteEntity(OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.WriteEntity(Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/DynamicTableEntity.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: WriteEntity
    path: Lib/Common/Table/DynamicTableEntity.cs
    startLine: 142
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nSerializes the <xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref> of property names mapped to values of type <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityProperty\" data-throw-if-not-resolved=\"false\"></xref> from this <xref href=\"Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  example: []
  syntax:
    content: public IDictionary<string, EntityProperty> WriteEntity(OperationContext operationContext)
    content.vb: Public Function WriteEntity(operationContext As OperationContext) As IDictionary(Of String, EntityProperty)
    parameters:
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty}
      description: An <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> object containing the map of string property names to values of type <xref href="Microsoft.WindowsAzure.Storage.Table.EntityProperty" data-throw-if-not-resolved="false"></xref> stored in this <xref href="Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity" data-throw-if-not-resolved="false"></xref> instance.
  overload: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.WriteEntity*
  implements:
  - Microsoft.WindowsAzure.Storage.Table.ITableEntity.WriteEntity(Microsoft.WindowsAzure.Storage.OperationContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.WindowsAzure.Storage.Table.ITableEntity
  commentId: T:Microsoft.WindowsAzure.Storage.Table.ITableEntity
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: ITableEntity
  nameWithType: ITableEntity
  fullName: Microsoft.WindowsAzure.Storage.Table.ITableEntity
- uid: Microsoft.WindowsAzure.Storage.Table
  commentId: N:Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Table
  nameWithType: Microsoft.WindowsAzure.Storage.Table
  fullName: Microsoft.WindowsAzure.Storage.Table
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  commentId: T:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  isExternal: false
  name: DynamicTableEntity
  nameWithType: DynamicTableEntity
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.#ctor*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.#ctor
  isExternal: false
  name: DynamicTableEntity
  nameWithType: DynamicTableEntity.DynamicTableEntity
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.DynamicTableEntity
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty}
  commentId: T:System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, EntityProperty>
  nameWithType: IDictionary<String, EntityProperty>
  fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty>
  nameWithType.vb: IDictionary(Of String, EntityProperty)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty)
  name.vb: IDictionary(Of String, EntityProperty)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityProperty
    name: EntityProperty
    nameWithType: EntityProperty
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityProperty
    name: EntityProperty
    nameWithType: EntityProperty
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Properties*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Properties
  isExternal: false
  name: Properties
  nameWithType: DynamicTableEntity.Properties
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Properties
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.PartitionKey*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.PartitionKey
  isExternal: false
  name: PartitionKey
  nameWithType: DynamicTableEntity.PartitionKey
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.PartitionKey
- uid: Microsoft.WindowsAzure.Storage.Table.ITableEntity.PartitionKey
  commentId: P:Microsoft.WindowsAzure.Storage.Table.ITableEntity.PartitionKey
  parent: Microsoft.WindowsAzure.Storage.Table.ITableEntity
  isExternal: false
  name: PartitionKey
  nameWithType: ITableEntity.PartitionKey
  fullName: Microsoft.WindowsAzure.Storage.Table.ITableEntity.PartitionKey
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.RowKey*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.RowKey
  isExternal: false
  name: RowKey
  nameWithType: DynamicTableEntity.RowKey
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.RowKey
- uid: Microsoft.WindowsAzure.Storage.Table.ITableEntity.RowKey
  commentId: P:Microsoft.WindowsAzure.Storage.Table.ITableEntity.RowKey
  parent: Microsoft.WindowsAzure.Storage.Table.ITableEntity
  isExternal: false
  name: RowKey
  nameWithType: ITableEntity.RowKey
  fullName: Microsoft.WindowsAzure.Storage.Table.ITableEntity.RowKey
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Timestamp*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Timestamp
  isExternal: false
  name: Timestamp
  nameWithType: DynamicTableEntity.Timestamp
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Timestamp
- uid: Microsoft.WindowsAzure.Storage.Table.ITableEntity.Timestamp
  commentId: P:Microsoft.WindowsAzure.Storage.Table.ITableEntity.Timestamp
  parent: Microsoft.WindowsAzure.Storage.Table.ITableEntity
  isExternal: false
  name: Timestamp
  nameWithType: ITableEntity.Timestamp
  fullName: Microsoft.WindowsAzure.Storage.Table.ITableEntity.Timestamp
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ETag*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ETag
  isExternal: false
  name: ETag
  nameWithType: DynamicTableEntity.ETag
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ETag
- uid: Microsoft.WindowsAzure.Storage.Table.ITableEntity.ETag
  commentId: P:Microsoft.WindowsAzure.Storage.Table.ITableEntity.ETag
  parent: Microsoft.WindowsAzure.Storage.Table.ITableEntity
  isExternal: false
  name: ETag
  nameWithType: ITableEntity.ETag
  fullName: Microsoft.WindowsAzure.Storage.Table.ITableEntity.ETag
- uid: Microsoft.WindowsAzure.Storage.Table.EntityProperty
  commentId: T:Microsoft.WindowsAzure.Storage.Table.EntityProperty
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: EntityProperty
  nameWithType: EntityProperty
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityProperty
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Item*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Item
  isExternal: false
  name: Item
  nameWithType: DynamicTableEntity.Item
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.Item
- uid: Microsoft.WindowsAzure.Storage.OperationContext
  commentId: T:Microsoft.WindowsAzure.Storage.OperationContext
  parent: Microsoft.WindowsAzure.Storage
  isExternal: false
  name: OperationContext
  nameWithType: OperationContext
  fullName: Microsoft.WindowsAzure.Storage.OperationContext
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ReadEntity*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ReadEntity
  isExternal: false
  name: ReadEntity
  nameWithType: DynamicTableEntity.ReadEntity
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.ReadEntity
- uid: Microsoft.WindowsAzure.Storage.Table.ITableEntity.ReadEntity(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.ITableEntity.ReadEntity(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.ITableEntity
  isExternal: true
  name: ReadEntity(IDictionary<String, EntityProperty>, OperationContext)
  nameWithType: ITableEntity.ReadEntity(IDictionary<String, EntityProperty>, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.ITableEntity.ReadEntity(System.Collections.Generic.IDictionary<System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty>, Microsoft.WindowsAzure.Storage.OperationContext)
  nameWithType.vb: ITableEntity.ReadEntity(IDictionary(Of String, EntityProperty), OperationContext)
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.ITableEntity.ReadEntity(System.Collections.Generic.IDictionary(Of System.String, Microsoft.WindowsAzure.Storage.Table.EntityProperty), Microsoft.WindowsAzure.Storage.OperationContext)
  name.vb: ReadEntity(IDictionary(Of String, EntityProperty), OperationContext)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.ITableEntity.ReadEntity(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.OperationContext)
    name: ReadEntity
    nameWithType: ITableEntity.ReadEntity
    fullName: Microsoft.WindowsAzure.Storage.Table.ITableEntity.ReadEntity
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityProperty
    name: EntityProperty
    nameWithType: EntityProperty
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.Storage.OperationContext
    name: OperationContext
    nameWithType: OperationContext
    fullName: Microsoft.WindowsAzure.Storage.OperationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.ITableEntity.ReadEntity(System.Collections.Generic.IDictionary{System.String,Microsoft.WindowsAzure.Storage.Table.EntityProperty},Microsoft.WindowsAzure.Storage.OperationContext)
    name: ReadEntity
    nameWithType: ITableEntity.ReadEntity
    fullName: Microsoft.WindowsAzure.Storage.Table.ITableEntity.ReadEntity
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityProperty
    name: EntityProperty
    nameWithType: EntityProperty
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityProperty
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.Storage.OperationContext
    name: OperationContext
    nameWithType: OperationContext
    fullName: Microsoft.WindowsAzure.Storage.OperationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage
  commentId: N:Microsoft.WindowsAzure.Storage
  isExternal: false
  name: Microsoft.WindowsAzure.Storage
  nameWithType: Microsoft.WindowsAzure.Storage
  fullName: Microsoft.WindowsAzure.Storage
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.WriteEntity*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.WriteEntity
  isExternal: false
  name: WriteEntity
  nameWithType: DynamicTableEntity.WriteEntity
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity.WriteEntity
- uid: Microsoft.WindowsAzure.Storage.Table.ITableEntity.WriteEntity(Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.ITableEntity.WriteEntity(Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.ITableEntity
  isExternal: false
  name: WriteEntity(OperationContext)
  nameWithType: ITableEntity.WriteEntity(OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.ITableEntity.WriteEntity(Microsoft.WindowsAzure.Storage.OperationContext)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.ITableEntity.WriteEntity(Microsoft.WindowsAzure.Storage.OperationContext)
    name: WriteEntity
    nameWithType: ITableEntity.WriteEntity
    fullName: Microsoft.WindowsAzure.Storage.Table.ITableEntity.WriteEntity
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.WindowsAzure.Storage.OperationContext
    name: OperationContext
    nameWithType: OperationContext
    fullName: Microsoft.WindowsAzure.Storage.OperationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.ITableEntity.WriteEntity(Microsoft.WindowsAzure.Storage.OperationContext)
    name: WriteEntity
    nameWithType: ITableEntity.WriteEntity
    fullName: Microsoft.WindowsAzure.Storage.Table.ITableEntity.WriteEntity
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.WindowsAzure.Storage.OperationContext
    name: OperationContext
    nameWithType: OperationContext
    fullName: Microsoft.WindowsAzure.Storage.OperationContext
  - name: )
    nameWithType: )
    fullName: )
