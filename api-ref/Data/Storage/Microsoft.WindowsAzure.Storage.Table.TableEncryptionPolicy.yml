### YamlMime:ManagedReference
items:
- uid: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy
  id: TableEncryptionPolicy
  parent: Microsoft.WindowsAzure.Storage.Table
  children:
  - Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.#ctor(Microsoft.Azure.KeyVault.Core.IKey,Microsoft.Azure.KeyVault.Core.IKeyResolver)
  - Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.Key
  - Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.KeyResolver
  langs:
  - csharp
  - vb
  name: TableEncryptionPolicy
  nameWithType: TableEncryptionPolicy
  fullName: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy
  type: Class
  source:
    remote:
      path: Lib/ClassLibraryCommon/Table/TableEncryptionPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: TableEncryptionPolicy
    path: Lib/ClassLibraryCommon/Table/TableEncryptionPolicy.cs
    startLine: 33
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nRepresents an encryption policy for performing envelope encryption/decryption of entities in Azure tables.\n"
  example: []
  syntax:
    content: public class TableEncryptionPolicy
    content.vb: Public Class TableEncryptionPolicy
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.Key
  commentId: P:Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.Key
  id: Key
  parent: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: TableEncryptionPolicy.Key
  fullName: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.Key
  type: Property
  source:
    remote:
      path: Lib/ClassLibraryCommon/Table/TableEncryptionPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Key
    path: Lib/ClassLibraryCommon/Table/TableEncryptionPolicy.cs
    startLine: 38
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nAn object of type <xref href=\"Microsoft.Azure.KeyVault.Core.IKey\" data-throw-if-not-resolved=\"false\"></xref> that is used to wrap/unwrap the content key during encryption.\n"
  example: []
  syntax:
    content: public IKey Key { get; }
    content.vb: Public ReadOnly Property Key As IKey
    parameters: []
    return:
      type: Microsoft.Azure.KeyVault.Core.IKey
  overload: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.Key*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.KeyResolver
  commentId: P:Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.KeyResolver
  id: KeyResolver
  parent: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy
  langs:
  - csharp
  - vb
  name: KeyResolver
  nameWithType: TableEncryptionPolicy.KeyResolver
  fullName: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.KeyResolver
  type: Property
  source:
    remote:
      path: Lib/ClassLibraryCommon/Table/TableEncryptionPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: KeyResolver
    path: Lib/ClassLibraryCommon/Table/TableEncryptionPolicy.cs
    startLine: 44
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nGets or sets the key resolver used to select the correct key for decrypting existing table entities.\n"
  example: []
  syntax:
    content: public IKeyResolver KeyResolver { get; }
    content.vb: Public ReadOnly Property KeyResolver As IKeyResolver
    parameters: []
    return:
      type: Microsoft.Azure.KeyVault.Core.IKeyResolver
      description: A resolver that returns an <xref href="Microsoft.Azure.KeyVault.Core.IKeyResolver" data-throw-if-not-resolved="false"></xref>, given a key ID.
  overload: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.KeyResolver*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.#ctor(Microsoft.Azure.KeyVault.Core.IKey,Microsoft.Azure.KeyVault.Core.IKeyResolver)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.#ctor(Microsoft.Azure.KeyVault.Core.IKey,Microsoft.Azure.KeyVault.Core.IKeyResolver)
  id: '#ctor(Microsoft.Azure.KeyVault.Core.IKey,Microsoft.Azure.KeyVault.Core.IKeyResolver)'
  parent: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy
  langs:
  - csharp
  - vb
  name: TableEncryptionPolicy(IKey, IKeyResolver)
  nameWithType: TableEncryptionPolicy.TableEncryptionPolicy(IKey, IKeyResolver)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.TableEncryptionPolicy(Microsoft.Azure.KeyVault.Core.IKey, Microsoft.Azure.KeyVault.Core.IKeyResolver)
  type: Constructor
  source:
    remote:
      path: Lib/ClassLibraryCommon/Table/TableEncryptionPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: .ctor
    path: Lib/ClassLibraryCommon/Table/TableEncryptionPolicy.cs
    startLine: 56
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy\" data-throw-if-not-resolved=\"false\"></xref> class with the specified key and resolver.\n"
  remarks: >-
    If the generated policy is to be used for encryption, users are expected to provide a key at the minimum.

    The absence of key will cause an exception to be thrown during encryption.<br />

    If the generated policy is intended to be used for decryption, users can provide a key resolver. The client library will:<br />

    1. Invoke the key resolver, if specified, to get the key.<br />

    2. If resolver is not specified but a key is specified, the client library will match the key ID against the key and use the key.
  example: []
  syntax:
    content: public TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)
    content.vb: Public Sub New(key As IKey, keyResolver As IKeyResolver)
    parameters:
    - id: key
      type: Microsoft.Azure.KeyVault.Core.IKey
      description: An object of type <xref href="Microsoft.Azure.KeyVault.Core.IKey" data-throw-if-not-resolved="false"></xref> that is used to wrap/unwrap the content encryption key.
    - id: keyResolver
      type: Microsoft.Azure.KeyVault.Core.IKeyResolver
      description: The key resolver used to select the correct key for decrypting existing table entities.
  overload: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.WindowsAzure.Storage.Table
  commentId: N:Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Table
  nameWithType: Microsoft.WindowsAzure.Storage.Table
  fullName: Microsoft.WindowsAzure.Storage.Table
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.KeyVault.Core.IKey
  commentId: T:Microsoft.Azure.KeyVault.Core.IKey
  parent: Microsoft.Azure.KeyVault.Core
  isExternal: true
  name: IKey
  nameWithType: IKey
  fullName: Microsoft.Azure.KeyVault.Core.IKey
- uid: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.Key*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.Key
  isExternal: false
  name: Key
  nameWithType: TableEncryptionPolicy.Key
  fullName: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.Key
- uid: Microsoft.Azure.KeyVault.Core
  commentId: N:Microsoft.Azure.KeyVault.Core
  isExternal: false
  name: Microsoft.Azure.KeyVault.Core
  nameWithType: Microsoft.Azure.KeyVault.Core
  fullName: Microsoft.Azure.KeyVault.Core
- uid: Microsoft.Azure.KeyVault.Core.IKeyResolver
  commentId: T:Microsoft.Azure.KeyVault.Core.IKeyResolver
  parent: Microsoft.Azure.KeyVault.Core
  isExternal: true
  name: IKeyResolver
  nameWithType: IKeyResolver
  fullName: Microsoft.Azure.KeyVault.Core.IKeyResolver
- uid: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.KeyResolver*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.KeyResolver
  isExternal: false
  name: KeyResolver
  nameWithType: TableEncryptionPolicy.KeyResolver
  fullName: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.KeyResolver
- uid: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: TableEncryptionPolicy
  nameWithType: TableEncryptionPolicy
  fullName: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy
- uid: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.#ctor*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.#ctor
  isExternal: false
  name: TableEncryptionPolicy
  nameWithType: TableEncryptionPolicy.TableEncryptionPolicy
  fullName: Microsoft.WindowsAzure.Storage.Table.TableEncryptionPolicy.TableEncryptionPolicy
