### YamlMime:ManagedReference
items:
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableOperation
  id: TableOperation
  parent: Microsoft.WindowsAzure.Storage.Table
  children:
  - Microsoft.WindowsAzure.Storage.Table.TableOperation.Delete(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  - Microsoft.WindowsAzure.Storage.Table.TableOperation.Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  - Microsoft.WindowsAzure.Storage.Table.TableOperation.Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity,System.Boolean)
  - Microsoft.WindowsAzure.Storage.Table.TableOperation.InsertOrMerge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  - Microsoft.WindowsAzure.Storage.Table.TableOperation.InsertOrReplace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  - Microsoft.WindowsAzure.Storage.Table.TableOperation.Merge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  - Microsoft.WindowsAzure.Storage.Table.TableOperation.Replace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  - Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve(System.String,System.String,System.Collections.Generic.List{System.String})
  - Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve``1(System.String,System.String,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},System.Collections.Generic.List{System.String})
  - Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve``1(System.String,System.String,System.Collections.Generic.List{System.String})
  langs:
  - csharp
  - vb
  name: TableOperation
  nameWithType: TableOperation
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation
  type: Class
  source:
    remote:
      path: Lib/Common/Table/TableOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: TableOperation
    path: Lib/Common/Table/TableOperation.Common.cs
    startLine: 31
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nRepresents a single table operation.\n"
  example: []
  syntax:
    content: public class TableOperation
    content.vb: Public Class TableOperation
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.Delete(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableOperation.Delete(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  id: Delete(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  parent: Microsoft.WindowsAzure.Storage.Table.TableOperation
  langs:
  - csharp
  - vb
  name: Delete(ITableEntity)
  nameWithType: TableOperation.Delete(ITableEntity)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.Delete(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Delete
    path: Lib/Common/Table/TableOperation.Common.cs
    startLine: 126
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nCreates a new table operation that deletes the given entity\nfrom a table.\n"
  example: []
  syntax:
    content: public static TableOperation Delete(ITableEntity entity)
    content.vb: Public Shared Function Delete(entity As ITableEntity) As TableOperation
    parameters:
    - id: entity
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.ITableEntity" data-throw-if-not-resolved="false"></xref> object to be deleted from the table.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.WindowsAzure.Storage.Table.TableOperation.Delete*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableOperation.Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  id: Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  parent: Microsoft.WindowsAzure.Storage.Table.TableOperation
  langs:
  - csharp
  - vb
  name: Insert(ITableEntity)
  nameWithType: TableOperation.Insert(ITableEntity)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Insert
    path: Lib/Common/Table/TableOperation.Common.cs
    startLine: 147
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nCreates a new table operation that inserts the given entity\ninto a table.\n"
  example: []
  syntax:
    content: public static TableOperation Insert(ITableEntity entity)
    content.vb: Public Shared Function Insert(entity As ITableEntity) As TableOperation
    parameters:
    - id: entity
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.ITableEntity" data-throw-if-not-resolved="false"></xref> object to be inserted into the table.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.WindowsAzure.Storage.Table.TableOperation.Insert*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity,System.Boolean)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableOperation.Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity,System.Boolean)
  id: Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity,System.Boolean)
  parent: Microsoft.WindowsAzure.Storage.Table.TableOperation
  langs:
  - csharp
  - vb
  name: Insert(ITableEntity, Boolean)
  nameWithType: TableOperation.Insert(ITableEntity, Boolean)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity, System.Boolean)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Insert
    path: Lib/Common/Table/TableOperation.Common.cs
    startLine: 159
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nCreates a new table operation that inserts the given entity\ninto a table.\n"
  example: []
  syntax:
    content: public static TableOperation Insert(ITableEntity entity, bool echoContent)
    content.vb: Public Shared Function Insert(entity As ITableEntity, echoContent As Boolean) As TableOperation
    parameters:
    - id: entity
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.ITableEntity" data-throw-if-not-resolved="false"></xref> object to be inserted into the table.
    - id: echoContent
      type: System.Boolean
      description: <code>true</code> if the message payload should be returned in the response to the insert operation. <code>false</code> otherwise.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.WindowsAzure.Storage.Table.TableOperation.Insert*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.InsertOrMerge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableOperation.InsertOrMerge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  id: InsertOrMerge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  parent: Microsoft.WindowsAzure.Storage.Table.TableOperation
  langs:
  - csharp
  - vb
  name: InsertOrMerge(ITableEntity)
  nameWithType: TableOperation.InsertOrMerge(ITableEntity)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.InsertOrMerge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: InsertOrMerge
    path: Lib/Common/Table/TableOperation.Common.cs
    startLine: 175
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nCreates a new table operation that inserts the given entity\ninto a table if the entity does not exist; if the entity does\nexist then its contents are merged with the provided entity.\n"
  example: []
  syntax:
    content: public static TableOperation InsertOrMerge(ITableEntity entity)
    content.vb: Public Shared Function InsertOrMerge(entity As ITableEntity) As TableOperation
    parameters:
    - id: entity
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.ITableEntity" data-throw-if-not-resolved="false"></xref> object to be inserted or merged.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.WindowsAzure.Storage.Table.TableOperation.InsertOrMerge*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.InsertOrReplace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableOperation.InsertOrReplace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  id: InsertOrReplace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  parent: Microsoft.WindowsAzure.Storage.Table.TableOperation
  langs:
  - csharp
  - vb
  name: InsertOrReplace(ITableEntity)
  nameWithType: TableOperation.InsertOrReplace(ITableEntity)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.InsertOrReplace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: InsertOrReplace
    path: Lib/Common/Table/TableOperation.Common.cs
    startLine: 191
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nCreates a new table operation that inserts the given entity\ninto a table if the entity does not exist; if the entity does\nexist then its contents are replaced with the provided entity.\n"
  example: []
  syntax:
    content: public static TableOperation InsertOrReplace(ITableEntity entity)
    content.vb: Public Shared Function InsertOrReplace(entity As ITableEntity) As TableOperation
    parameters:
    - id: entity
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.ITableEntity" data-throw-if-not-resolved="false"></xref> object to be inserted or replaced.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.WindowsAzure.Storage.Table.TableOperation.InsertOrReplace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.Merge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableOperation.Merge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  id: Merge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  parent: Microsoft.WindowsAzure.Storage.Table.TableOperation
  langs:
  - csharp
  - vb
  name: Merge(ITableEntity)
  nameWithType: TableOperation.Merge(ITableEntity)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.Merge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Merge
    path: Lib/Common/Table/TableOperation.Common.cs
    startLine: 206
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nCreates a new table operation that merges the contents of\nthe given entity with the existing entity in a table.\n"
  example: []
  syntax:
    content: public static TableOperation Merge(ITableEntity entity)
    content.vb: Public Shared Function Merge(entity As ITableEntity) As TableOperation
    parameters:
    - id: entity
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.ITableEntity" data-throw-if-not-resolved="false"></xref> object to be merged.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.WindowsAzure.Storage.Table.TableOperation.Merge*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.Replace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableOperation.Replace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  id: Replace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  parent: Microsoft.WindowsAzure.Storage.Table.TableOperation
  langs:
  - csharp
  - vb
  name: Replace(ITableEntity)
  nameWithType: TableOperation.Replace(ITableEntity)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.Replace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Replace
    path: Lib/Common/Table/TableOperation.Common.cs
    startLine: 227
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nCreates a new table operation that replaces the contents of\nthe given entity in a table.\n"
  example: []
  syntax:
    content: public static TableOperation Replace(ITableEntity entity)
    content.vb: Public Shared Function Replace(entity As ITableEntity) As TableOperation
    parameters:
    - id: entity
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.ITableEntity" data-throw-if-not-resolved="false"></xref> object to be replaced.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.WindowsAzure.Storage.Table.TableOperation.Replace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve``1(System.String,System.String,System.Collections.Generic.List{System.String})
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve``1(System.String,System.String,System.Collections.Generic.List{System.String})
  id: Retrieve``1(System.String,System.String,System.Collections.Generic.List{System.String})
  parent: Microsoft.WindowsAzure.Storage.Table.TableOperation
  langs:
  - csharp
  - vb
  name: Retrieve<TElement>(String, String, List<String>)
  nameWithType: TableOperation.Retrieve<TElement>(String, String, List<String>)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve<TElement>(System.String, System.String, System.Collections.Generic.List<System.String>)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Retrieve
    path: Lib/Common/Table/TableOperation.Common.cs
    startLine: 251
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nCreates a new table operation that retrieves the contents of\nthe given entity in a table.\n"
  example: []
  syntax:
    content: 'public static TableOperation Retrieve<TElement>(string partitionKey, string rowkey, List<string> selectColumns = null)where TElement : ITableEntity'
    content.vb: Public Shared Function Retrieve(Of TElement As ITableEntity)(partitionKey As String, rowkey As String, selectColumns As List(Of String) = Nothing) As TableOperation
    parameters:
    - id: partitionKey
      type: System.String
      description: A string containing the partition key of the entity to retrieve.
    - id: rowkey
      type: System.String
      description: A string containing the row key of the entity to retrieve.
    - id: selectColumns
      type: System.Collections.Generic.List{System.String}
      description: List of column names for projection.
    typeParameters:
    - id: TElement
      description: The class of type for the entity to retrieve.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve*
  nameWithType.vb: TableOperation.Retrieve(Of TElement)(String, String, List(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve(Of TElement)(System.String, System.String, System.Collections.Generic.List(Of System.String))
  name.vb: Retrieve(Of TElement)(String, String, List(Of String))
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve``1(System.String,System.String,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},System.Collections.Generic.List{System.String})
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve``1(System.String,System.String,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},System.Collections.Generic.List{System.String})
  id: Retrieve``1(System.String,System.String,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},System.Collections.Generic.List{System.String})
  parent: Microsoft.WindowsAzure.Storage.Table.TableOperation
  langs:
  - csharp
  - vb
  name: Retrieve<TResult>(String, String, EntityResolver<TResult>, List<String>)
  nameWithType: TableOperation.Retrieve<TResult>(String, String, EntityResolver<TResult>, List<String>)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve<TResult>(System.String, System.String, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, System.Collections.Generic.List<System.String>)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Retrieve
    path: Lib/Common/Table/TableOperation.Common.cs
    startLine: 288
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nCreates a new table operation that retrieves the contents of\nthe given entity in a table.\n"
  example: []
  syntax:
    content: public static TableOperation Retrieve<TResult>(string partitionKey, string rowkey, EntityResolver<TResult> resolver, List<string> selectedColumns = null)
    content.vb: Public Shared Function Retrieve(Of TResult)(partitionKey As String, rowkey As String, resolver As EntityResolver(Of TResult), selectedColumns As List(Of String) = Nothing) As TableOperation
    parameters:
    - id: partitionKey
      type: System.String
      description: A string containing the partition key of the entity to retrieve.
    - id: rowkey
      type: System.String
      description: A string containing the row key of the entity to retrieve.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver%601" data-throw-if-not-resolved="false"></xref> implementation to project the entity to retrieve as a particular type in the result.
    - id: selectedColumns
      type: System.Collections.Generic.List{System.String}
      description: List of column names for projection.
    typeParameters:
    - id: TResult
      description: The return type which the specified <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver%601" data-throw-if-not-resolved="false"></xref> will resolve the given entity to.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve*
  nameWithType.vb: TableOperation.Retrieve(Of TResult)(String, String, EntityResolver(Of TResult), List(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve(Of TResult)(System.String, System.String, Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), System.Collections.Generic.List(Of System.String))
  name.vb: Retrieve(Of TResult)(String, String, EntityResolver(Of TResult), List(Of String))
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve(System.String,System.String,System.Collections.Generic.List{System.String})
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve(System.String,System.String,System.Collections.Generic.List{System.String})
  id: Retrieve(System.String,System.String,System.Collections.Generic.List{System.String})
  parent: Microsoft.WindowsAzure.Storage.Table.TableOperation
  langs:
  - csharp
  - vb
  name: Retrieve(String, String, List<String>)
  nameWithType: TableOperation.Retrieve(String, String, List<String>)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve(System.String, System.String, System.Collections.Generic.List<System.String>)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Retrieve
    path: Lib/Common/Table/TableOperation.Common.cs
    startLine: 306
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nCreates a new table operation that retrieves the contents of\nthe given entity in a table.\n"
  example: []
  syntax:
    content: public static TableOperation Retrieve(string partitionKey, string rowkey, List<string> selectedColumns = null)
    content.vb: Public Shared Function Retrieve(partitionKey As String, rowkey As String, selectedColumns As List(Of String) = Nothing) As TableOperation
    parameters:
    - id: partitionKey
      type: System.String
      description: A string containing the partition key of the entity to be retrieved.
    - id: rowkey
      type: System.String
      description: A string containing the row key of the entity to be retrieved.
    - id: selectedColumns
      type: System.Collections.Generic.List{System.String}
      description: List of column names for projection.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve*
  nameWithType.vb: TableOperation.Retrieve(String, String, List(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve(System.String, System.String, System.Collections.Generic.List(Of System.String))
  name.vb: Retrieve(String, String, List(Of String))
references:
- uid: Microsoft.WindowsAzure.Storage.Table
  commentId: N:Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Table
  nameWithType: Microsoft.WindowsAzure.Storage.Table
  fullName: Microsoft.WindowsAzure.Storage.Table
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.WindowsAzure.Storage.Table.ITableEntity
  commentId: T:Microsoft.WindowsAzure.Storage.Table.ITableEntity
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: ITableEntity
  nameWithType: ITableEntity
  fullName: Microsoft.WindowsAzure.Storage.Table.ITableEntity
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableOperation
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: TableOperation
  nameWithType: TableOperation
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.Delete*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableOperation.Delete
  isExternal: false
  name: Delete
  nameWithType: TableOperation.Delete
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.Delete
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.Insert*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableOperation.Insert
  isExternal: false
  name: Insert
  nameWithType: TableOperation.Insert
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.Insert
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.InsertOrMerge*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableOperation.InsertOrMerge
  isExternal: false
  name: InsertOrMerge
  nameWithType: TableOperation.InsertOrMerge
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.InsertOrMerge
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.InsertOrReplace*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableOperation.InsertOrReplace
  isExternal: false
  name: InsertOrReplace
  nameWithType: TableOperation.InsertOrReplace
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.InsertOrReplace
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.Merge*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableOperation.Merge
  isExternal: false
  name: Merge
  nameWithType: TableOperation.Merge
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.Merge
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.Replace*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableOperation.Replace
  isExternal: false
  name: Replace
  nameWithType: TableOperation.Replace
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.Replace
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve
  isExternal: false
  name: Retrieve<TElement>
  nameWithType: TableOperation.Retrieve<TElement>
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve<TElement>
  nameWithType.vb: TableOperation.Retrieve(Of TElement)
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve(Of TElement)
  name.vb: Retrieve(Of TElement)
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullname.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
  commentId: T:Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
  isExternal: false
  name: EntityResolver<T>
  nameWithType: EntityResolver<T>
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver<T>
  nameWithType.vb: EntityResolver(Of T)
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of T)
  name.vb: EntityResolver(Of T)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
    name: EntityResolver
    nameWithType: EntityResolver
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
    name: EntityResolver
    nameWithType: EntityResolver
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
  commentId: T:Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0}
  parent: Microsoft.WindowsAzure.Storage.Table
  definition: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
  name: EntityResolver<TResult>
  nameWithType: EntityResolver<TResult>
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>
  nameWithType.vb: EntityResolver(Of TResult)
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult)
  name.vb: EntityResolver(Of TResult)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
    name: EntityResolver
    nameWithType: EntityResolver
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
    name: EntityResolver
    nameWithType: EntityResolver
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
