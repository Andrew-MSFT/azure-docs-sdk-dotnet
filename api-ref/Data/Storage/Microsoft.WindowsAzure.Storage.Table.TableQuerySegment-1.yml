### YamlMime:ManagedReference
items:
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
  id: TableQuerySegment`1
  parent: Microsoft.WindowsAzure.Storage.Table
  children:
  - Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.ContinuationToken
  - Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.GetEnumerator
  - Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.Results
  - Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: TableQuerySegment<TElement>
  nameWithType: TableQuerySegment<TElement>
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<TElement>
  type: Class
  source:
    remote:
      path: Lib/Common/Table/TableQuerySegment.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: TableQuerySegment
    path: Lib/Common/Table/TableQuerySegment.cs
    startLine: 26
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nRepresents a segment of results and contains continuation token information.\n"
  example: []
  syntax:
    content: 'public class TableQuerySegment<TElement> : IEnumerable<TElement>, IEnumerable'
    content.vb: >-
      Public Class TableQuerySegment(Of TElement)
          Implements IEnumerable(Of TElement), IEnumerable
    typeParameters:
    - id: TElement
      description: The type of the result that the segment contains.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{{TElement}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: TableQuerySegment(Of TElement)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of TElement)
  name.vb: TableQuerySegment(Of TElement)
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.Results
  commentId: P:Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.Results
  id: Results
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
  langs:
  - csharp
  - vb
  name: Results
  nameWithType: TableQuerySegment<TElement>.Results
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<TElement>.Results
  type: Property
  source:
    remote:
      path: Lib/Common/Table/TableQuerySegment.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Results
    path: Lib/Common/Table/TableQuerySegment.cs
    startLine: 53
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nGets an enumerable collection of results.\n"
  example: []
  syntax:
    content: public List<TElement> Results { get; }
    content.vb: Public ReadOnly Property Results As List(Of TElement)
    parameters: []
    return:
      type: System.Collections.Generic.List{{TElement}}
      description: An enumerable collection of results.
  overload: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.Results*
  nameWithType.vb: TableQuerySegment(Of TElement).Results
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of TElement).Results
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.ContinuationToken
  commentId: P:Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.ContinuationToken
  id: ContinuationToken
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
  langs:
  - csharp
  - vb
  name: ContinuationToken
  nameWithType: TableQuerySegment<TElement>.ContinuationToken
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<TElement>.ContinuationToken
  type: Property
  source:
    remote:
      path: Lib/Common/Table/TableQuerySegment.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: ContinuationToken
    path: Lib/Common/Table/TableQuerySegment.cs
    startLine: 60
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nGets a continuation token to use to retrieve the next set of results with a subsequent call to the operation.\n"
  example: []
  syntax:
    content: public TableContinuationToken ContinuationToken { get; }
    content.vb: Public ReadOnly Property ContinuationToken As TableContinuationToken
    parameters: []
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.ContinuationToken*
  nameWithType.vb: TableQuerySegment(Of TElement).ContinuationToken
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of TElement).ContinuationToken
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.GetEnumerator
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: TableQuerySegment<TElement>.GetEnumerator()
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<TElement>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableQuerySegment.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: GetEnumerator
    path: Lib/Common/Table/TableQuerySegment.cs
    startLine: 82
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nReturns an enumerator that iterates through the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableQuerySegment%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IEnumerator<TElement> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of TElement)
    return:
      type: System.Collections.Generic.IEnumerator{{TElement}}
      description: An enumerator that iterates through the <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuerySegment%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{TElement}}.GetEnumerator
  nameWithType.vb: TableQuerySegment(Of TElement).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of TElement).GetEnumerator()
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: TableQuerySegment<TElement>.IEnumerable.GetEnumerator()
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<TElement>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableQuerySegment.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: System.Collections.IEnumerable.GetEnumerator
    path: Lib/Common/Table/TableQuerySegment.cs
    startLine: 87
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  overload: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: TableQuerySegment(Of TElement).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of TElement).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: Microsoft.WindowsAzure.Storage.Table
  commentId: N:Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Table
  nameWithType: Microsoft.WindowsAzure.Storage.Table
  fullName: Microsoft.WindowsAzure.Storage.Table
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{{TElement}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TElement>
  nameWithType: IEnumerable<TElement>
  fullName: System.Collections.Generic.IEnumerable<TElement>
  nameWithType.vb: IEnumerable(Of TElement)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TElement)
  name.vb: IEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.Results*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.Results
  isExternal: false
  name: Results
  nameWithType: TableQuerySegment<TElement>.Results
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<TElement>.Results
  nameWithType.vb: TableQuerySegment(Of TElement).Results
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of TElement).Results
- uid: System.Collections.Generic.List{{TElement}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TElement>
  nameWithType: List<TElement>
  fullName: System.Collections.Generic.List<TElement>
  nameWithType.vb: List(Of TElement)
  fullname.vb: System.Collections.Generic.List(Of TElement)
  name.vb: List(Of TElement)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: TableContinuationToken
  nameWithType: TableContinuationToken
  fullName: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.ContinuationToken*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.ContinuationToken
  isExternal: false
  name: ContinuationToken
  nameWithType: TableQuerySegment<TElement>.ContinuationToken
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<TElement>.ContinuationToken
  nameWithType.vb: TableQuerySegment(Of TElement).ContinuationToken
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of TElement).ContinuationToken
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
  isExternal: false
  name: TableQuerySegment<TElement>
  nameWithType: TableQuerySegment<TElement>
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<TElement>
  nameWithType.vb: TableQuerySegment(Of TElement)
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of TElement)
  name.vb: TableQuerySegment(Of TElement)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
    name: TableQuerySegment
    nameWithType: TableQuerySegment
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
    name: TableQuerySegment
    nameWithType: TableQuerySegment
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.GetEnumerator*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: TableQuerySegment<TElement>.GetEnumerator
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<TElement>.GetEnumerator
  nameWithType.vb: TableQuerySegment(Of TElement).GetEnumerator
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of TElement).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{TElement}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TElement}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TElement>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TElement>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TElement).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of TElement).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<TElement>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TElement>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of TElement).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TElement).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{TElement}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TElement>
  nameWithType: IEnumerator<TElement>
  fullName: System.Collections.Generic.IEnumerator<TElement>
  nameWithType.vb: IEnumerator(Of TElement)
  fullname.vb: System.Collections.Generic.IEnumerator(Of TElement)
  name.vb: IEnumerator(Of TElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: TableQuerySegment<TElement>.IEnumerable.GetEnumerator
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<TElement>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: TableQuerySegment(Of TElement).System.Collections.IEnumerable.GetEnumerator
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of TElement).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
